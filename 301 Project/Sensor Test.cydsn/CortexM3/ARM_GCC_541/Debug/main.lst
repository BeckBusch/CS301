ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	compareValueL,1,1
  20              		.comm	compareValueR,1,1
  21              		.comm	goalSpeed,1,1
  22              		.comm	countL,2,2
  23              		.comm	countR,2,2
  24              		.comm	speedL,2,2
  25              		.comm	speedR,2,2
  26              		.comm	PriorityVertex,4,4
  27              		.comm	Queue,1152,4
  28              		.comm	Vertex,6,4
  29              		.global	channel
  30              		.bss
  31              		.type	channel, %object
  32              		.size	channel, 1
  33              	channel:
  34 0000 00       		.space	1
  35              		.global	instructionCursor
  36 0001 00       		.align	1
  37              		.type	instructionCursor, %object
  38              		.size	instructionCursor, 2
  39              	instructionCursor:
  40 0002 0000     		.space	2
  41              		.global	i
  42              		.align	2
  43              		.type	i, %object
  44              		.size	i, 4
  45              	i:
  46 0004 00000000 		.space	4
  47              		.global	turn_count
  48              		.align	1
  49              		.type	turn_count, %object
  50              		.size	turn_count, 2
  51              	turn_count:
  52 0008 0000     		.space	2
  53              		.global	disable_toggle
  54              		.data
  55              		.type	disable_toggle, %object
  56              		.size	disable_toggle, 1
  57              	disable_toggle:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 2


  58 0000 03       		.byte	3
  59              		.comm	ADCResult,2,2
  60              		.comm	milliVoltReading,2,2
  61              		.global	state
  62              		.bss
  63              		.type	state, %object
  64              		.size	state, 1
  65              	state:
  66 000a 00       		.space	1
  67              		.global	reset
  68              		.type	reset, %object
  69              		.size	reset, 1
  70              	reset:
  71 000b 00       		.space	1
  72              		.global	maxValues
  73              		.align	2
  74              		.type	maxValues, %object
  75              		.size	maxValues, 10
  76              	maxValues:
  77 000c 00000000 		.space	10
  77      00000000 
  77      0000
  78              		.global	pastValues
  79 0016 0000     		.align	2
  80              		.type	pastValues, %object
  81              		.size	pastValues, 10
  82              	pastValues:
  83 0018 00000000 		.space	10
  83      00000000 
  83      0000
  84              		.global	count
  85              		.align	1
  86              		.type	count, %object
  87              		.size	count, 2
  88              	count:
  89 0022 0000     		.space	2
  90              		.comm	sensor_state,5,4
  91              		.section	.text.isr_eoc_1,"ax",%progbits
  92              		.align	2
  93              		.global	isr_eoc_1
  94              		.thumb
  95              		.thumb_func
  96              		.type	isr_eoc_1, %function
  97              	isr_eoc_1:
  98              	.LFB64:
  99              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  * main.c
   3:main.c        ****  * ========================================
   4:main.c        **** */
   5:main.c        **** 
   6:main.c        **** #include "project.h"
   7:main.c        **** #include "motors.h"
   8:main.c        **** #include "USBUART.h"
   9:main.c        **** #include "decoders.h"
  10:main.c        **** #include <stdio.h>
  11:main.c        **** #include "pathfinding.h"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 3


  12:main.c        **** // ADD THIS
  13:main.c        **** 
  14:main.c        **** #define ON 1
  15:main.c        **** #define OFF 0
  16:main.c        **** 
  17:main.c        **** #define L 0
  18:main.c        **** #define R 1
  19:main.c        **** #define J 2
  20:main.c        **** #define NULLDIR -1
  21:main.c        **** 
  22:main.c        **** // FL, FR, CL, CR, BC = front left, front right, center left, center right, back center respectivel
  23:main.c        **** #define FL 0
  24:main.c        **** #define FR 1
  25:main.c        **** #define CL 2
  26:main.c        **** #define CR 3
  27:main.c        **** #define BC 4
  28:main.c        **** 
  29:main.c        **** // State values.
  30:main.c        **** #define FORWARD 0
  31:main.c        **** #define TURNING_LEFT 1
  32:main.c        **** #define TURNING_RIGHT 2
  33:main.c        **** #define EXIT_LEFT 3
  34:main.c        **** #define EXIT_RIGHT 4
  35:main.c        **** #define TURNING_ENABLE 5
  36:main.c        **** #define STOPPED 6
  37:main.c        **** 
  38:main.c        **** // Disable left and right turns at appropriate times.
  39:main.c        **** #define DISABLE_LEFT_TURN 0
  40:main.c        **** #define DISABLE_RIGHT_TURN 1
  41:main.c        **** #define DISABLE_ALL 2
  42:main.c        **** #define DISABLE_NONE 3
  43:main.c        **** 
  44:main.c        **** // Prototype declarations.
  45:main.c        **** CY_ISR_PROTO(isr_eoc_1);
  46:main.c        **** CY_ISR_PROTO(isr_timer_1);
  47:main.c        **** 
  48:main.c        **** volatile uint8 channel = 0;
  49:main.c        **** volatile uint16 instructionCursor = 0;
  50:main.c        **** 
  51:main.c        **** // Move these inside main???? (volatile may need to be kept outside, among others potentially)
  52:main.c        **** uint32 i = 0;
  53:main.c        **** uint16 turn_count = 0;
  54:main.c        **** 
  55:main.c        **** uint8 disable_toggle = DISABLE_NONE;
  56:main.c        **** 
  57:main.c        **** uint16 ADCResult;
  58:main.c        **** uint16 milliVoltReading;
  59:main.c        **** uint8 state = FORWARD;
  60:main.c        **** volatile uint8 reset = 0;
  61:main.c        **** 
  62:main.c        **** uint16 maxValues[5] = {0};
  63:main.c        **** uint16 pastValues[5] = {0};
  64:main.c        **** volatile uint16 count = 0;
  65:main.c        **** uint8 sensor_state[5];
  66:main.c        **** 
  67:main.c        **** CY_ISR(isr_eoc_1) {
 100              		.loc 1 67 0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 4


 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
  68:main.c        ****     // Change the ADC channel each time an eoc interrupt is generated.
  69:main.c        ****     if (channel == 4) {
 110              		.loc 1 69 0
 111 0004 094B     		ldr	r3, .L5
 112 0006 1B78     		ldrb	r3, [r3]
 113 0008 DBB2     		uxtb	r3, r3
 114 000a 042B     		cmp	r3, #4
 115 000c 03D1     		bne	.L2
  70:main.c        ****         channel = 0;
 116              		.loc 1 70 0
 117 000e 074B     		ldr	r3, .L5
 118 0010 0022     		movs	r2, #0
 119 0012 1A70     		strb	r2, [r3]
  71:main.c        ****     } else {
  72:main.c        ****         channel++;
  73:main.c        ****     }   
  74:main.c        **** }
 120              		.loc 1 74 0
 121 0014 06E0     		b	.L4
 122              	.L2:
  72:main.c        ****     }   
 123              		.loc 1 72 0
 124 0016 054B     		ldr	r3, .L5
 125 0018 1B78     		ldrb	r3, [r3]
 126 001a DBB2     		uxtb	r3, r3
 127 001c 0133     		adds	r3, r3, #1
 128 001e DAB2     		uxtb	r2, r3
 129 0020 024B     		ldr	r3, .L5
 130 0022 1A70     		strb	r2, [r3]
 131              	.L4:
 132              		.loc 1 74 0
 133 0024 00BF     		nop
 134 0026 BD46     		mov	sp, r7
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 0028 80BC     		pop	{r7}
 138              		.cfi_restore 7
 139              		.cfi_def_cfa_offset 0
 140 002a 7047     		bx	lr
 141              	.L6:
 142              		.align	2
 143              	.L5:
 144 002c 00000000 		.word	channel
 145              		.cfi_endproc
 146              	.LFE64:
 147              		.size	isr_eoc_1, .-isr_eoc_1
 148              		.section	.text.isr_timer_1,"ax",%progbits
 149              		.align	2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 5


 150              		.global	isr_timer_1
 151              		.thumb
 152              		.thumb_func
 153              		.type	isr_timer_1, %function
 154              	isr_timer_1:
 155              	.LFB65:
  75:main.c        **** 
  76:main.c        **** CY_ISR(isr_timer_1) {
 156              		.loc 1 76 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161 0000 80B4     		push	{r7}
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 00AF     		add	r7, sp, #0
 165              		.cfi_def_cfa_register 7
  77:main.c        ****     reset = 1;
 166              		.loc 1 77 0
 167 0004 034B     		ldr	r3, .L8
 168 0006 0122     		movs	r2, #1
 169 0008 1A70     		strb	r2, [r3]
  78:main.c        **** }
 170              		.loc 1 78 0
 171 000a 00BF     		nop
 172 000c BD46     		mov	sp, r7
 173              		.cfi_def_cfa_register 13
 174              		@ sp needed
 175 000e 80BC     		pop	{r7}
 176              		.cfi_restore 7
 177              		.cfi_def_cfa_offset 0
 178 0010 7047     		bx	lr
 179              	.L9:
 180 0012 00BF     		.align	2
 181              	.L8:
 182 0014 00000000 		.word	reset
 183              		.cfi_endproc
 184              	.LFE65:
 185              		.size	isr_timer_1, .-isr_timer_1
 186              		.section	.rodata
 187              		.align	2
 188              	.LC0:
 189 0000 31313131 		.ascii	"1111111111111111101                            1000"
 189      31313131 
 189      31313131 
 189      31313131 
 189      31303120 
 190 0033 30303130 		.ascii	"001000000010001                            11101010"
 190      30303030 
 190      30303130 
 190      30303120 
 190      20202020 
 191 0066 31303131 		.ascii	"10111010101                            101000001010"
 191      31303130 
 191      31303120 
 191      20202020 
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 6


 191      20202020 
 192 0099 30303030 		.ascii	"0000101                            1010101110101110"
 192      31303120 
 192      20202020 
 192      20202020 
 192      20202020 
 193 00cc 31303120 		.ascii	"101                            1000100000100000101 "
 193      20202020 
 193      20202020 
 193      20202020 
 193      20202020 
 194 00ff 20202020 		.ascii	"                           1011111110001110101     "
 194      20202020 
 194      20202020 
 194      20202020 
 194      20202020 
 195 0132 20202020 		.ascii	"                       1000100000100010101         "
 195      20202020 
 195      20202020 
 195      20202020 
 195      20202020 
 196 0165 20202020 		.ascii	"                   1110001111101010101             "
 196      20202020 
 196      20202020 
 196      20202020 
 196      20202031 
 197 0198 20202020 		.ascii	"               1000100000101000001                 "
 197      20202020 
 197      20202020 
 197      20202031 
 197      30303031 
 198 01cb 20202020 		.ascii	"           1011111110001111101                     "
 198      20202020 
 198      20202031 
 198      30313131 
 198      31313131 
 199 01fe 20202020 		.ascii	"       1000001000101000101                         "
 199      20202031 
 199      30303030 
 199      30313030 
 199      30313031 
 200 0231 20202031 		.ascii	"   1111101011101010101                            0"
 200      31313131 
 200      30313031 
 200      31313031 
 200      30313031 
 201 0264 30303030 		.ascii	"000000010000010001                            11111"
 201      30303031 
 201      30303030 
 201      30313030 
 201      30312020 
 202 0297 31313131 		.ascii	"11111111111111\000"
 202      31313131 
 202      31313131 
 202      313100
 203              		.section	.text.main,"ax",%progbits
 204              		.align	2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 7


 205              		.global	main
 206              		.thumb
 207              		.thumb_func
 208              		.type	main, %function
 209              	main:
 210              	.LFB66:
  79:main.c        **** 
  80:main.c        **** int main(void) {
 211              		.loc 1 80 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 776
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 216              		.cfi_def_cfa_offset 36
 217              		.cfi_offset 4, -36
 218              		.cfi_offset 5, -32
 219              		.cfi_offset 6, -28
 220              		.cfi_offset 7, -24
 221              		.cfi_offset 8, -20
 222              		.cfi_offset 9, -16
 223              		.cfi_offset 10, -12
 224              		.cfi_offset 11, -8
 225              		.cfi_offset 14, -4
 226 0004 ADF5457D 		sub	sp, sp, #788
 227              		.cfi_def_cfa_offset 824
 228 0008 02AF     		add	r7, sp, #8
 229              		.cfi_def_cfa 7, 816
  81:main.c        **** 
  82:main.c        ****     // Write debugging led high.
  83:main.c        ****     led_Write(1);
 230              		.loc 1 83 0
 231 000a 0120     		movs	r0, #1
 232 000c FFF7FEFF 		bl	led_Write
  84:main.c        ****     
  85:main.c        ****     // Store the dimensions of the map so we can't go outside of it later on. Hard coding this.
  86:main.c        ****     uint16_t xdim = 19, ydim = 15;
 233              		.loc 1 86 0
 234 0010 1323     		movs	r3, #19
 235 0012 A7F8EE32 		strh	r3, [r7, #750]	@ movhi
 236 0016 0F23     		movs	r3, #15
 237 0018 A7F8EC32 		strh	r3, [r7, #748]	@ movhi
  87:main.c        ****     uint16_t xydim = xdim * ydim;
 238              		.loc 1 87 0
 239 001c B7F8EE32 		ldrh	r3, [r7, #750]	@ movhi
 240 0020 B7F8EC22 		ldrh	r2, [r7, #748]	@ movhi
 241 0024 02FB03F3 		mul	r3, r2, r3
 242 0028 A7F8EA32 		strh	r3, [r7, #746]	@ movhi
  88:main.c        **** 
  89:main.c        ****     // Copy paste the map here - make sure to append backslashes after each line.
  90:main.c        ****     uint16_t array[ydim][xdim];
 243              		.loc 1 90 0
 244 002c B7F8EEE2 		ldrh	lr, [r7, #750]
 245 0030 B7F8ECC2 		ldrh	ip, [r7, #748]
 246 0034 7346     		mov	r3, lr
 247 0036 013B     		subs	r3, r3, #1
 248 0038 C7F8E432 		str	r3, [r7, #740]
 249 003c 1FFA8EF2 		uxth	r2, lr
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 8


 250 0040 4FF00003 		mov	r3, #0
 251 0044 1D01     		lsls	r5, r3, #4
 252 0046 45EA1275 		orr	r5, r5, r2, lsr #28
 253 004a 1401     		lsls	r4, r2, #4
 254 004c 7346     		mov	r3, lr
 255 004e 5E00     		lsls	r6, r3, #1
 256 0050 6346     		mov	r3, ip
 257 0052 013B     		subs	r3, r3, #1
 258 0054 C7F8E032 		str	r3, [r7, #736]
 259 0058 1FFA8EF3 		uxth	r3, lr
 260 005c 4FF00004 		mov	r4, #0
 261 0060 1FFA8CF1 		uxth	r1, ip
 262 0064 4FF00002 		mov	r2, #0
 263 0068 01FB04F5 		mul	r5, r1, r4
 264 006c 03FB02F0 		mul	r0, r3, r2
 265 0070 2844     		add	r0, r0, r5
 266 0072 A3FB0134 		umull	r3, r4, r3, r1
 267 0076 0219     		adds	r2, r0, r4
 268 0078 1446     		mov	r4, r2
 269 007a 2201     		lsls	r2, r4, #4
 270 007c FA60     		str	r2, [r7, #12]
 271 007e FA68     		ldr	r2, [r7, #12]
 272 0080 42EA1372 		orr	r2, r2, r3, lsr #28
 273 0084 FA60     		str	r2, [r7, #12]
 274 0086 1B01     		lsls	r3, r3, #4
 275 0088 BB60     		str	r3, [r7, #8]
 276 008a 1FFA8EF1 		uxth	r1, lr
 277 008e 4FF00002 		mov	r2, #0
 278 0092 1FFA8CF3 		uxth	r3, ip
 279 0096 4FF00004 		mov	r4, #0
 280 009a 03FB02F5 		mul	r5, r3, r2
 281 009e 01FB04F0 		mul	r0, r1, r4
 282 00a2 2844     		add	r0, r0, r5
 283 00a4 A1FB0334 		umull	r3, r4, r1, r3
 284 00a8 0219     		adds	r2, r0, r4
 285 00aa 1446     		mov	r4, r2
 286 00ac 2201     		lsls	r2, r4, #4
 287 00ae 7A60     		str	r2, [r7, #4]
 288 00b0 7A68     		ldr	r2, [r7, #4]
 289 00b2 42EA1372 		orr	r2, r2, r3, lsr #28
 290 00b6 7A60     		str	r2, [r7, #4]
 291 00b8 1B01     		lsls	r3, r3, #4
 292 00ba 3B60     		str	r3, [r7]
 293 00bc 7346     		mov	r3, lr
 294 00be 6246     		mov	r2, ip
 295 00c0 02FB03F3 		mul	r3, r2, r3
 296 00c4 5B00     		lsls	r3, r3, #1
 297 00c6 0133     		adds	r3, r3, #1
 298 00c8 0733     		adds	r3, r3, #7
 299 00ca DB08     		lsrs	r3, r3, #3
 300 00cc DB00     		lsls	r3, r3, #3
 301 00ce ADEB030D 		sub	sp, sp, r3
 302 00d2 02AB     		add	r3, sp, #8
 303 00d4 0133     		adds	r3, r3, #1
 304 00d6 5B08     		lsrs	r3, r3, #1
 305 00d8 5B00     		lsls	r3, r3, #1
 306 00da C7F8DC32 		str	r3, [r7, #732]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 9


  91:main.c        ****     char arrayString[] =   "1111111111111111101\
 307              		.loc 1 91 0
 308 00de 07F11403 		add	r3, r7, #20
 309 00e2 624A     		ldr	r2, .L76
 310 00e4 1846     		mov	r0, r3
 311 00e6 1146     		mov	r1, r2
 312 00e8 40F2A623 		movw	r3, #678
 313 00ec 1A46     		mov	r2, r3
 314 00ee FFF7FEFF 		bl	memcpy
  92:main.c        ****                             1000001000000010001\
  93:main.c        ****                             1110101010111010101\
  94:main.c        ****                             1010000010100000101\
  95:main.c        ****                             1010101110101110101\
  96:main.c        ****                             1000100000100000101\
  97:main.c        ****                             1011111110001110101\
  98:main.c        ****                             1000100000100010101\
  99:main.c        ****                             1110001111101010101\
 100:main.c        ****                             1000100000101000001\
 101:main.c        ****                             1011111110001111101\
 102:main.c        ****                             1000001000101000101\
 103:main.c        ****                             1111101011101010101\
 104:main.c        ****                             0000000010000010001\
 105:main.c        ****                             1111111111111111111";
 106:main.c        **** 
 107:main.c        ****     uint16_t i = 0;
 315              		.loc 1 107 0
 316 00f2 0023     		movs	r3, #0
 317 00f4 A7F80633 		strh	r3, [r7, #774]	@ movhi
 108:main.c        ****     uint8_t j, k = 0;
 318              		.loc 1 108 0
 319 00f8 0023     		movs	r3, #0
 320 00fa 87F80433 		strb	r3, [r7, #772]
 109:main.c        **** 
 110:main.c        ****     // Convert the string to an array so we can use it.
 111:main.c        ****     while (arrayString[i] != '\0') {
 321              		.loc 1 111 0
 322 00fe 57E0     		b	.L11
 323              	.L17:
 112:main.c        ****         if (arrayString[i] == 48) {
 324              		.loc 1 112 0
 325 0100 B7F80633 		ldrh	r3, [r7, #774]
 326 0104 07F11402 		add	r2, r7, #20
 327 0108 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 328 010a 302B     		cmp	r3, #48
 329 010c 22D1     		bne	.L12
 113:main.c        ****             array[j][k] = 0;
 330              		.loc 1 113 0
 331 010e 7108     		lsrs	r1, r6, #1
 332 0110 97F80503 		ldrb	r0, [r7, #773]	@ zero_extendqisi2
 333 0114 97F80423 		ldrb	r2, [r7, #772]	@ zero_extendqisi2
 334 0118 D7F8DC32 		ldr	r3, [r7, #732]
 335 011c 00FB01F1 		mul	r1, r0, r1
 336 0120 0A44     		add	r2, r2, r1
 337 0122 0021     		movs	r1, #0
 338 0124 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 114:main.c        ****             if (k == xdim - 1) {
 339              		.loc 1 114 0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 10


 340 0128 97F80423 		ldrb	r2, [r7, #772]	@ zero_extendqisi2
 341 012c B7F8EE32 		ldrh	r3, [r7, #750]
 342 0130 013B     		subs	r3, r3, #1
 343 0132 9A42     		cmp	r2, r3
 344 0134 08D1     		bne	.L13
 115:main.c        ****                 k = 0;
 345              		.loc 1 115 0
 346 0136 0023     		movs	r3, #0
 347 0138 87F80433 		strb	r3, [r7, #772]
 116:main.c        ****                 j++;
 348              		.loc 1 116 0
 349 013c 97F80533 		ldrb	r3, [r7, #773]	@ zero_extendqisi2
 350 0140 0133     		adds	r3, r3, #1
 351 0142 87F80533 		strb	r3, [r7, #773]
 352 0146 2EE0     		b	.L15
 353              	.L13:
 117:main.c        ****             } else {
 118:main.c        ****                 k++;
 354              		.loc 1 118 0
 355 0148 97F80433 		ldrb	r3, [r7, #772]	@ zero_extendqisi2
 356 014c 0133     		adds	r3, r3, #1
 357 014e 87F80433 		strb	r3, [r7, #772]
 358 0152 28E0     		b	.L15
 359              	.L12:
 119:main.c        ****             }
 120:main.c        ****         } else if (arrayString[i] == 49) {
 360              		.loc 1 120 0
 361 0154 B7F80633 		ldrh	r3, [r7, #774]
 362 0158 07F11402 		add	r2, r7, #20
 363 015c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 364 015e 312B     		cmp	r3, #49
 365 0160 21D1     		bne	.L15
 121:main.c        ****             array[j][k] = 1;
 366              		.loc 1 121 0
 367 0162 7108     		lsrs	r1, r6, #1
 368 0164 97F80503 		ldrb	r0, [r7, #773]	@ zero_extendqisi2
 369 0168 97F80423 		ldrb	r2, [r7, #772]	@ zero_extendqisi2
 370 016c D7F8DC32 		ldr	r3, [r7, #732]
 371 0170 00FB01F1 		mul	r1, r0, r1
 372 0174 0A44     		add	r2, r2, r1
 373 0176 0121     		movs	r1, #1
 374 0178 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 122:main.c        ****             if (k == xdim - 1) {
 375              		.loc 1 122 0
 376 017c 97F80423 		ldrb	r2, [r7, #772]	@ zero_extendqisi2
 377 0180 B7F8EE32 		ldrh	r3, [r7, #750]
 378 0184 013B     		subs	r3, r3, #1
 379 0186 9A42     		cmp	r2, r3
 380 0188 08D1     		bne	.L16
 123:main.c        ****                 k = 0;
 381              		.loc 1 123 0
 382 018a 0023     		movs	r3, #0
 383 018c 87F80433 		strb	r3, [r7, #772]
 124:main.c        ****                 j++;
 384              		.loc 1 124 0
 385 0190 97F80533 		ldrb	r3, [r7, #773]	@ zero_extendqisi2
 386 0194 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 11


 387 0196 87F80533 		strb	r3, [r7, #773]
 388 019a 04E0     		b	.L15
 389              	.L16:
 125:main.c        ****             } else {
 126:main.c        ****                 k++;
 390              		.loc 1 126 0
 391 019c 97F80433 		ldrb	r3, [r7, #772]	@ zero_extendqisi2
 392 01a0 0133     		adds	r3, r3, #1
 393 01a2 87F80433 		strb	r3, [r7, #772]
 394              	.L15:
 127:main.c        ****             }
 128:main.c        ****         }
 129:main.c        ****         i++;
 395              		.loc 1 129 0
 396 01a6 B7F80633 		ldrh	r3, [r7, #774]
 397 01aa 0133     		adds	r3, r3, #1
 398 01ac A7F80633 		strh	r3, [r7, #774]	@ movhi
 399              	.L11:
 111:main.c        ****         if (arrayString[i] == 48) {
 400              		.loc 1 111 0
 401 01b0 B7F80633 		ldrh	r3, [r7, #774]
 402 01b4 07F11402 		add	r2, r7, #20
 403 01b8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 404 01ba 002B     		cmp	r3, #0
 405 01bc A0D1     		bne	.L17
 130:main.c        ****     }
 131:main.c        **** 
 132:main.c        ****     // Each zero can only be adjacent to 4 zeroes maximum.
 133:main.c        ****     int16_t adjlist[xydim][4];
 406              		.loc 1 133 0
 407 01be B7F8EA22 		ldrh	r2, [r7, #746]
 408 01c2 1346     		mov	r3, r2
 409 01c4 013B     		subs	r3, r3, #1
 410 01c6 C7F8D832 		str	r3, [r7, #728]
 411 01ca 93B2     		uxth	r3, r2
 412 01cc 4FF00004 		mov	r4, #0
 413 01d0 4FEA841B 		lsl	fp, r4, #6
 414 01d4 4BEA936B 		orr	fp, fp, r3, lsr #26
 415 01d8 4FEA831A 		lsl	r10, r3, #6
 416 01dc 93B2     		uxth	r3, r2
 417 01de 4FF00004 		mov	r4, #0
 418 01e2 4FEA8419 		lsl	r9, r4, #6
 419 01e6 49EA9369 		orr	r9, r9, r3, lsr #26
 420 01ea 4FEA8318 		lsl	r8, r3, #6
 421 01ee 1346     		mov	r3, r2
 422 01f0 DB00     		lsls	r3, r3, #3
 423 01f2 0133     		adds	r3, r3, #1
 424 01f4 0733     		adds	r3, r3, #7
 425 01f6 DB08     		lsrs	r3, r3, #3
 426 01f8 DB00     		lsls	r3, r3, #3
 427 01fa ADEB030D 		sub	sp, sp, r3
 428 01fe 02AB     		add	r3, sp, #8
 429 0200 0133     		adds	r3, r3, #1
 430 0202 5B08     		lsrs	r3, r3, #1
 431 0204 5B00     		lsls	r3, r3, #1
 432 0206 C7F8D432 		str	r3, [r7, #724]
 433              	.LBB2:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 12


 134:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 434              		.loc 1 134 0
 435 020a 0023     		movs	r3, #0
 436 020c A7F80233 		strh	r3, [r7, #770]	@ movhi
 437 0210 1DE0     		b	.L18
 438              	.L21:
 439              	.LBB3:
 135:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 440              		.loc 1 135 0
 441 0212 0023     		movs	r3, #0
 442 0214 87F80133 		strb	r3, [r7, #769]
 443 0218 10E0     		b	.L19
 444              	.L20:
 136:main.c        ****             adjlist[i][j] = -1;
 445              		.loc 1 136 0 discriminator 3
 446 021a B7F80213 		ldrh	r1, [r7, #770]
 447 021e 97F80123 		ldrb	r2, [r7, #769]	@ zero_extendqisi2
 448 0222 D7F8D432 		ldr	r3, [r7, #724]
 449 0226 8900     		lsls	r1, r1, #2
 450 0228 0A44     		add	r2, r2, r1
 451 022a 4FF6FF71 		movw	r1, #65535
 452 022e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 135:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 453              		.loc 1 135 0 discriminator 3
 454 0232 97F80133 		ldrb	r3, [r7, #769]	@ zero_extendqisi2
 455 0236 0133     		adds	r3, r3, #1
 456 0238 87F80133 		strb	r3, [r7, #769]
 457              	.L19:
 135:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 458              		.loc 1 135 0 is_stmt 0 discriminator 1
 459 023c 97F80133 		ldrb	r3, [r7, #769]	@ zero_extendqisi2
 460 0240 032B     		cmp	r3, #3
 461 0242 EAD9     		bls	.L20
 462              	.LBE3:
 134:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 463              		.loc 1 134 0 is_stmt 1 discriminator 2
 464 0244 B7F80233 		ldrh	r3, [r7, #770]
 465 0248 0133     		adds	r3, r3, #1
 466 024a A7F80233 		strh	r3, [r7, #770]	@ movhi
 467              	.L18:
 134:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 468              		.loc 1 134 0 is_stmt 0 discriminator 1
 469 024e B7F80223 		ldrh	r2, [r7, #770]
 470 0252 B7F8EA32 		ldrh	r3, [r7, #746]
 471 0256 9A42     		cmp	r2, r3
 472 0258 DBD3     		bcc	.L21
 473              	.LBE2:
 474              	.LBB4:
 137:main.c        ****         }
 138:main.c        ****     }
 139:main.c        ****     uint16_t cnode;
 140:main.c        **** 
 141:main.c        ****     /* Construct the adjacency list.
 142:main.c        ****        Numbered reading from left to right, top down. */
 143:main.c        ****     for (uint16_t i = 0; i < ydim; i++) {
 475              		.loc 1 143 0 is_stmt 1
 476 025a 0023     		movs	r3, #0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 13


 477 025c A7F8FE32 		strh	r3, [r7, #766]	@ movhi
 478 0260 C4E0     		b	.L22
 479              	.L29:
 480              	.LBB5:
 144:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
 481              		.loc 1 144 0
 482 0262 0023     		movs	r3, #0
 483 0264 A7F8FC32 		strh	r3, [r7, #764]	@ movhi
 484 0268 B4E0     		b	.L23
 485              	.L77:
 486 026a 00BF     		.align	2
 487              	.L76:
 488 026c 00000000 		.word	.LC0
 489              	.L28:
 145:main.c        ****             // For loops go through rows, cols.
 146:main.c        ****             if (array[i][j] == 0) {
 490              		.loc 1 146 0
 491 0270 7108     		lsrs	r1, r6, #1
 492 0272 B7F8FE02 		ldrh	r0, [r7, #766]
 493 0276 B7F8FC22 		ldrh	r2, [r7, #764]
 494 027a D7F8DC32 		ldr	r3, [r7, #732]
 495 027e 00FB01F1 		mul	r1, r0, r1
 496 0282 0A44     		add	r2, r2, r1
 497 0284 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 498 0288 002B     		cmp	r3, #0
 499 028a 40F09E80 		bne	.L24
 147:main.c        ****                 cnode = i * xdim + j; 
 500              		.loc 1 147 0
 501 028e B7F8FE32 		ldrh	r3, [r7, #766]	@ movhi
 502 0292 B7F8EE22 		ldrh	r2, [r7, #750]	@ movhi
 503 0296 02FB03F3 		mul	r3, r2, r3
 504 029a 9AB2     		uxth	r2, r3
 505 029c B7F8FC32 		ldrh	r3, [r7, #764]	@ movhi
 506 02a0 1344     		add	r3, r3, r2
 507 02a2 A7F8D232 		strh	r3, [r7, #722]	@ movhi
 148:main.c        ****                 if (array[i - 1][j] == 0) {
 508              		.loc 1 148 0
 509 02a6 7108     		lsrs	r1, r6, #1
 510 02a8 B7F8FE32 		ldrh	r3, [r7, #766]
 511 02ac 581E     		subs	r0, r3, #1
 512 02ae B7F8FC22 		ldrh	r2, [r7, #764]
 513 02b2 D7F8DC32 		ldr	r3, [r7, #732]
 514 02b6 00FB01F1 		mul	r1, r0, r1
 515 02ba 0A44     		add	r2, r2, r1
 516 02bc 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 517 02c0 002B     		cmp	r3, #0
 518 02c2 13D1     		bne	.L25
 149:main.c        ****                     // Row above.
 150:main.c        ****                     adjlist[cnode][0] = (i - 1) * xdim + j;
 519              		.loc 1 150 0
 520 02c4 B7F8D222 		ldrh	r2, [r7, #722]
 521 02c8 B7F8FE32 		ldrh	r3, [r7, #766]
 522 02cc 013B     		subs	r3, r3, #1
 523 02ce 9BB2     		uxth	r3, r3
 524 02d0 B7F8EE12 		ldrh	r1, [r7, #750]	@ movhi
 525 02d4 01FB03F3 		mul	r3, r1, r3
 526 02d8 99B2     		uxth	r1, r3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 14


 527 02da B7F8FC32 		ldrh	r3, [r7, #764]	@ movhi
 528 02de 0B44     		add	r3, r3, r1
 529 02e0 9BB2     		uxth	r3, r3
 530 02e2 19B2     		sxth	r1, r3
 531 02e4 D7F8D432 		ldr	r3, [r7, #724]
 532 02e8 23F83210 		strh	r1, [r3, r2, lsl #3]	@ movhi
 533              	.L25:
 151:main.c        ****                 } if (array[i + 1][j] == 0) {
 534              		.loc 1 151 0
 535 02ec 7108     		lsrs	r1, r6, #1
 536 02ee B7F8FE32 		ldrh	r3, [r7, #766]
 537 02f2 581C     		adds	r0, r3, #1
 538 02f4 B7F8FC22 		ldrh	r2, [r7, #764]
 539 02f8 D7F8DC32 		ldr	r3, [r7, #732]
 540 02fc 00FB01F1 		mul	r1, r0, r1
 541 0300 0A44     		add	r2, r2, r1
 542 0302 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 543 0306 002B     		cmp	r3, #0
 544 0308 15D1     		bne	.L26
 152:main.c        ****                     // Row below.
 153:main.c        ****                     adjlist[cnode][1] = (i + 1) * xdim + j;
 545              		.loc 1 153 0
 546 030a B7F8D232 		ldrh	r3, [r7, #722]
 547 030e B7F8FE22 		ldrh	r2, [r7, #766]
 548 0312 0132     		adds	r2, r2, #1
 549 0314 92B2     		uxth	r2, r2
 550 0316 B7F8EE12 		ldrh	r1, [r7, #750]	@ movhi
 551 031a 01FB02F2 		mul	r2, r1, r2
 552 031e 91B2     		uxth	r1, r2
 553 0320 B7F8FC22 		ldrh	r2, [r7, #764]	@ movhi
 554 0324 0A44     		add	r2, r2, r1
 555 0326 92B2     		uxth	r2, r2
 556 0328 11B2     		sxth	r1, r2
 557 032a D7F8D422 		ldr	r2, [r7, #724]
 558 032e DB00     		lsls	r3, r3, #3
 559 0330 1344     		add	r3, r3, r2
 560 0332 0A46     		mov	r2, r1	@ movhi
 561 0334 5A80     		strh	r2, [r3, #2]	@ movhi
 562              	.L26:
 154:main.c        ****                 } if (array[i][j - 1] == 0) {
 563              		.loc 1 154 0
 564 0336 7108     		lsrs	r1, r6, #1
 565 0338 B7F8FE02 		ldrh	r0, [r7, #766]
 566 033c B7F8FC32 		ldrh	r3, [r7, #764]
 567 0340 5A1E     		subs	r2, r3, #1
 568 0342 D7F8DC32 		ldr	r3, [r7, #732]
 569 0346 00FB01F1 		mul	r1, r0, r1
 570 034a 0A44     		add	r2, r2, r1
 571 034c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 572 0350 002B     		cmp	r3, #0
 573 0352 15D1     		bne	.L27
 155:main.c        ****                     // Column left.
 156:main.c        ****                     adjlist[cnode][2] = i * xdim + j - 1;
 574              		.loc 1 156 0
 575 0354 B7F8D232 		ldrh	r3, [r7, #722]
 576 0358 B7F8FE22 		ldrh	r2, [r7, #766]	@ movhi
 577 035c B7F8EE12 		ldrh	r1, [r7, #750]	@ movhi
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 15


 578 0360 01FB02F2 		mul	r2, r1, r2
 579 0364 91B2     		uxth	r1, r2
 580 0366 B7F8FC22 		ldrh	r2, [r7, #764]	@ movhi
 581 036a 0A44     		add	r2, r2, r1
 582 036c 92B2     		uxth	r2, r2
 583 036e 013A     		subs	r2, r2, #1
 584 0370 92B2     		uxth	r2, r2
 585 0372 11B2     		sxth	r1, r2
 586 0374 D7F8D422 		ldr	r2, [r7, #724]
 587 0378 DB00     		lsls	r3, r3, #3
 588 037a 1344     		add	r3, r3, r2
 589 037c 0A46     		mov	r2, r1	@ movhi
 590 037e 9A80     		strh	r2, [r3, #4]	@ movhi
 591              	.L27:
 157:main.c        ****                 } if (array[i][j + 1] == 0) {
 592              		.loc 1 157 0
 593 0380 7108     		lsrs	r1, r6, #1
 594 0382 B7F8FE02 		ldrh	r0, [r7, #766]
 595 0386 B7F8FC32 		ldrh	r3, [r7, #764]
 596 038a 5A1C     		adds	r2, r3, #1
 597 038c D7F8DC32 		ldr	r3, [r7, #732]
 598 0390 00FB01F1 		mul	r1, r0, r1
 599 0394 0A44     		add	r2, r2, r1
 600 0396 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 601 039a 002B     		cmp	r3, #0
 602 039c 15D1     		bne	.L24
 158:main.c        ****                     // Column right.
 159:main.c        ****                     adjlist[cnode][3] = i * xdim + j + 1;
 603              		.loc 1 159 0
 604 039e B7F8D232 		ldrh	r3, [r7, #722]
 605 03a2 B7F8FE22 		ldrh	r2, [r7, #766]	@ movhi
 606 03a6 B7F8EE12 		ldrh	r1, [r7, #750]	@ movhi
 607 03aa 01FB02F2 		mul	r2, r1, r2
 608 03ae 91B2     		uxth	r1, r2
 609 03b0 B7F8FC22 		ldrh	r2, [r7, #764]	@ movhi
 610 03b4 0A44     		add	r2, r2, r1
 611 03b6 92B2     		uxth	r2, r2
 612 03b8 0132     		adds	r2, r2, #1
 613 03ba 92B2     		uxth	r2, r2
 614 03bc 11B2     		sxth	r1, r2
 615 03be D7F8D422 		ldr	r2, [r7, #724]
 616 03c2 DB00     		lsls	r3, r3, #3
 617 03c4 1344     		add	r3, r3, r2
 618 03c6 0A46     		mov	r2, r1	@ movhi
 619 03c8 DA80     		strh	r2, [r3, #6]	@ movhi
 620              	.L24:
 144:main.c        ****             // For loops go through rows, cols.
 621              		.loc 1 144 0 discriminator 2
 622 03ca B7F8FC32 		ldrh	r3, [r7, #764]
 623 03ce 0133     		adds	r3, r3, #1
 624 03d0 A7F8FC32 		strh	r3, [r7, #764]	@ movhi
 625              	.L23:
 144:main.c        ****             // For loops go through rows, cols.
 626              		.loc 1 144 0 is_stmt 0 discriminator 1
 627 03d4 B7F8FC22 		ldrh	r2, [r7, #764]
 628 03d8 B7F8EE32 		ldrh	r3, [r7, #750]
 629 03dc 9A42     		cmp	r2, r3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 16


 630 03de FFF447AF 		bcc	.L28
 631              	.LBE5:
 143:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
 632              		.loc 1 143 0 is_stmt 1 discriminator 2
 633 03e2 B7F8FE32 		ldrh	r3, [r7, #766]
 634 03e6 0133     		adds	r3, r3, #1
 635 03e8 A7F8FE32 		strh	r3, [r7, #766]	@ movhi
 636              	.L22:
 143:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
 637              		.loc 1 143 0 is_stmt 0 discriminator 1
 638 03ec B7F8FE22 		ldrh	r2, [r7, #766]
 639 03f0 B7F8EC32 		ldrh	r3, [r7, #748]
 640 03f4 9A42     		cmp	r2, r3
 641 03f6 FFF434AF 		bcc	.L29
 642              	.LBE4:
 160:main.c        ****                 }
 161:main.c        ****             }
 162:main.c        ****         }
 163:main.c        ****     }
 164:main.c        **** 
 165:main.c        ****     // Source x and y co-ordinates.
 166:main.c        ****     uint16_t sxcord = 1;
 643              		.loc 1 166 0 is_stmt 1
 644 03fa 0123     		movs	r3, #1
 645 03fc A7F8D032 		strh	r3, [r7, #720]	@ movhi
 167:main.c        ****     uint16_t sycord = 1;
 646              		.loc 1 167 0
 647 0400 0123     		movs	r3, #1
 648 0402 A7F8CE32 		strh	r3, [r7, #718]	@ movhi
 168:main.c        **** 
 169:main.c        ****     // Target x and y co-ordinates.
 170:main.c        ****     uint16_t txcord = 5;
 649              		.loc 1 170 0
 650 0406 0523     		movs	r3, #5
 651 0408 A7F8CC32 		strh	r3, [r7, #716]	@ movhi
 171:main.c        ****     uint16_t tycord = 13;
 652              		.loc 1 171 0
 653 040c 0D23     		movs	r3, #13
 654 040e A7F8CA32 		strh	r3, [r7, #714]	@ movhi
 172:main.c        **** 
 173:main.c        ****     // The offset value - if we are indexing starting at 0, this should be 0, if we are indexing st
 174:main.c        ****     uint8_t offset = 0;
 655              		.loc 1 174 0
 656 0412 0023     		movs	r3, #0
 657 0414 87F8C932 		strb	r3, [r7, #713]
 175:main.c        **** 
 176:main.c        ****     // Calculation for the source and target co-ordinates.
 177:main.c        ****     uint16_t source = ((sycord - offset) * xdim + sxcord - offset);
 658              		.loc 1 177 0
 659 0418 B7F8CE22 		ldrh	r2, [r7, #718]
 660 041c 97F8C932 		ldrb	r3, [r7, #713]	@ zero_extendqisi2
 661 0420 D31A     		subs	r3, r2, r3
 662 0422 9BB2     		uxth	r3, r3
 663 0424 B7F8EE22 		ldrh	r2, [r7, #750]	@ movhi
 664 0428 02FB03F3 		mul	r3, r2, r3
 665 042c 9AB2     		uxth	r2, r3
 666 042e B7F8D032 		ldrh	r3, [r7, #720]	@ movhi
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 17


 667 0432 1344     		add	r3, r3, r2
 668 0434 9AB2     		uxth	r2, r3
 669 0436 97F8C932 		ldrb	r3, [r7, #713]	@ zero_extendqisi2
 670 043a 9BB2     		uxth	r3, r3
 671 043c D31A     		subs	r3, r2, r3
 672 043e A7F8C632 		strh	r3, [r7, #710]	@ movhi
 178:main.c        ****     uint16_t target = ((tycord - offset) * xdim + txcord - offset);
 673              		.loc 1 178 0
 674 0442 B7F8CA22 		ldrh	r2, [r7, #714]
 675 0446 97F8C932 		ldrb	r3, [r7, #713]	@ zero_extendqisi2
 676 044a D31A     		subs	r3, r2, r3
 677 044c 9BB2     		uxth	r3, r3
 678 044e B7F8EE22 		ldrh	r2, [r7, #750]	@ movhi
 679 0452 02FB03F3 		mul	r3, r2, r3
 680 0456 9AB2     		uxth	r2, r3
 681 0458 B7F8CC32 		ldrh	r3, [r7, #716]	@ movhi
 682 045c 1344     		add	r3, r3, r2
 683 045e 9AB2     		uxth	r2, r3
 684 0460 97F8C932 		ldrb	r3, [r7, #713]	@ zero_extendqisi2
 685 0464 9BB2     		uxth	r3, r3
 686 0466 D31A     		subs	r3, r2, r3
 687 0468 A7F8C432 		strh	r3, [r7, #708]	@ movhi
 179:main.c        **** 
 180:main.c        ****     uint16_t *finalPath = ASTAR(source, target, adjlist, xdim, ydim);
 688              		.loc 1 180 0
 689 046c D7F8D422 		ldr	r2, [r7, #724]
 690 0470 B7F8EE42 		ldrh	r4, [r7, #750]
 691 0474 B7F8C412 		ldrh	r1, [r7, #708]
 692 0478 B7F8C602 		ldrh	r0, [r7, #710]
 693 047c B7F8EC32 		ldrh	r3, [r7, #748]
 694 0480 0093     		str	r3, [sp]
 695 0482 2346     		mov	r3, r4
 696 0484 FFF7FEFF 		bl	ASTAR
 697 0488 C7F8C002 		str	r0, [r7, #704]
 181:main.c        ****     int8_t *instructionSet = decode(finalPath, adjlist, xdim, target);
 698              		.loc 1 181 0
 699 048c D7F8D412 		ldr	r1, [r7, #724]
 700 0490 B7F8C432 		ldrh	r3, [r7, #708]
 701 0494 B7F8EE22 		ldrh	r2, [r7, #750]
 702 0498 D7F8C002 		ldr	r0, [r7, #704]
 703 049c FFF7FEFF 		bl	decode
 704 04a0 C7F8BC02 		str	r0, [r7, #700]
 182:main.c        ****     
 183:main.c        ****     // Write the debugging led low.
 184:main.c        ****     led_Write(0);
 705              		.loc 1 184 0
 706 04a4 0020     		movs	r0, #0
 707 04a6 FFF7FEFF 		bl	led_Write
 185:main.c        ****     
 186:main.c        ****     // Enable global interrupts as well as start and enable the isr.
 187:main.c        ****     CyGlobalIntEnable;
 708              		.loc 1 187 0
 709              		.syntax unified
 710              	@ 187 "main.c" 1
 711 04aa 62B6     		CPSIE   i
 712              	@ 0 "" 2
 188:main.c        ****     isr_eoc_1_StartEx(isr_eoc_1);
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 18


 713              		.loc 1 188 0
 714              		.thumb
 715              		.syntax unified
 716 04ac AB48     		ldr	r0, .L78
 717 04ae FFF7FEFF 		bl	isr_eoc_1_StartEx
 189:main.c        ****     isr_timer_1_StartEx(isr_timer_1);
 718              		.loc 1 189 0
 719 04b2 AB48     		ldr	r0, .L78+4
 720 04b4 FFF7FEFF 		bl	isr_timer_1_StartEx
 190:main.c        ****     ADC_SAR_Seq_1_IRQ_Enable();
 721              		.loc 1 190 0
 722 04b8 FFF7FEFF 		bl	ADC_SAR_Seq_1_IRQ_Enable
 191:main.c        ****     
 192:main.c        ****     // Init the decoders and related tools
 193:main.c        ****     decoderInit();
 723              		.loc 1 193 0
 724 04bc FFF7FEFF 		bl	decoderInit
 194:main.c        ****     
 195:main.c        ****     // Start the ADC and begin conversions (in free running mode so will continue to convert).
 196:main.c        ****     ADC_SAR_Seq_1_Start();
 725              		.loc 1 196 0
 726 04c0 FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 197:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 727              		.loc 1 197 0
 728 04c4 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 729              	.LBB6:
 198:main.c        ****     
 199:main.c        ****     // Initialise sensor states.
 200:main.c        ****     for (int i = 0; i < 5; i++) {
 730              		.loc 1 200 0
 731 04c8 0023     		movs	r3, #0
 732 04ca C7F8F832 		str	r3, [r7, #760]
 733 04ce 0AE0     		b	.L30
 734              	.L31:
 201:main.c        ****         sensor_state[i] = ON;
 735              		.loc 1 201 0 discriminator 3
 736 04d0 A44A     		ldr	r2, .L78+8
 737 04d2 D7F8F832 		ldr	r3, [r7, #760]
 738 04d6 1344     		add	r3, r3, r2
 739 04d8 0122     		movs	r2, #1
 740 04da 1A70     		strb	r2, [r3]
 200:main.c        ****         sensor_state[i] = ON;
 741              		.loc 1 200 0 discriminator 3
 742 04dc D7F8F832 		ldr	r3, [r7, #760]
 743 04e0 0133     		adds	r3, r3, #1
 744 04e2 C7F8F832 		str	r3, [r7, #760]
 745              	.L30:
 200:main.c        ****         sensor_state[i] = ON;
 746              		.loc 1 200 0 is_stmt 0 discriminator 1
 747 04e6 D7F8F832 		ldr	r3, [r7, #760]
 748 04ea 042B     		cmp	r3, #4
 749 04ec F0DD     		ble	.L31
 750              	.LBE6:
 202:main.c        ****     }
 203:main.c        ****     
 204:main.c        ****     PWM_1_Start();
 751              		.loc 1 204 0 is_stmt 1
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 19


 752 04ee FFF7FEFF 		bl	PWM_1_Start
 205:main.c        ****     PWM_2_Start();
 753              		.loc 1 205 0
 754 04f2 FFF7FEFF 		bl	PWM_2_Start
 206:main.c        ****     stop();
 755              		.loc 1 206 0
 756 04f6 FFF7FEFF 		bl	stop
 207:main.c        ****     Timer_1_Start();
 757              		.loc 1 207 0
 758 04fa FFF7FEFF 		bl	Timer_1_Start
 208:main.c        ****     //turn_left();
 209:main.c        ****     //stop();
 210:main.c        ****     //turn_right();
 211:main.c        **** 
 212:main.c        ****     int8_t nextInstruction = instructionSet[instructionCursor];
 759              		.loc 1 212 0
 760 04fe 9A4B     		ldr	r3, .L78+12
 761 0500 1B88     		ldrh	r3, [r3]	@ movhi
 762 0502 9BB2     		uxth	r3, r3
 763 0504 1A46     		mov	r2, r3
 764 0506 D7F8BC32 		ldr	r3, [r7, #700]
 765 050a 1344     		add	r3, r3, r2
 766 050c 1B78     		ldrb	r3, [r3]
 767 050e 87F8F732 		strb	r3, [r7, #759]
 768              	.L75:
 213:main.c        ****         
 214:main.c        ****     while(1) {
 215:main.c        ****         
 216:main.c        ****         // If the conversion result is ready, put it into a variable and convert it into millivolts
 217:main.c        ****         ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_WAIT_FOR_RESULT);
 769              		.loc 1 217 0
 770 0512 0020     		movs	r0, #0
 771 0514 FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 218:main.c        ****         ADCResult = ADC_SAR_Seq_1_GetResult16(channel);
 772              		.loc 1 218 0
 773 0518 944B     		ldr	r3, .L78+16
 774 051a 1B78     		ldrb	r3, [r3]
 775 051c DBB2     		uxtb	r3, r3
 776 051e 9BB2     		uxth	r3, r3
 777 0520 1846     		mov	r0, r3
 778 0522 FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 779 0526 0346     		mov	r3, r0
 780 0528 9AB2     		uxth	r2, r3
 781 052a 914B     		ldr	r3, .L78+20
 782 052c 1A80     		strh	r2, [r3]	@ movhi
 219:main.c        ****         milliVoltReading = ADC_SAR_Seq_1_CountsTo_mVolts(ADCResult);
 783              		.loc 1 219 0
 784 052e 904B     		ldr	r3, .L78+20
 785 0530 1B88     		ldrh	r3, [r3]
 786 0532 1BB2     		sxth	r3, r3
 787 0534 1846     		mov	r0, r3
 788 0536 FFF7FEFF 		bl	ADC_SAR_Seq_1_CountsTo_mVolts
 789 053a 0346     		mov	r3, r0
 790 053c 9AB2     		uxth	r2, r3
 791 053e 8D4B     		ldr	r3, .L78+24
 792 0540 1A80     		strh	r2, [r3]	@ movhi
 220:main.c        **** 
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 20


 221:main.c        ****         /* disabled uart code
 222:main.c        ****         char send[100];
 223:main.c        ****         sprintf(send,"%d\r\n",milliVoltReading);
 224:main.c        ****         USBUART_1_PutString(send);
 225:main.c        ****         
 226:main.c        ****         CyDelay(100);
 227:main.c        ****         */
 228:main.c        ****         
 229:main.c        ****         // If we read in a value higher than the current maximum for this period, replace the corre
 230:main.c        ****         if (milliVoltReading > maxValues[channel]) {
 793              		.loc 1 230 0
 794 0542 8A4B     		ldr	r3, .L78+16
 795 0544 1B78     		ldrb	r3, [r3]
 796 0546 DBB2     		uxtb	r3, r3
 797 0548 1A46     		mov	r2, r3
 798 054a 8B4B     		ldr	r3, .L78+28
 799 054c 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 800 0550 884B     		ldr	r3, .L78+24
 801 0552 1B88     		ldrh	r3, [r3]
 802 0554 9A42     		cmp	r2, r3
 803 0556 08D2     		bcs	.L32
 231:main.c        ****             maxValues[channel] = milliVoltReading;
 804              		.loc 1 231 0
 805 0558 844B     		ldr	r3, .L78+16
 806 055a 1B78     		ldrb	r3, [r3]
 807 055c DBB2     		uxtb	r3, r3
 808 055e 1A46     		mov	r2, r3
 809 0560 844B     		ldr	r3, .L78+24
 810 0562 1988     		ldrh	r1, [r3]
 811 0564 844B     		ldr	r3, .L78+28
 812 0566 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 813              	.L32:
 232:main.c        ****         }
 233:main.c        ****         
 234:main.c        ****         if (reset == 1) {
 814              		.loc 1 234 0
 815 056a 844B     		ldr	r3, .L78+32
 816 056c 1B78     		ldrb	r3, [r3]
 817 056e DBB2     		uxtb	r3, r3
 818 0570 012B     		cmp	r3, #1
 819 0572 40F06D81 		bne	.L33
 820              	.LBB7:
 235:main.c        **** 
 236:main.c        ****             // Fill the pastValues array with the new set of values.
 237:main.c        ****             for (int i = 0; i < 5; i++) {
 821              		.loc 1 237 0
 822 0576 0023     		movs	r3, #0
 823 0578 C7F8F032 		str	r3, [r7, #752]
 824 057c 14E0     		b	.L34
 825              	.L35:
 238:main.c        ****                 pastValues[i] = maxValues[i];
 826              		.loc 1 238 0 discriminator 3
 827 057e 7E4A     		ldr	r2, .L78+28
 828 0580 D7F8F032 		ldr	r3, [r7, #752]
 829 0584 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 830 0588 7D4A     		ldr	r2, .L78+36
 831 058a D7F8F032 		ldr	r3, [r7, #752]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 21


 832 058e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 239:main.c        ****                 maxValues[i] = 0;
 833              		.loc 1 239 0 discriminator 3
 834 0592 794A     		ldr	r2, .L78+28
 835 0594 D7F8F032 		ldr	r3, [r7, #752]
 836 0598 0021     		movs	r1, #0
 837 059a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 237:main.c        ****                 pastValues[i] = maxValues[i];
 838              		.loc 1 237 0 discriminator 3
 839 059e D7F8F032 		ldr	r3, [r7, #752]
 840 05a2 0133     		adds	r3, r3, #1
 841 05a4 C7F8F032 		str	r3, [r7, #752]
 842              	.L34:
 237:main.c        ****                 pastValues[i] = maxValues[i];
 843              		.loc 1 237 0 is_stmt 0 discriminator 1
 844 05a8 D7F8F032 		ldr	r3, [r7, #752]
 845 05ac 042B     		cmp	r3, #4
 846 05ae E6DD     		ble	.L35
 847              	.LBE7:
 240:main.c        ****             }
 241:main.c        **** 
 242:main.c        ****             if (nextInstruction == L) {
 848              		.loc 1 242 0 is_stmt 1
 849 05b0 97F9F732 		ldrsb	r3, [r7, #759]
 850 05b4 002B     		cmp	r3, #0
 851 05b6 03D1     		bne	.L36
 243:main.c        ****                 // For left turning.
 244:main.c        ****                 disable_toggle = DISABLE_RIGHT_TURN;
 852              		.loc 1 244 0
 853 05b8 724B     		ldr	r3, .L78+40
 854 05ba 0122     		movs	r2, #1
 855 05bc 1A70     		strb	r2, [r3]
 856 05be 17E0     		b	.L37
 857              	.L36:
 245:main.c        ****             } else if (nextInstruction == R) {
 858              		.loc 1 245 0
 859 05c0 97F9F732 		ldrsb	r3, [r7, #759]
 860 05c4 012B     		cmp	r3, #1
 861 05c6 03D1     		bne	.L38
 246:main.c        ****                 // For right turning.
 247:main.c        ****                 disable_toggle = DISABLE_LEFT_TURN;
 862              		.loc 1 247 0
 863 05c8 6E4B     		ldr	r3, .L78+40
 864 05ca 0022     		movs	r2, #0
 865 05cc 1A70     		strb	r2, [r3]
 866 05ce 0FE0     		b	.L37
 867              	.L38:
 248:main.c        ****             } else if (nextInstruction == J) {
 868              		.loc 1 248 0
 869 05d0 97F9F732 		ldrsb	r3, [r7, #759]
 870 05d4 022B     		cmp	r3, #2
 871 05d6 03D1     		bne	.L39
 249:main.c        ****                 // For junctions.
 250:main.c        ****                 disable_toggle = DISABLE_ALL;
 872              		.loc 1 250 0
 873 05d8 6A4B     		ldr	r3, .L78+40
 874 05da 0222     		movs	r2, #2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 22


 875 05dc 1A70     		strb	r2, [r3]
 876 05de 07E0     		b	.L37
 877              	.L39:
 251:main.c        ****             } else if (nextInstruction == NULLDIR) {
 878              		.loc 1 251 0
 879 05e0 97F9F732 		ldrsb	r3, [r7, #759]
 880 05e4 B3F1FF3F 		cmp	r3, #-1
 881 05e8 02D1     		bne	.L37
 252:main.c        ****                 // For uninitialised or reset.
 253:main.c        ****                 disable_toggle = DISABLE_NONE;
 882              		.loc 1 253 0
 883 05ea 664B     		ldr	r3, .L78+40
 884 05ec 0322     		movs	r2, #3
 885 05ee 1A70     		strb	r2, [r3]
 886              	.L37:
 254:main.c        ****             }
 255:main.c        ****             
 256:main.c        ****             if (state == TURNING_ENABLE) {
 887              		.loc 1 256 0
 888 05f0 654B     		ldr	r3, .L78+44
 889 05f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 890 05f4 052B     		cmp	r3, #5
 891 05f6 1ED1     		bne	.L40
 257:main.c        ****                 // If we have passed the junction, return to the forward state.
 258:main.c        ****                 if (sensor_state[CL] == ON && sensor_state[CR] == ON) {
 892              		.loc 1 258 0
 893 05f8 5A4B     		ldr	r3, .L78+8
 894 05fa 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 895 05fc 012B     		cmp	r3, #1
 896 05fe 17D1     		bne	.L41
 897              		.loc 1 258 0 is_stmt 0 discriminator 1
 898 0600 584B     		ldr	r3, .L78+8
 899 0602 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 900 0604 012B     		cmp	r3, #1
 901 0606 13D1     		bne	.L41
 259:main.c        ****                     // Go to the next movement instruction.
 260:main.c        ****                     instructionCursor++;
 902              		.loc 1 260 0 is_stmt 1
 903 0608 574B     		ldr	r3, .L78+12
 904 060a 1B88     		ldrh	r3, [r3]	@ movhi
 905 060c 9BB2     		uxth	r3, r3
 906 060e 0133     		adds	r3, r3, #1
 907 0610 9AB2     		uxth	r2, r3
 908 0612 554B     		ldr	r3, .L78+12
 909 0614 1A80     		strh	r2, [r3]	@ movhi
 261:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 910              		.loc 1 261 0
 911 0616 544B     		ldr	r3, .L78+12
 912 0618 1B88     		ldrh	r3, [r3]	@ movhi
 913 061a 9BB2     		uxth	r3, r3
 914 061c 1A46     		mov	r2, r3
 915 061e D7F8BC32 		ldr	r3, [r7, #700]
 916 0622 1344     		add	r3, r3, r2
 917 0624 1B78     		ldrb	r3, [r3]
 918 0626 87F8F732 		strb	r3, [r7, #759]
 262:main.c        ****                     state = FORWARD;
 919              		.loc 1 262 0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 23


 920 062a 574B     		ldr	r3, .L78+44
 921 062c 0022     		movs	r2, #0
 922 062e 1A70     		strb	r2, [r3]
 923              	.L41:
 263:main.c        ****                 }
 264:main.c        ****                 move_forward();
 924              		.loc 1 264 0
 925 0630 FFF7FEFF 		bl	move_forward
 926 0634 29E1     		b	.L62
 927              	.L40:
 265:main.c        ****             } else if (state == TURNING_LEFT) {
 928              		.loc 1 265 0
 929 0636 544B     		ldr	r3, .L78+44
 930 0638 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 931 063a 012B     		cmp	r3, #1
 932 063c 09D1     		bne	.L43
 266:main.c        ****                 // Exit left if we have done (most of) the 90 degree turn.
 267:main.c        ****                 if (sensor_state[FL] == OFF) {
 933              		.loc 1 267 0
 934 063e 494B     		ldr	r3, .L78+8
 935 0640 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 0642 002B     		cmp	r3, #0
 937 0644 02D1     		bne	.L44
 268:main.c        ****                     state = EXIT_LEFT;
 938              		.loc 1 268 0
 939 0646 504B     		ldr	r3, .L78+44
 940 0648 0322     		movs	r2, #3
 941 064a 1A70     		strb	r2, [r3]
 942              	.L44:
 269:main.c        ****                 }
 270:main.c        ****                 turn_left_sharp();
 943              		.loc 1 270 0
 944 064c FFF7FEFF 		bl	turn_left_sharp
 945 0650 1BE1     		b	.L62
 946              	.L43:
 271:main.c        ****             } else if (state == EXIT_LEFT) {
 947              		.loc 1 271 0
 948 0652 4D4B     		ldr	r3, .L78+44
 949 0654 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 950 0656 032B     		cmp	r3, #3
 951 0658 24D1     		bne	.L45
 272:main.c        ****                 // Continue turning for a bit so that we don't just drive off the path.
 273:main.c        ****                 if (turn_count < 3) {
 952              		.loc 1 273 0
 953 065a 4C4B     		ldr	r3, .L78+48
 954 065c 1B88     		ldrh	r3, [r3]
 955 065e 022B     		cmp	r3, #2
 956 0660 08D8     		bhi	.L46
 274:main.c        ****                     turn_left();
 957              		.loc 1 274 0
 958 0662 FFF7FEFF 		bl	turn_left
 275:main.c        ****                     turn_count++;
 959              		.loc 1 275 0
 960 0666 494B     		ldr	r3, .L78+48
 961 0668 1B88     		ldrh	r3, [r3]
 962 066a 0133     		adds	r3, r3, #1
 963 066c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 24


 964 066e 474B     		ldr	r3, .L78+48
 965 0670 1A80     		strh	r2, [r3]	@ movhi
 966 0672 0AE1     		b	.L62
 967              	.L46:
 276:main.c        ****                 } else {
 277:main.c        ****                     turn_count = 0;
 968              		.loc 1 277 0
 969 0674 454B     		ldr	r3, .L78+48
 970 0676 0022     		movs	r2, #0
 971 0678 1A80     		strh	r2, [r3]	@ movhi
 278:main.c        ****                     // Go to the next movement instruction.
 279:main.c        ****                     instructionCursor++;
 972              		.loc 1 279 0
 973 067a 3B4B     		ldr	r3, .L78+12
 974 067c 1B88     		ldrh	r3, [r3]	@ movhi
 975 067e 9BB2     		uxth	r3, r3
 976 0680 0133     		adds	r3, r3, #1
 977 0682 9AB2     		uxth	r2, r3
 978 0684 384B     		ldr	r3, .L78+12
 979 0686 1A80     		strh	r2, [r3]	@ movhi
 280:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 980              		.loc 1 280 0
 981 0688 374B     		ldr	r3, .L78+12
 982 068a 1B88     		ldrh	r3, [r3]	@ movhi
 983 068c 9BB2     		uxth	r3, r3
 984 068e 1A46     		mov	r2, r3
 985 0690 D7F8BC32 		ldr	r3, [r7, #700]
 986 0694 1344     		add	r3, r3, r2
 987 0696 1B78     		ldrb	r3, [r3]
 988 0698 87F8F732 		strb	r3, [r7, #759]
 281:main.c        ****                     state = FORWARD;
 989              		.loc 1 281 0
 990 069c 3A4B     		ldr	r3, .L78+44
 991 069e 0022     		movs	r2, #0
 992 06a0 1A70     		strb	r2, [r3]
 993 06a2 F2E0     		b	.L62
 994              	.L45:
 282:main.c        ****                 }
 283:main.c        ****             } else if (state == TURNING_RIGHT) {
 995              		.loc 1 283 0
 996 06a4 384B     		ldr	r3, .L78+44
 997 06a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 998 06a8 022B     		cmp	r3, #2
 999 06aa 09D1     		bne	.L48
 284:main.c        ****                 // Exit right if we have done (most of) the 90 degree turn.
 285:main.c        ****                 if (sensor_state[FR] == OFF) {
 1000              		.loc 1 285 0
 1001 06ac 2D4B     		ldr	r3, .L78+8
 1002 06ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1003 06b0 002B     		cmp	r3, #0
 1004 06b2 02D1     		bne	.L49
 286:main.c        ****                     state = EXIT_RIGHT;
 1005              		.loc 1 286 0
 1006 06b4 344B     		ldr	r3, .L78+44
 1007 06b6 0422     		movs	r2, #4
 1008 06b8 1A70     		strb	r2, [r3]
 1009              	.L49:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 25


 287:main.c        ****                 }
 288:main.c        ****                 turn_right_sharp();
 1010              		.loc 1 288 0
 1011 06ba FFF7FEFF 		bl	turn_right_sharp
 1012 06be E4E0     		b	.L62
 1013              	.L48:
 289:main.c        ****             } else if (state == EXIT_RIGHT) {
 1014              		.loc 1 289 0
 1015 06c0 314B     		ldr	r3, .L78+44
 1016 06c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 06c4 042B     		cmp	r3, #4
 1018 06c6 24D1     		bne	.L50
 290:main.c        ****                 // Continue turning for a bit so that we don't just drive off the path.
 291:main.c        ****                 if (turn_count < 3) {
 1019              		.loc 1 291 0
 1020 06c8 304B     		ldr	r3, .L78+48
 1021 06ca 1B88     		ldrh	r3, [r3]
 1022 06cc 022B     		cmp	r3, #2
 1023 06ce 08D8     		bhi	.L51
 292:main.c        ****                     turn_right();
 1024              		.loc 1 292 0
 1025 06d0 FFF7FEFF 		bl	turn_right
 293:main.c        ****                     turn_count++;
 1026              		.loc 1 293 0
 1027 06d4 2D4B     		ldr	r3, .L78+48
 1028 06d6 1B88     		ldrh	r3, [r3]
 1029 06d8 0133     		adds	r3, r3, #1
 1030 06da 9AB2     		uxth	r2, r3
 1031 06dc 2B4B     		ldr	r3, .L78+48
 1032 06de 1A80     		strh	r2, [r3]	@ movhi
 1033 06e0 D3E0     		b	.L62
 1034              	.L51:
 294:main.c        ****                 } else {
 295:main.c        ****                     turn_count = 0;
 1035              		.loc 1 295 0
 1036 06e2 2A4B     		ldr	r3, .L78+48
 1037 06e4 0022     		movs	r2, #0
 1038 06e6 1A80     		strh	r2, [r3]	@ movhi
 296:main.c        ****                     // Go to the next movement instruction.
 297:main.c        ****                     instructionCursor++;
 1039              		.loc 1 297 0
 1040 06e8 1F4B     		ldr	r3, .L78+12
 1041 06ea 1B88     		ldrh	r3, [r3]	@ movhi
 1042 06ec 9BB2     		uxth	r3, r3
 1043 06ee 0133     		adds	r3, r3, #1
 1044 06f0 9AB2     		uxth	r2, r3
 1045 06f2 1D4B     		ldr	r3, .L78+12
 1046 06f4 1A80     		strh	r2, [r3]	@ movhi
 298:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 1047              		.loc 1 298 0
 1048 06f6 1C4B     		ldr	r3, .L78+12
 1049 06f8 1B88     		ldrh	r3, [r3]	@ movhi
 1050 06fa 9BB2     		uxth	r3, r3
 1051 06fc 1A46     		mov	r2, r3
 1052 06fe D7F8BC32 		ldr	r3, [r7, #700]
 1053 0702 1344     		add	r3, r3, r2
 1054 0704 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 26


 1055 0706 87F8F732 		strb	r3, [r7, #759]
 299:main.c        ****                     state = FORWARD;
 1056              		.loc 1 299 0
 1057 070a 1F4B     		ldr	r3, .L78+44
 1058 070c 0022     		movs	r2, #0
 1059 070e 1A70     		strb	r2, [r3]
 1060 0710 BBE0     		b	.L62
 1061              	.L50:
 300:main.c        ****                 }
 301:main.c        ****             } else if (state == FORWARD) {
 1062              		.loc 1 301 0
 1063 0712 1D4B     		ldr	r3, .L78+44
 1064 0714 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1065 0716 002B     		cmp	r3, #0
 1066 0718 40F09780 		bne	.L53
 302:main.c        ****                 // Default state of forward movement.
 303:main.c        ****                 if (sensor_state[FL] == OFF && sensor_state[FR] == OFF && sensor_state[CL] == OFF &
 1067              		.loc 1 303 0
 1068 071c 114B     		ldr	r3, .L78+8
 1069 071e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1070 0720 002B     		cmp	r3, #0
 1071 0722 13D1     		bne	.L54
 1072              		.loc 1 303 0 is_stmt 0 discriminator 1
 1073 0724 0F4B     		ldr	r3, .L78+8
 1074 0726 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1075 0728 002B     		cmp	r3, #0
 1076 072a 0FD1     		bne	.L54
 1077              		.loc 1 303 0 discriminator 2
 1078 072c 0D4B     		ldr	r3, .L78+8
 1079 072e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1080 0730 002B     		cmp	r3, #0
 1081 0732 0BD1     		bne	.L54
 1082              		.loc 1 303 0 discriminator 3
 1083 0734 0B4B     		ldr	r3, .L78+8
 1084 0736 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1085 0738 002B     		cmp	r3, #0
 1086 073a 07D1     		bne	.L54
 1087              		.loc 1 303 0 discriminator 4
 1088 073c 094B     		ldr	r3, .L78+8
 1089 073e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1090 0740 002B     		cmp	r3, #0
 1091 0742 03D1     		bne	.L54
 304:main.c        ****                     // If a shadow is hovered over the robot (all sensors), it will stop moving.
 305:main.c        ****                     state = STOPPED;
 1092              		.loc 1 305 0 is_stmt 1
 1093 0744 104B     		ldr	r3, .L78+44
 1094 0746 0622     		movs	r2, #6
 1095 0748 1A70     		strb	r2, [r3]
 1096 074a 9EE0     		b	.L62
 1097              	.L54:
 306:main.c        ****                 } else if (sensor_state[FL] == OFF) {
 1098              		.loc 1 306 0
 1099 074c 054B     		ldr	r3, .L78+8
 1100 074e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 0750 002B     		cmp	r3, #0
 1102 0752 1DD1     		bne	.L56
 307:main.c        ****                     // Correct to the left.
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 27


 308:main.c        ****                     turn_left();
 1103              		.loc 1 308 0
 1104 0754 FFF7FEFF 		bl	turn_left
 1105 0758 97E0     		b	.L62
 1106              	.L79:
 1107 075a 00BF     		.align	2
 1108              	.L78:
 1109 075c 00000000 		.word	isr_eoc_1
 1110 0760 00000000 		.word	isr_timer_1
 1111 0764 00000000 		.word	sensor_state
 1112 0768 00000000 		.word	instructionCursor
 1113 076c 00000000 		.word	channel
 1114 0770 00000000 		.word	ADCResult
 1115 0774 00000000 		.word	milliVoltReading
 1116 0778 00000000 		.word	maxValues
 1117 077c 00000000 		.word	reset
 1118 0780 00000000 		.word	pastValues
 1119 0784 00000000 		.word	disable_toggle
 1120 0788 00000000 		.word	state
 1121 078c 00000000 		.word	turn_count
 1122              	.L56:
 309:main.c        ****                 } else if (sensor_state[FR] == OFF) {
 1123              		.loc 1 309 0
 1124 0790 724B     		ldr	r3, .L80
 1125 0792 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1126 0794 002B     		cmp	r3, #0
 1127 0796 02D1     		bne	.L57
 310:main.c        ****                     // Correct to the right.
 311:main.c        ****                     turn_right();
 1128              		.loc 1 311 0
 1129 0798 FFF7FEFF 		bl	turn_right
 1130 079c 75E0     		b	.L62
 1131              	.L57:
 312:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && ((sensor_state[CL] =
 1132              		.loc 1 312 0
 1133 079e 6F4B     		ldr	r3, .L80
 1134 07a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1135 07a2 012B     		cmp	r3, #1
 1136 07a4 1DD1     		bne	.L58
 1137              		.loc 1 312 0 is_stmt 0 discriminator 1
 1138 07a6 6D4B     		ldr	r3, .L80
 1139 07a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1140 07aa 012B     		cmp	r3, #1
 1141 07ac 19D1     		bne	.L58
 1142              		.loc 1 312 0 discriminator 2
 1143 07ae 6B4B     		ldr	r3, .L80
 1144 07b0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1145 07b2 012B     		cmp	r3, #1
 1146 07b4 03D1     		bne	.L59
 1147              		.loc 1 312 0 discriminator 3
 1148 07b6 694B     		ldr	r3, .L80
 1149 07b8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1150 07ba 002B     		cmp	r3, #0
 1151 07bc 07D0     		beq	.L60
 1152              	.L59:
 1153              		.loc 1 312 0 discriminator 6
 1154 07be 674B     		ldr	r3, .L80
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 28


 1155 07c0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1156 07c2 002B     		cmp	r3, #0
 1157 07c4 0DD1     		bne	.L58
 1158              		.loc 1 312 0 discriminator 7
 1159 07c6 654B     		ldr	r3, .L80
 1160 07c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1161 07ca 012B     		cmp	r3, #1
 1162 07cc 09D1     		bne	.L58
 1163              	.L60:
 1164              		.loc 1 312 0 discriminator 8
 1165 07ce 644B     		ldr	r3, .L80+4
 1166 07d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 07d2 022B     		cmp	r3, #2
 1168 07d4 05D1     		bne	.L58
 313:main.c        ****                     // Pass through the junction.
 314:main.c        ****                     state = TURNING_ENABLE;
 1169              		.loc 1 314 0 is_stmt 1
 1170 07d6 634B     		ldr	r3, .L80+8
 1171 07d8 0522     		movs	r2, #5
 1172 07da 1A70     		strb	r2, [r3]
 315:main.c        ****                     move_forward();
 1173              		.loc 1 315 0
 1174 07dc FFF7FEFF 		bl	move_forward
 1175 07e0 53E0     		b	.L62
 1176              	.L58:
 316:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && sensor_state[CL] == 
 1177              		.loc 1 316 0
 1178 07e2 5E4B     		ldr	r3, .L80
 1179 07e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1180 07e6 012B     		cmp	r3, #1
 1181 07e8 15D1     		bne	.L61
 1182              		.loc 1 316 0 is_stmt 0 discriminator 1
 1183 07ea 5C4B     		ldr	r3, .L80
 1184 07ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1185 07ee 012B     		cmp	r3, #1
 1186 07f0 11D1     		bne	.L61
 1187              		.loc 1 316 0 discriminator 2
 1188 07f2 5A4B     		ldr	r3, .L80
 1189 07f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1190 07f6 002B     		cmp	r3, #0
 1191 07f8 0DD1     		bne	.L61
 1192              		.loc 1 316 0 discriminator 3
 1193 07fa 584B     		ldr	r3, .L80
 1194 07fc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1195 07fe 012B     		cmp	r3, #1
 1196 0800 09D1     		bne	.L61
 1197              		.loc 1 316 0 discriminator 4
 1198 0802 574B     		ldr	r3, .L80+4
 1199 0804 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1200 0806 002B     		cmp	r3, #0
 1201 0808 05D0     		beq	.L61
 317:main.c        ****                     // Left turning.
 318:main.c        ****                     state = TURNING_LEFT;
 1202              		.loc 1 318 0 is_stmt 1
 1203 080a 564B     		ldr	r3, .L80+8
 1204 080c 0122     		movs	r2, #1
 1205 080e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 29


 319:main.c        ****                     turn_left();
 1206              		.loc 1 319 0
 1207 0810 FFF7FEFF 		bl	turn_left
 1208 0814 39E0     		b	.L62
 1209              	.L61:
 320:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && sensor_state[CL] == 
 1210              		.loc 1 320 0
 1211 0816 514B     		ldr	r3, .L80
 1212 0818 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1213 081a 012B     		cmp	r3, #1
 1214 081c 35D1     		bne	.L62
 1215              		.loc 1 320 0 is_stmt 0 discriminator 1
 1216 081e 4F4B     		ldr	r3, .L80
 1217 0820 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1218 0822 012B     		cmp	r3, #1
 1219 0824 31D1     		bne	.L62
 1220              		.loc 1 320 0 discriminator 2
 1221 0826 4D4B     		ldr	r3, .L80
 1222 0828 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1223 082a 012B     		cmp	r3, #1
 1224 082c 2DD1     		bne	.L62
 1225              		.loc 1 320 0 discriminator 3
 1226 082e 4B4B     		ldr	r3, .L80
 1227 0830 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1228 0832 002B     		cmp	r3, #0
 1229 0834 29D1     		bne	.L62
 1230              		.loc 1 320 0 discriminator 4
 1231 0836 4A4B     		ldr	r3, .L80+4
 1232 0838 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1233 083a 012B     		cmp	r3, #1
 1234 083c 25D0     		beq	.L62
 321:main.c        ****                     // Right turning.
 322:main.c        ****                     state = TURNING_RIGHT;
 1235              		.loc 1 322 0 is_stmt 1
 1236 083e 494B     		ldr	r3, .L80+8
 1237 0840 0222     		movs	r2, #2
 1238 0842 1A70     		strb	r2, [r3]
 323:main.c        ****                     turn_right();
 1239              		.loc 1 323 0
 1240 0844 FFF7FEFF 		bl	turn_right
 1241 0848 1FE0     		b	.L62
 1242              	.L53:
 324:main.c        ****                 } 
 325:main.c        ****                 } else {
 326:main.c        ****                     // If no other condition has been met, continue to move forward.
 327:main.c        ****                     move_forward();
 1243              		.loc 1 327 0
 1244 084a FFF7FEFF 		bl	move_forward
 1245 084e 1CE0     		b	.L62
 1246              	.L33:
 328:main.c        ****                 }
 329:main.c        ****             } else if (state == STOPPED) {
 1247              		.loc 1 329 0
 1248 0850 444B     		ldr	r3, .L80+8
 1249 0852 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 0854 062B     		cmp	r3, #6
 1251 0856 18D1     		bne	.L62
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 30


 330:main.c        ****                 // Stop moving.
 331:main.c        ****                 stop();
 1252              		.loc 1 331 0
 1253 0858 FFF7FEFF 		bl	stop
 332:main.c        ****                 // If all the light sensors are on, start moving again.
 333:main.c        ****                 if (sensor_state[FL] == ON || sensor_state[FR] == ON || sensor_state[CL] == ON || s
 1254              		.loc 1 333 0
 1255 085c 3F4B     		ldr	r3, .L80
 1256 085e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1257 0860 012B     		cmp	r3, #1
 1258 0862 0FD0     		beq	.L63
 1259              		.loc 1 333 0 is_stmt 0 discriminator 1
 1260 0864 3D4B     		ldr	r3, .L80
 1261 0866 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1262 0868 012B     		cmp	r3, #1
 1263 086a 0BD0     		beq	.L63
 1264              		.loc 1 333 0 discriminator 2
 1265 086c 3B4B     		ldr	r3, .L80
 1266 086e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1267 0870 012B     		cmp	r3, #1
 1268 0872 07D0     		beq	.L63
 1269              		.loc 1 333 0 discriminator 3
 1270 0874 394B     		ldr	r3, .L80
 1271 0876 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1272 0878 012B     		cmp	r3, #1
 1273 087a 03D0     		beq	.L63
 1274              		.loc 1 333 0 discriminator 4
 1275 087c 374B     		ldr	r3, .L80
 1276 087e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1277 0880 012B     		cmp	r3, #1
 1278 0882 02D1     		bne	.L62
 1279              	.L63:
 334:main.c        ****                     state = FORWARD;
 1280              		.loc 1 334 0 is_stmt 1
 1281 0884 374B     		ldr	r3, .L80+8
 1282 0886 0022     		movs	r2, #0
 1283 0888 1A70     		strb	r2, [r3]
 1284              	.L62:
 335:main.c        ****                 }
 336:main.c        ****             }
 337:main.c        ****             reset = 0;
 1285              		.loc 1 337 0
 1286 088a 374B     		ldr	r3, .L80+12
 1287 088c 0022     		movs	r2, #0
 1288 088e 1A70     		strb	r2, [r3]
 338:main.c        ****             
 339:main.c        ****              
 340:main.c        ****         
 341:main.c        ****         // If the milliVolt reading is above the required threshold, perform the requested operatio
 342:main.c        ****         if (pastValues[channel] >= 500) {
 1289              		.loc 1 342 0
 1290 0890 364B     		ldr	r3, .L80+16
 1291 0892 1B78     		ldrb	r3, [r3]
 1292 0894 DBB2     		uxtb	r3, r3
 1293 0896 1A46     		mov	r2, r3
 1294 0898 354B     		ldr	r3, .L80+20
 1295 089a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 31


 1296 089e B3F5FA7F 		cmp	r3, #500
 1297 08a2 2DD3     		bcc	.L64
 343:main.c        ****             // Change the position in the sensor_state array depending on the channel being read.
 344:main.c        ****             if (channel == 0) {
 1298              		.loc 1 344 0
 1299 08a4 314B     		ldr	r3, .L80+16
 1300 08a6 1B78     		ldrb	r3, [r3]
 1301 08a8 DBB2     		uxtb	r3, r3
 1302 08aa 002B     		cmp	r3, #0
 1303 08ac 03D1     		bne	.L65
 345:main.c        ****                 sensor_state[FL] = ON;
 1304              		.loc 1 345 0
 1305 08ae 2B4B     		ldr	r3, .L80
 1306 08b0 0122     		movs	r2, #1
 1307 08b2 1A70     		strb	r2, [r3]
 1308 08b4 2DE6     		b	.L75
 1309              	.L65:
 346:main.c        ****             } else if (channel == 1) {
 1310              		.loc 1 346 0
 1311 08b6 2D4B     		ldr	r3, .L80+16
 1312 08b8 1B78     		ldrb	r3, [r3]
 1313 08ba DBB2     		uxtb	r3, r3
 1314 08bc 012B     		cmp	r3, #1
 1315 08be 03D1     		bne	.L67
 347:main.c        ****                 sensor_state[FR] = ON;
 1316              		.loc 1 347 0
 1317 08c0 264B     		ldr	r3, .L80
 1318 08c2 0122     		movs	r2, #1
 1319 08c4 5A70     		strb	r2, [r3, #1]
 1320 08c6 24E6     		b	.L75
 1321              	.L67:
 348:main.c        ****             } else if (channel == 2) {
 1322              		.loc 1 348 0
 1323 08c8 284B     		ldr	r3, .L80+16
 1324 08ca 1B78     		ldrb	r3, [r3]
 1325 08cc DBB2     		uxtb	r3, r3
 1326 08ce 022B     		cmp	r3, #2
 1327 08d0 03D1     		bne	.L68
 349:main.c        ****                 sensor_state[CL] = ON;
 1328              		.loc 1 349 0
 1329 08d2 224B     		ldr	r3, .L80
 1330 08d4 0122     		movs	r2, #1
 1331 08d6 9A70     		strb	r2, [r3, #2]
 1332 08d8 1BE6     		b	.L75
 1333              	.L68:
 350:main.c        ****             } else if (channel == 3) {
 1334              		.loc 1 350 0
 1335 08da 244B     		ldr	r3, .L80+16
 1336 08dc 1B78     		ldrb	r3, [r3]
 1337 08de DBB2     		uxtb	r3, r3
 1338 08e0 032B     		cmp	r3, #3
 1339 08e2 03D1     		bne	.L69
 351:main.c        ****                 sensor_state[CR] = ON;
 1340              		.loc 1 351 0
 1341 08e4 1D4B     		ldr	r3, .L80
 1342 08e6 0122     		movs	r2, #1
 1343 08e8 DA70     		strb	r2, [r3, #3]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 32


 1344 08ea 12E6     		b	.L75
 1345              	.L69:
 352:main.c        ****             } else if (channel == 4) {
 1346              		.loc 1 352 0
 1347 08ec 1F4B     		ldr	r3, .L80+16
 1348 08ee 1B78     		ldrb	r3, [r3]
 1349 08f0 DBB2     		uxtb	r3, r3
 1350 08f2 042B     		cmp	r3, #4
 1351 08f4 7FF40DAE 		bne	.L75
 353:main.c        ****                 sensor_state[BC] = ON;
 1352              		.loc 1 353 0
 1353 08f8 184B     		ldr	r3, .L80
 1354 08fa 0122     		movs	r2, #1
 1355 08fc 1A71     		strb	r2, [r3, #4]
 1356 08fe 08E6     		b	.L75
 1357              	.L64:
 354:main.c        ****             }
 355:main.c        ****         } else {
 356:main.c        ****             if (channel == 0) {
 1358              		.loc 1 356 0
 1359 0900 1A4B     		ldr	r3, .L80+16
 1360 0902 1B78     		ldrb	r3, [r3]
 1361 0904 DBB2     		uxtb	r3, r3
 1362 0906 002B     		cmp	r3, #0
 1363 0908 03D1     		bne	.L71
 357:main.c        ****                 sensor_state[FL] = OFF;
 1364              		.loc 1 357 0
 1365 090a 144B     		ldr	r3, .L80
 1366 090c 0022     		movs	r2, #0
 1367 090e 1A70     		strb	r2, [r3]
 1368 0910 FFE5     		b	.L75
 1369              	.L71:
 358:main.c        ****             } else if (channel == 1) {
 1370              		.loc 1 358 0
 1371 0912 164B     		ldr	r3, .L80+16
 1372 0914 1B78     		ldrb	r3, [r3]
 1373 0916 DBB2     		uxtb	r3, r3
 1374 0918 012B     		cmp	r3, #1
 1375 091a 03D1     		bne	.L72
 359:main.c        ****                 sensor_state[FR] = OFF;
 1376              		.loc 1 359 0
 1377 091c 0F4B     		ldr	r3, .L80
 1378 091e 0022     		movs	r2, #0
 1379 0920 5A70     		strb	r2, [r3, #1]
 1380 0922 F6E5     		b	.L75
 1381              	.L72:
 360:main.c        ****             } else if (channel == 2) {
 1382              		.loc 1 360 0
 1383 0924 114B     		ldr	r3, .L80+16
 1384 0926 1B78     		ldrb	r3, [r3]
 1385 0928 DBB2     		uxtb	r3, r3
 1386 092a 022B     		cmp	r3, #2
 1387 092c 03D1     		bne	.L73
 361:main.c        ****                 sensor_state[CL] = OFF;
 1388              		.loc 1 361 0
 1389 092e 0B4B     		ldr	r3, .L80
 1390 0930 0022     		movs	r2, #0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 33


 1391 0932 9A70     		strb	r2, [r3, #2]
 1392 0934 EDE5     		b	.L75
 1393              	.L73:
 362:main.c        ****             } else if (channel == 3) {
 1394              		.loc 1 362 0
 1395 0936 0D4B     		ldr	r3, .L80+16
 1396 0938 1B78     		ldrb	r3, [r3]
 1397 093a DBB2     		uxtb	r3, r3
 1398 093c 032B     		cmp	r3, #3
 1399 093e 03D1     		bne	.L74
 363:main.c        ****                 sensor_state[CR] = OFF;
 1400              		.loc 1 363 0
 1401 0940 064B     		ldr	r3, .L80
 1402 0942 0022     		movs	r2, #0
 1403 0944 DA70     		strb	r2, [r3, #3]
 1404 0946 E4E5     		b	.L75
 1405              	.L74:
 364:main.c        ****             } else if (channel == 4) {
 1406              		.loc 1 364 0
 1407 0948 084B     		ldr	r3, .L80+16
 1408 094a 1B78     		ldrb	r3, [r3]
 1409 094c DBB2     		uxtb	r3, r3
 1410 094e 042B     		cmp	r3, #4
 1411 0950 7FF4DFAD 		bne	.L75
 365:main.c        ****                 sensor_state[BC] = OFF;
 1412              		.loc 1 365 0
 1413 0954 014B     		ldr	r3, .L80
 1414 0956 0022     		movs	r2, #0
 1415 0958 1A71     		strb	r2, [r3, #4]
 366:main.c        ****             }
 367:main.c        ****         }
 368:main.c        ****                 
 369:main.c        ****     }
 1416              		.loc 1 369 0
 1417 095a DAE5     		b	.L75
 1418              	.L81:
 1419              		.align	2
 1420              	.L80:
 1421 095c 00000000 		.word	sensor_state
 1422 0960 00000000 		.word	disable_toggle
 1423 0964 00000000 		.word	state
 1424 0968 00000000 		.word	reset
 1425 096c 00000000 		.word	channel
 1426 0970 00000000 		.word	pastValues
 1427              		.cfi_endproc
 1428              	.LFE66:
 1429              		.size	main, .-main
 1430              		.text
 1431              	.Letext0:
 1432              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1433              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1434              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1435              		.file 5 "pathfinding.h"
 1436              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1437              		.file 7 "decoders.h"
 1438              		.section	.debug_info,"",%progbits
 1439              	.Ldebug_info0:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 34


 1440 0000 DA050000 		.4byte	0x5da
 1441 0004 0400     		.2byte	0x4
 1442 0006 00000000 		.4byte	.Ldebug_abbrev0
 1443 000a 04       		.byte	0x4
 1444 000b 01       		.uleb128 0x1
 1445 000c 5B000000 		.4byte	.LASF78
 1446 0010 0C       		.byte	0xc
 1447 0011 28030000 		.4byte	.LASF79
 1448 0015 DB010000 		.4byte	.LASF80
 1449 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1450 001d 00000000 		.4byte	0
 1451 0021 00000000 		.4byte	.Ldebug_line0
 1452 0025 02       		.uleb128 0x2
 1453 0026 C8020000 		.4byte	.LASF0
 1454 002a 02       		.byte	0x2
 1455 002b 1B       		.byte	0x1b
 1456 002c 30000000 		.4byte	0x30
 1457 0030 03       		.uleb128 0x3
 1458 0031 01       		.byte	0x1
 1459 0032 06       		.byte	0x6
 1460 0033 5A020000 		.4byte	.LASF2
 1461 0037 02       		.uleb128 0x2
 1462 0038 AD010000 		.4byte	.LASF1
 1463 003c 02       		.byte	0x2
 1464 003d 1D       		.byte	0x1d
 1465 003e 42000000 		.4byte	0x42
 1466 0042 03       		.uleb128 0x3
 1467 0043 01       		.byte	0x1
 1468 0044 08       		.byte	0x8
 1469 0045 46020000 		.4byte	.LASF3
 1470 0049 02       		.uleb128 0x2
 1471 004a 7D030000 		.4byte	.LASF4
 1472 004e 02       		.byte	0x2
 1473 004f 29       		.byte	0x29
 1474 0050 54000000 		.4byte	0x54
 1475 0054 03       		.uleb128 0x3
 1476 0055 02       		.byte	0x2
 1477 0056 05       		.byte	0x5
 1478 0057 19010000 		.4byte	.LASF5
 1479 005b 02       		.uleb128 0x2
 1480 005c 07010000 		.4byte	.LASF6
 1481 0060 02       		.byte	0x2
 1482 0061 2B       		.byte	0x2b
 1483 0062 66000000 		.4byte	0x66
 1484 0066 03       		.uleb128 0x3
 1485 0067 02       		.byte	0x2
 1486 0068 07       		.byte	0x7
 1487 0069 A3020000 		.4byte	.LASF7
 1488 006d 02       		.uleb128 0x2
 1489 006e 73030000 		.4byte	.LASF8
 1490 0072 02       		.byte	0x2
 1491 0073 3F       		.byte	0x3f
 1492 0074 78000000 		.4byte	0x78
 1493 0078 03       		.uleb128 0x3
 1494 0079 04       		.byte	0x4
 1495 007a 05       		.byte	0x5
 1496 007b 9D010000 		.4byte	.LASF9
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 35


 1497 007f 03       		.uleb128 0x3
 1498 0080 04       		.byte	0x4
 1499 0081 07       		.byte	0x7
 1500 0082 40030000 		.4byte	.LASF10
 1501 0086 03       		.uleb128 0x3
 1502 0087 08       		.byte	0x8
 1503 0088 05       		.byte	0x5
 1504 0089 80010000 		.4byte	.LASF11
 1505 008d 03       		.uleb128 0x3
 1506 008e 08       		.byte	0x8
 1507 008f 07       		.byte	0x7
 1508 0090 6F020000 		.4byte	.LASF12
 1509 0094 04       		.uleb128 0x4
 1510 0095 04       		.byte	0x4
 1511 0096 05       		.byte	0x5
 1512 0097 696E7400 		.ascii	"int\000"
 1513 009b 03       		.uleb128 0x3
 1514 009c 04       		.byte	0x4
 1515 009d 07       		.byte	0x7
 1516 009e 86020000 		.4byte	.LASF13
 1517 00a2 02       		.uleb128 0x2
 1518 00a3 1E000000 		.4byte	.LASF14
 1519 00a7 03       		.byte	0x3
 1520 00a8 14       		.byte	0x14
 1521 00a9 25000000 		.4byte	0x25
 1522 00ad 02       		.uleb128 0x2
 1523 00ae 30010000 		.4byte	.LASF15
 1524 00b2 03       		.byte	0x3
 1525 00b3 18       		.byte	0x18
 1526 00b4 37000000 		.4byte	0x37
 1527 00b8 02       		.uleb128 0x2
 1528 00b9 FE020000 		.4byte	.LASF16
 1529 00bd 03       		.byte	0x3
 1530 00be 20       		.byte	0x20
 1531 00bf 49000000 		.4byte	0x49
 1532 00c3 02       		.uleb128 0x2
 1533 00c4 93020000 		.4byte	.LASF17
 1534 00c8 03       		.byte	0x3
 1535 00c9 24       		.byte	0x24
 1536 00ca 5B000000 		.4byte	0x5b
 1537 00ce 02       		.uleb128 0x2
 1538 00cf EC020000 		.4byte	.LASF18
 1539 00d3 03       		.byte	0x3
 1540 00d4 2C       		.byte	0x2c
 1541 00d5 6D000000 		.4byte	0x6d
 1542 00d9 05       		.uleb128 0x5
 1543 00da 47010000 		.4byte	.LASF19
 1544 00de 04       		.byte	0x4
 1545 00df E701     		.2byte	0x1e7
 1546 00e1 42000000 		.4byte	0x42
 1547 00e5 05       		.uleb128 0x5
 1548 00e6 29010000 		.4byte	.LASF20
 1549 00ea 04       		.byte	0x4
 1550 00eb E801     		.2byte	0x1e8
 1551 00ed 66000000 		.4byte	0x66
 1552 00f1 05       		.uleb128 0x5
 1553 00f2 21030000 		.4byte	.LASF21
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 36


 1554 00f6 04       		.byte	0x4
 1555 00f7 E901     		.2byte	0x1e9
 1556 00f9 7F000000 		.4byte	0x7f
 1557 00fd 03       		.uleb128 0x3
 1558 00fe 04       		.byte	0x4
 1559 00ff 04       		.byte	0x4
 1560 0100 63010000 		.4byte	.LASF22
 1561 0104 03       		.uleb128 0x3
 1562 0105 08       		.byte	0x8
 1563 0106 04       		.byte	0x4
 1564 0107 9C030000 		.4byte	.LASF23
 1565 010b 03       		.uleb128 0x3
 1566 010c 01       		.byte	0x1
 1567 010d 08       		.byte	0x8
 1568 010e D9020000 		.4byte	.LASF24
 1569 0112 06       		.uleb128 0x6
 1570 0113 D9000000 		.4byte	0xd9
 1571 0117 06       		.uleb128 0x6
 1572 0118 E5000000 		.4byte	0xe5
 1573 011c 03       		.uleb128 0x3
 1574 011d 08       		.byte	0x8
 1575 011e 04       		.byte	0x4
 1576 011f F6000000 		.4byte	.LASF25
 1577 0123 03       		.uleb128 0x3
 1578 0124 04       		.byte	0x4
 1579 0125 07       		.byte	0x7
 1580 0126 52000000 		.4byte	.LASF26
 1581 012a 07       		.uleb128 0x7
 1582 012b 32000000 		.4byte	.LASF29
 1583 012f 04       		.byte	0x4
 1584 0130 05       		.byte	0x5
 1585 0131 1E       		.byte	0x1e
 1586 0132 4F010000 		.4byte	0x14f
 1587 0136 08       		.uleb128 0x8
 1588 0137 23010000 		.4byte	.LASF27
 1589 013b 05       		.byte	0x5
 1590 013c 1F       		.byte	0x1f
 1591 013d B8000000 		.4byte	0xb8
 1592 0141 00       		.byte	0
 1593 0142 08       		.uleb128 0x8
 1594 0143 15000000 		.4byte	.LASF28
 1595 0147 05       		.byte	0x5
 1596 0148 20       		.byte	0x20
 1597 0149 C3000000 		.4byte	0xc3
 1598 014d 02       		.byte	0x2
 1599 014e 00       		.byte	0
 1600 014f 09       		.uleb128 0x9
 1601 0150 1B030000 		.4byte	.LASF30
 1602 0154 8004     		.2byte	0x480
 1603 0156 05       		.byte	0x5
 1604 0157 23       		.byte	0x23
 1605 0158 99010000 		.4byte	0x199
 1606 015c 08       		.uleb128 0x8
 1607 015d 40020000 		.4byte	.LASF31
 1608 0161 05       		.byte	0x5
 1609 0162 24       		.byte	0x24
 1610 0163 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 37


 1611 0167 00       		.byte	0
 1612 0168 0A       		.uleb128 0xa
 1613 0169 656E6400 		.ascii	"end\000"
 1614 016d 05       		.byte	0x5
 1615 016e 24       		.byte	0x24
 1616 016f B8000000 		.4byte	0xb8
 1617 0173 02       		.byte	0x2
 1618 0174 08       		.uleb128 0x8
 1619 0175 62030000 		.4byte	.LASF32
 1620 0179 05       		.byte	0x5
 1621 017a 24       		.byte	0x24
 1622 017b B8000000 		.4byte	0xb8
 1623 017f 04       		.byte	0x4
 1624 0180 08       		.uleb128 0x8
 1625 0181 66020000 		.4byte	.LASF33
 1626 0185 05       		.byte	0x5
 1627 0186 25       		.byte	0x25
 1628 0187 9B000000 		.4byte	0x9b
 1629 018b 08       		.byte	0x8
 1630 018c 08       		.uleb128 0x8
 1631 018d 5C030000 		.4byte	.LASF34
 1632 0191 05       		.byte	0x5
 1633 0192 26       		.byte	0x26
 1634 0193 99010000 		.4byte	0x199
 1635 0197 0C       		.byte	0xc
 1636 0198 00       		.byte	0
 1637 0199 0B       		.uleb128 0xb
 1638 019a 2A010000 		.4byte	0x12a
 1639 019e AA010000 		.4byte	0x1aa
 1640 01a2 0C       		.uleb128 0xc
 1641 01a3 23010000 		.4byte	0x123
 1642 01a7 1C01     		.2byte	0x11c
 1643 01a9 00       		.byte	0
 1644 01aa 07       		.uleb128 0x7
 1645 01ab 14030000 		.4byte	.LASF35
 1646 01af 06       		.byte	0x6
 1647 01b0 05       		.byte	0x5
 1648 01b1 29       		.byte	0x29
 1649 01b2 DB010000 		.4byte	0x1db
 1650 01b6 08       		.uleb128 0x8
 1651 01b7 87030000 		.4byte	.LASF36
 1652 01bb 05       		.byte	0x5
 1653 01bc 2A       		.byte	0x2a
 1654 01bd B8000000 		.4byte	0xb8
 1655 01c1 00       		.byte	0
 1656 01c2 08       		.uleb128 0x8
 1657 01c3 DE020000 		.4byte	.LASF37
 1658 01c7 05       		.byte	0x5
 1659 01c8 2B       		.byte	0x2b
 1660 01c9 C3000000 		.4byte	0xc3
 1661 01cd 02       		.byte	0x2
 1662 01ce 08       		.uleb128 0x8
 1663 01cf 54010000 		.4byte	.LASF38
 1664 01d3 05       		.byte	0x5
 1665 01d4 2C       		.byte	0x2c
 1666 01d5 DB010000 		.4byte	0x1db
 1667 01d9 04       		.byte	0x4
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 38


 1668 01da 00       		.byte	0
 1669 01db 03       		.uleb128 0x3
 1670 01dc 01       		.byte	0x1
 1671 01dd 02       		.byte	0x2
 1672 01de 06030000 		.4byte	.LASF39
 1673 01e2 0D       		.uleb128 0xd
 1674 01e3 92030000 		.4byte	.LASF40
 1675 01e7 01       		.byte	0x1
 1676 01e8 43       		.byte	0x43
 1677 01e9 00000000 		.4byte	.LFB64
 1678 01ed 30000000 		.4byte	.LFE64-.LFB64
 1679 01f1 01       		.uleb128 0x1
 1680 01f2 9C       		.byte	0x9c
 1681 01f3 0D       		.uleb128 0xd
 1682 01f4 B7010000 		.4byte	.LASF41
 1683 01f8 01       		.byte	0x1
 1684 01f9 4C       		.byte	0x4c
 1685 01fa 00000000 		.4byte	.LFB65
 1686 01fe 18000000 		.4byte	.LFE65-.LFB65
 1687 0202 01       		.uleb128 0x1
 1688 0203 9C       		.byte	0x9c
 1689 0204 0E       		.uleb128 0xe
 1690 0205 E7020000 		.4byte	.LASF81
 1691 0209 01       		.byte	0x1
 1692 020a 50       		.byte	0x50
 1693 020b 94000000 		.4byte	0x94
 1694 020f 00000000 		.4byte	.LFB66
 1695 0213 74090000 		.4byte	.LFE66-.LFB66
 1696 0217 01       		.uleb128 0x1
 1697 0218 9C       		.byte	0x9c
 1698 0219 D2030000 		.4byte	0x3d2
 1699 021d 0F       		.uleb128 0xf
 1700 021e 02010000 		.4byte	.LASF42
 1701 0222 01       		.byte	0x1
 1702 0223 56       		.byte	0x56
 1703 0224 C3000000 		.4byte	0xc3
 1704 0228 03       		.uleb128 0x3
 1705 0229 91       		.byte	0x91
 1706 022a BE7F     		.sleb128 -66
 1707 022c 0F       		.uleb128 0xf
 1708 022d D6010000 		.4byte	.LASF43
 1709 0231 01       		.byte	0x1
 1710 0232 56       		.byte	0x56
 1711 0233 C3000000 		.4byte	0xc3
 1712 0237 03       		.uleb128 0x3
 1713 0238 91       		.byte	0x91
 1714 0239 BC7F     		.sleb128 -68
 1715 023b 0F       		.uleb128 0xf
 1716 023c 8C030000 		.4byte	.LASF44
 1717 0240 01       		.byte	0x1
 1718 0241 57       		.byte	0x57
 1719 0242 C3000000 		.4byte	0xc3
 1720 0246 03       		.uleb128 0x3
 1721 0247 91       		.byte	0x91
 1722 0248 BA7F     		.sleb128 -70
 1723 024a 0F       		.uleb128 0xf
 1724 024b 5C030000 		.4byte	.LASF34
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 39


 1725 024f 01       		.byte	0x1
 1726 0250 5A       		.byte	0x5a
 1727 0251 D2030000 		.4byte	0x3d2
 1728 0255 04       		.uleb128 0x4
 1729 0256 91       		.byte	0x91
 1730 0257 AC7F     		.sleb128 -84
 1731 0259 06       		.byte	0x6
 1732 025a 0F       		.uleb128 0xf
 1733 025b CA010000 		.4byte	.LASF45
 1734 025f 01       		.byte	0x1
 1735 0260 5B       		.byte	0x5b
 1736 0261 F0030000 		.4byte	0x3f0
 1737 0265 03       		.uleb128 0x3
 1738 0266 91       		.byte	0x91
 1739 0267 E479     		.sleb128 -796
 1740 0269 10       		.uleb128 0x10
 1741 026a 6900     		.ascii	"i\000"
 1742 026c 01       		.byte	0x1
 1743 026d 6B       		.byte	0x6b
 1744 026e C3000000 		.4byte	0xc3
 1745 0272 02       		.uleb128 0x2
 1746 0273 91       		.byte	0x91
 1747 0274 56       		.sleb128 -42
 1748 0275 10       		.uleb128 0x10
 1749 0276 6A00     		.ascii	"j\000"
 1750 0278 01       		.byte	0x1
 1751 0279 6C       		.byte	0x6c
 1752 027a AD000000 		.4byte	0xad
 1753 027e 02       		.uleb128 0x2
 1754 027f 91       		.byte	0x91
 1755 0280 55       		.sleb128 -43
 1756 0281 10       		.uleb128 0x10
 1757 0282 6B00     		.ascii	"k\000"
 1758 0284 01       		.byte	0x1
 1759 0285 6C       		.byte	0x6c
 1760 0286 AD000000 		.4byte	0xad
 1761 028a 02       		.uleb128 0x2
 1762 028b 91       		.byte	0x91
 1763 028c 54       		.sleb128 -44
 1764 028d 0F       		.uleb128 0xf
 1765 028e D1020000 		.4byte	.LASF46
 1766 0292 01       		.byte	0x1
 1767 0293 85       		.byte	0x85
 1768 0294 01040000 		.4byte	0x401
 1769 0298 04       		.uleb128 0x4
 1770 0299 91       		.byte	0x91
 1771 029a A47F     		.sleb128 -92
 1772 029c 06       		.byte	0x6
 1773 029d 0F       		.uleb128 0xf
 1774 029e 54020000 		.4byte	.LASF47
 1775 02a2 01       		.byte	0x1
 1776 02a3 8B       		.byte	0x8b
 1777 02a4 C3000000 		.4byte	0xc3
 1778 02a8 03       		.uleb128 0x3
 1779 02a9 91       		.byte	0x91
 1780 02aa A27F     		.sleb128 -94
 1781 02ac 0F       		.uleb128 0xf
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 40


 1782 02ad 4D010000 		.4byte	.LASF48
 1783 02b1 01       		.byte	0x1
 1784 02b2 A6       		.byte	0xa6
 1785 02b3 C3000000 		.4byte	0xc3
 1786 02b7 03       		.uleb128 0x3
 1787 02b8 91       		.byte	0x91
 1788 02b9 A07F     		.sleb128 -96
 1789 02bb 0F       		.uleb128 0xf
 1790 02bc 9C020000 		.4byte	.LASF49
 1791 02c0 01       		.byte	0x1
 1792 02c1 A7       		.byte	0xa7
 1793 02c2 C3000000 		.4byte	0xc3
 1794 02c6 03       		.uleb128 0x3
 1795 02c7 91       		.byte	0x91
 1796 02c8 9E7F     		.sleb128 -98
 1797 02ca 0F       		.uleb128 0xf
 1798 02cb 12010000 		.4byte	.LASF50
 1799 02cf 01       		.byte	0x1
 1800 02d0 AA       		.byte	0xaa
 1801 02d1 C3000000 		.4byte	0xc3
 1802 02d5 03       		.uleb128 0x3
 1803 02d6 91       		.byte	0x91
 1804 02d7 9C7F     		.sleb128 -100
 1805 02d9 0F       		.uleb128 0xf
 1806 02da 4B000000 		.4byte	.LASF51
 1807 02de 01       		.byte	0x1
 1808 02df AB       		.byte	0xab
 1809 02e0 C3000000 		.4byte	0xc3
 1810 02e4 03       		.uleb128 0x3
 1811 02e5 91       		.byte	0x91
 1812 02e6 9A7F     		.sleb128 -102
 1813 02e8 0F       		.uleb128 0xf
 1814 02e9 A6010000 		.4byte	.LASF52
 1815 02ed 01       		.byte	0x1
 1816 02ee AE       		.byte	0xae
 1817 02ef AD000000 		.4byte	0xad
 1818 02f3 03       		.uleb128 0x3
 1819 02f4 91       		.byte	0x91
 1820 02f5 997F     		.sleb128 -103
 1821 02f7 0F       		.uleb128 0xf
 1822 02f8 C3010000 		.4byte	.LASF53
 1823 02fc 01       		.byte	0x1
 1824 02fd B1       		.byte	0xb1
 1825 02fe C3000000 		.4byte	0xc3
 1826 0302 03       		.uleb128 0x3
 1827 0303 91       		.byte	0x91
 1828 0304 967F     		.sleb128 -106
 1829 0306 0F       		.uleb128 0xf
 1830 0307 2B000000 		.4byte	.LASF54
 1831 030b 01       		.byte	0x1
 1832 030c B2       		.byte	0xb2
 1833 030d C3000000 		.4byte	0xc3
 1834 0311 03       		.uleb128 0x3
 1835 0312 91       		.byte	0x91
 1836 0313 947F     		.sleb128 -108
 1837 0315 0F       		.uleb128 0xf
 1838 0316 0B000000 		.4byte	.LASF55
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 41


 1839 031a 01       		.byte	0x1
 1840 031b B4       		.byte	0xb4
 1841 031c 1B040000 		.4byte	0x41b
 1842 0320 03       		.uleb128 0x3
 1843 0321 91       		.byte	0x91
 1844 0322 907F     		.sleb128 -112
 1845 0324 0F       		.uleb128 0xf
 1846 0325 8E010000 		.4byte	.LASF56
 1847 0329 01       		.byte	0x1
 1848 032a B5       		.byte	0xb5
 1849 032b 21040000 		.4byte	0x421
 1850 032f 03       		.uleb128 0x3
 1851 0330 91       		.byte	0x91
 1852 0331 8C7F     		.sleb128 -116
 1853 0333 0F       		.uleb128 0xf
 1854 0334 70010000 		.4byte	.LASF57
 1855 0338 01       		.byte	0x1
 1856 0339 D4       		.byte	0xd4
 1857 033a A2000000 		.4byte	0xa2
 1858 033e 02       		.uleb128 0x2
 1859 033f 91       		.byte	0x91
 1860 0340 47       		.sleb128 -57
 1861 0341 11       		.uleb128 0x11
 1862 0342 0A020000 		.4byte	.LBB2
 1863 0346 50000000 		.4byte	.LBE2-.LBB2
 1864 034a 71030000 		.4byte	0x371
 1865 034e 10       		.uleb128 0x10
 1866 034f 6900     		.ascii	"i\000"
 1867 0351 01       		.byte	0x1
 1868 0352 86       		.byte	0x86
 1869 0353 C3000000 		.4byte	0xc3
 1870 0357 02       		.uleb128 0x2
 1871 0358 91       		.byte	0x91
 1872 0359 52       		.sleb128 -46
 1873 035a 12       		.uleb128 0x12
 1874 035b 12020000 		.4byte	.LBB3
 1875 035f 32000000 		.4byte	.LBE3-.LBB3
 1876 0363 10       		.uleb128 0x10
 1877 0364 6A00     		.ascii	"j\000"
 1878 0366 01       		.byte	0x1
 1879 0367 87       		.byte	0x87
 1880 0368 AD000000 		.4byte	0xad
 1881 036c 02       		.uleb128 0x2
 1882 036d 91       		.byte	0x91
 1883 036e 51       		.sleb128 -47
 1884 036f 00       		.byte	0
 1885 0370 00       		.byte	0
 1886 0371 11       		.uleb128 0x11
 1887 0372 5A020000 		.4byte	.LBB4
 1888 0376 A0010000 		.4byte	.LBE4-.LBB4
 1889 037a A1030000 		.4byte	0x3a1
 1890 037e 10       		.uleb128 0x10
 1891 037f 6900     		.ascii	"i\000"
 1892 0381 01       		.byte	0x1
 1893 0382 8F       		.byte	0x8f
 1894 0383 C3000000 		.4byte	0xc3
 1895 0387 02       		.uleb128 0x2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 42


 1896 0388 91       		.byte	0x91
 1897 0389 4E       		.sleb128 -50
 1898 038a 12       		.uleb128 0x12
 1899 038b 62020000 		.4byte	.LBB5
 1900 038f 80010000 		.4byte	.LBE5-.LBB5
 1901 0393 10       		.uleb128 0x10
 1902 0394 6A00     		.ascii	"j\000"
 1903 0396 01       		.byte	0x1
 1904 0397 90       		.byte	0x90
 1905 0398 C3000000 		.4byte	0xc3
 1906 039c 02       		.uleb128 0x2
 1907 039d 91       		.byte	0x91
 1908 039e 4C       		.sleb128 -52
 1909 039f 00       		.byte	0
 1910 03a0 00       		.byte	0
 1911 03a1 11       		.uleb128 0x11
 1912 03a2 C8040000 		.4byte	.LBB6
 1913 03a6 26000000 		.4byte	.LBE6-.LBB6
 1914 03aa BB030000 		.4byte	0x3bb
 1915 03ae 10       		.uleb128 0x10
 1916 03af 6900     		.ascii	"i\000"
 1917 03b1 01       		.byte	0x1
 1918 03b2 C8       		.byte	0xc8
 1919 03b3 94000000 		.4byte	0x94
 1920 03b7 02       		.uleb128 0x2
 1921 03b8 91       		.byte	0x91
 1922 03b9 48       		.sleb128 -56
 1923 03ba 00       		.byte	0
 1924 03bb 12       		.uleb128 0x12
 1925 03bc 76050000 		.4byte	.LBB7
 1926 03c0 3A000000 		.4byte	.LBE7-.LBB7
 1927 03c4 10       		.uleb128 0x10
 1928 03c5 6900     		.ascii	"i\000"
 1929 03c7 01       		.byte	0x1
 1930 03c8 ED       		.byte	0xed
 1931 03c9 94000000 		.4byte	0x94
 1932 03cd 02       		.uleb128 0x2
 1933 03ce 91       		.byte	0x91
 1934 03cf 40       		.sleb128 -64
 1935 03d0 00       		.byte	0
 1936 03d1 00       		.byte	0
 1937 03d2 0B       		.uleb128 0xb
 1938 03d3 C3000000 		.4byte	0xc3
 1939 03d7 F0030000 		.4byte	0x3f0
 1940 03db 13       		.uleb128 0x13
 1941 03dc 23010000 		.4byte	0x123
 1942 03e0 04       		.uleb128 0x4
 1943 03e1 91       		.byte	0x91
 1944 03e2 B07F     		.sleb128 -80
 1945 03e4 06       		.byte	0x6
 1946 03e5 13       		.uleb128 0x13
 1947 03e6 23010000 		.4byte	0x123
 1948 03ea 04       		.uleb128 0x4
 1949 03eb 91       		.byte	0x91
 1950 03ec B47F     		.sleb128 -76
 1951 03ee 06       		.byte	0x6
 1952 03ef 00       		.byte	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 43


 1953 03f0 0B       		.uleb128 0xb
 1954 03f1 0B010000 		.4byte	0x10b
 1955 03f5 01040000 		.4byte	0x401
 1956 03f9 0C       		.uleb128 0xc
 1957 03fa 23010000 		.4byte	0x123
 1958 03fe A502     		.2byte	0x2a5
 1959 0400 00       		.byte	0
 1960 0401 0B       		.uleb128 0xb
 1961 0402 B8000000 		.4byte	0xb8
 1962 0406 1B040000 		.4byte	0x41b
 1963 040a 13       		.uleb128 0x13
 1964 040b 23010000 		.4byte	0x123
 1965 040f 04       		.uleb128 0x4
 1966 0410 91       		.byte	0x91
 1967 0411 A87F     		.sleb128 -88
 1968 0413 06       		.byte	0x6
 1969 0414 14       		.uleb128 0x14
 1970 0415 23010000 		.4byte	0x123
 1971 0419 03       		.byte	0x3
 1972 041a 00       		.byte	0
 1973 041b 15       		.uleb128 0x15
 1974 041c 04       		.byte	0x4
 1975 041d C3000000 		.4byte	0xc3
 1976 0421 15       		.uleb128 0x15
 1977 0422 04       		.byte	0x4
 1978 0423 A2000000 		.4byte	0xa2
 1979 0427 16       		.uleb128 0x16
 1980 0428 B8030000 		.4byte	.LASF58
 1981 042c 06       		.byte	0x6
 1982 042d 1207     		.2byte	0x712
 1983 042f 33040000 		.4byte	0x433
 1984 0433 06       		.uleb128 0x6
 1985 0434 CE000000 		.4byte	0xce
 1986 0438 17       		.uleb128 0x17
 1987 0439 A3030000 		.4byte	.LASF59
 1988 043d 07       		.byte	0x7
 1989 043e 0B       		.byte	0xb
 1990 043f 12010000 		.4byte	0x112
 1991 0443 05       		.uleb128 0x5
 1992 0444 03       		.byte	0x3
 1993 0445 00000000 		.4byte	compareValueL
 1994 0449 17       		.uleb128 0x17
 1995 044a C5030000 		.4byte	.LASF60
 1996 044e 07       		.byte	0x7
 1997 044f 0C       		.byte	0xc
 1998 0450 12010000 		.4byte	0x112
 1999 0454 05       		.uleb128 0x5
 2000 0455 03       		.byte	0x3
 2001 0456 00000000 		.4byte	compareValueR
 2002 045a 17       		.uleb128 0x17
 2003 045b F4020000 		.4byte	.LASF61
 2004 045f 07       		.byte	0x7
 2005 0460 0E       		.byte	0xe
 2006 0461 D9000000 		.4byte	0xd9
 2007 0465 05       		.uleb128 0x5
 2008 0466 03       		.byte	0x3
 2009 0467 00000000 		.4byte	goalSpeed
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 44


 2010 046b 17       		.uleb128 0x17
 2011 046c B1030000 		.4byte	.LASF62
 2012 0470 07       		.byte	0x7
 2013 0471 10       		.byte	0x10
 2014 0472 17010000 		.4byte	0x117
 2015 0476 05       		.uleb128 0x5
 2016 0477 03       		.byte	0x3
 2017 0478 00000000 		.4byte	countL
 2018 047c 17       		.uleb128 0x17
 2019 047d D3030000 		.4byte	.LASF63
 2020 0481 07       		.byte	0x7
 2021 0482 11       		.byte	0x11
 2022 0483 17010000 		.4byte	0x117
 2023 0487 05       		.uleb128 0x5
 2024 0488 03       		.byte	0x3
 2025 0489 00000000 		.4byte	countR
 2026 048d 17       		.uleb128 0x17
 2027 048e 5C010000 		.4byte	.LASF64
 2028 0492 07       		.byte	0x7
 2029 0493 12       		.byte	0x12
 2030 0494 17010000 		.4byte	0x117
 2031 0498 05       		.uleb128 0x5
 2032 0499 03       		.byte	0x3
 2033 049a 00000000 		.4byte	speedL
 2034 049e 17       		.uleb128 0x17
 2035 049f 69010000 		.4byte	.LASF65
 2036 04a3 07       		.byte	0x7
 2037 04a4 13       		.byte	0x13
 2038 04a5 17010000 		.4byte	0x117
 2039 04a9 05       		.uleb128 0x5
 2040 04aa 03       		.byte	0x3
 2041 04ab 00000000 		.4byte	speedR
 2042 04af 17       		.uleb128 0x17
 2043 04b0 32000000 		.4byte	.LASF29
 2044 04b4 05       		.byte	0x5
 2045 04b5 21       		.byte	0x21
 2046 04b6 2A010000 		.4byte	0x12a
 2047 04ba 05       		.uleb128 0x5
 2048 04bb 03       		.byte	0x3
 2049 04bc 00000000 		.4byte	PriorityVertex
 2050 04c0 17       		.uleb128 0x17
 2051 04c1 1B030000 		.4byte	.LASF30
 2052 04c5 05       		.byte	0x5
 2053 04c6 27       		.byte	0x27
 2054 04c7 4F010000 		.4byte	0x14f
 2055 04cb 05       		.uleb128 0x5
 2056 04cc 03       		.byte	0x3
 2057 04cd 00000000 		.4byte	Queue
 2058 04d1 17       		.uleb128 0x17
 2059 04d2 14030000 		.4byte	.LASF35
 2060 04d6 05       		.byte	0x5
 2061 04d7 2D       		.byte	0x2d
 2062 04d8 AA010000 		.4byte	0x1aa
 2063 04dc 05       		.uleb128 0x5
 2064 04dd 03       		.byte	0x3
 2065 04de 00000000 		.4byte	Vertex
 2066 04e2 17       		.uleb128 0x17
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 45


 2067 04e3 0C030000 		.4byte	.LASF66
 2068 04e7 01       		.byte	0x1
 2069 04e8 30       		.byte	0x30
 2070 04e9 12010000 		.4byte	0x112
 2071 04ed 05       		.uleb128 0x5
 2072 04ee 03       		.byte	0x3
 2073 04ef 00000000 		.4byte	channel
 2074 04f3 17       		.uleb128 0x17
 2075 04f4 B6020000 		.4byte	.LASF67
 2076 04f8 01       		.byte	0x1
 2077 04f9 31       		.byte	0x31
 2078 04fa 17010000 		.4byte	0x117
 2079 04fe 05       		.uleb128 0x5
 2080 04ff 03       		.byte	0x3
 2081 0500 00000000 		.4byte	instructionCursor
 2082 0504 18       		.uleb128 0x18
 2083 0505 6900     		.ascii	"i\000"
 2084 0507 01       		.byte	0x1
 2085 0508 34       		.byte	0x34
 2086 0509 F1000000 		.4byte	0xf1
 2087 050d 05       		.uleb128 0x5
 2088 050e 03       		.byte	0x3
 2089 050f 00000000 		.4byte	i
 2090 0513 17       		.uleb128 0x17
 2091 0514 00000000 		.4byte	.LASF68
 2092 0518 01       		.byte	0x1
 2093 0519 35       		.byte	0x35
 2094 051a E5000000 		.4byte	0xe5
 2095 051e 05       		.uleb128 0x5
 2096 051f 03       		.byte	0x3
 2097 0520 00000000 		.4byte	turn_count
 2098 0524 17       		.uleb128 0x17
 2099 0525 38010000 		.4byte	.LASF69
 2100 0529 01       		.byte	0x1
 2101 052a 37       		.byte	0x37
 2102 052b D9000000 		.4byte	0xd9
 2103 052f 05       		.uleb128 0x5
 2104 0530 03       		.byte	0x3
 2105 0531 00000000 		.4byte	disable_toggle
 2106 0535 17       		.uleb128 0x17
 2107 0536 41000000 		.4byte	.LASF70
 2108 053a 01       		.byte	0x1
 2109 053b 39       		.byte	0x39
 2110 053c E5000000 		.4byte	0xe5
 2111 0540 05       		.uleb128 0x5
 2112 0541 03       		.byte	0x3
 2113 0542 00000000 		.4byte	ADCResult
 2114 0546 17       		.uleb128 0x17
 2115 0547 2F030000 		.4byte	.LASF71
 2116 054b 01       		.byte	0x1
 2117 054c 3A       		.byte	0x3a
 2118 054d E5000000 		.4byte	0xe5
 2119 0551 05       		.uleb128 0x5
 2120 0552 03       		.byte	0x3
 2121 0553 00000000 		.4byte	milliVoltReading
 2122 0557 17       		.uleb128 0x17
 2123 0558 25000000 		.4byte	.LASF72
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 46


 2124 055c 01       		.byte	0x1
 2125 055d 3B       		.byte	0x3b
 2126 055e D9000000 		.4byte	0xd9
 2127 0562 05       		.uleb128 0x5
 2128 0563 03       		.byte	0x3
 2129 0564 00000000 		.4byte	state
 2130 0568 17       		.uleb128 0x17
 2131 0569 6D030000 		.4byte	.LASF73
 2132 056d 01       		.byte	0x1
 2133 056e 3C       		.byte	0x3c
 2134 056f 12010000 		.4byte	0x112
 2135 0573 05       		.uleb128 0x5
 2136 0574 03       		.byte	0x3
 2137 0575 00000000 		.4byte	reset
 2138 0579 0B       		.uleb128 0xb
 2139 057a E5000000 		.4byte	0xe5
 2140 057e 89050000 		.4byte	0x589
 2141 0582 14       		.uleb128 0x14
 2142 0583 23010000 		.4byte	0x123
 2143 0587 04       		.byte	0x4
 2144 0588 00       		.byte	0
 2145 0589 17       		.uleb128 0x17
 2146 058a 52030000 		.4byte	.LASF74
 2147 058e 01       		.byte	0x1
 2148 058f 3E       		.byte	0x3e
 2149 0590 79050000 		.4byte	0x579
 2150 0594 05       		.uleb128 0x5
 2151 0595 03       		.byte	0x3
 2152 0596 00000000 		.4byte	maxValues
 2153 059a 17       		.uleb128 0x17
 2154 059b DA030000 		.4byte	.LASF75
 2155 059f 01       		.byte	0x1
 2156 05a0 3F       		.byte	0x3f
 2157 05a1 79050000 		.4byte	0x579
 2158 05a5 05       		.uleb128 0x5
 2159 05a6 03       		.byte	0x3
 2160 05a7 00000000 		.4byte	pastValues
 2161 05ab 17       		.uleb128 0x17
 2162 05ac 67030000 		.4byte	.LASF76
 2163 05b0 01       		.byte	0x1
 2164 05b1 40       		.byte	0x40
 2165 05b2 17010000 		.4byte	0x117
 2166 05b6 05       		.uleb128 0x5
 2167 05b7 03       		.byte	0x3
 2168 05b8 00000000 		.4byte	count
 2169 05bc 0B       		.uleb128 0xb
 2170 05bd D9000000 		.4byte	0xd9
 2171 05c1 CC050000 		.4byte	0x5cc
 2172 05c5 14       		.uleb128 0x14
 2173 05c6 23010000 		.4byte	0x123
 2174 05ca 04       		.byte	0x4
 2175 05cb 00       		.byte	0
 2176 05cc 17       		.uleb128 0x17
 2177 05cd E9000000 		.4byte	.LASF77
 2178 05d1 01       		.byte	0x1
 2179 05d2 41       		.byte	0x41
 2180 05d3 BC050000 		.4byte	0x5bc
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 47


 2181 05d7 05       		.uleb128 0x5
 2182 05d8 03       		.byte	0x3
 2183 05d9 00000000 		.4byte	sensor_state
 2184 05dd 00       		.byte	0
 2185              		.section	.debug_abbrev,"",%progbits
 2186              	.Ldebug_abbrev0:
 2187 0000 01       		.uleb128 0x1
 2188 0001 11       		.uleb128 0x11
 2189 0002 01       		.byte	0x1
 2190 0003 25       		.uleb128 0x25
 2191 0004 0E       		.uleb128 0xe
 2192 0005 13       		.uleb128 0x13
 2193 0006 0B       		.uleb128 0xb
 2194 0007 03       		.uleb128 0x3
 2195 0008 0E       		.uleb128 0xe
 2196 0009 1B       		.uleb128 0x1b
 2197 000a 0E       		.uleb128 0xe
 2198 000b 55       		.uleb128 0x55
 2199 000c 17       		.uleb128 0x17
 2200 000d 11       		.uleb128 0x11
 2201 000e 01       		.uleb128 0x1
 2202 000f 10       		.uleb128 0x10
 2203 0010 17       		.uleb128 0x17
 2204 0011 00       		.byte	0
 2205 0012 00       		.byte	0
 2206 0013 02       		.uleb128 0x2
 2207 0014 16       		.uleb128 0x16
 2208 0015 00       		.byte	0
 2209 0016 03       		.uleb128 0x3
 2210 0017 0E       		.uleb128 0xe
 2211 0018 3A       		.uleb128 0x3a
 2212 0019 0B       		.uleb128 0xb
 2213 001a 3B       		.uleb128 0x3b
 2214 001b 0B       		.uleb128 0xb
 2215 001c 49       		.uleb128 0x49
 2216 001d 13       		.uleb128 0x13
 2217 001e 00       		.byte	0
 2218 001f 00       		.byte	0
 2219 0020 03       		.uleb128 0x3
 2220 0021 24       		.uleb128 0x24
 2221 0022 00       		.byte	0
 2222 0023 0B       		.uleb128 0xb
 2223 0024 0B       		.uleb128 0xb
 2224 0025 3E       		.uleb128 0x3e
 2225 0026 0B       		.uleb128 0xb
 2226 0027 03       		.uleb128 0x3
 2227 0028 0E       		.uleb128 0xe
 2228 0029 00       		.byte	0
 2229 002a 00       		.byte	0
 2230 002b 04       		.uleb128 0x4
 2231 002c 24       		.uleb128 0x24
 2232 002d 00       		.byte	0
 2233 002e 0B       		.uleb128 0xb
 2234 002f 0B       		.uleb128 0xb
 2235 0030 3E       		.uleb128 0x3e
 2236 0031 0B       		.uleb128 0xb
 2237 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 48


 2238 0033 08       		.uleb128 0x8
 2239 0034 00       		.byte	0
 2240 0035 00       		.byte	0
 2241 0036 05       		.uleb128 0x5
 2242 0037 16       		.uleb128 0x16
 2243 0038 00       		.byte	0
 2244 0039 03       		.uleb128 0x3
 2245 003a 0E       		.uleb128 0xe
 2246 003b 3A       		.uleb128 0x3a
 2247 003c 0B       		.uleb128 0xb
 2248 003d 3B       		.uleb128 0x3b
 2249 003e 05       		.uleb128 0x5
 2250 003f 49       		.uleb128 0x49
 2251 0040 13       		.uleb128 0x13
 2252 0041 00       		.byte	0
 2253 0042 00       		.byte	0
 2254 0043 06       		.uleb128 0x6
 2255 0044 35       		.uleb128 0x35
 2256 0045 00       		.byte	0
 2257 0046 49       		.uleb128 0x49
 2258 0047 13       		.uleb128 0x13
 2259 0048 00       		.byte	0
 2260 0049 00       		.byte	0
 2261 004a 07       		.uleb128 0x7
 2262 004b 13       		.uleb128 0x13
 2263 004c 01       		.byte	0x1
 2264 004d 03       		.uleb128 0x3
 2265 004e 0E       		.uleb128 0xe
 2266 004f 0B       		.uleb128 0xb
 2267 0050 0B       		.uleb128 0xb
 2268 0051 3A       		.uleb128 0x3a
 2269 0052 0B       		.uleb128 0xb
 2270 0053 3B       		.uleb128 0x3b
 2271 0054 0B       		.uleb128 0xb
 2272 0055 01       		.uleb128 0x1
 2273 0056 13       		.uleb128 0x13
 2274 0057 00       		.byte	0
 2275 0058 00       		.byte	0
 2276 0059 08       		.uleb128 0x8
 2277 005a 0D       		.uleb128 0xd
 2278 005b 00       		.byte	0
 2279 005c 03       		.uleb128 0x3
 2280 005d 0E       		.uleb128 0xe
 2281 005e 3A       		.uleb128 0x3a
 2282 005f 0B       		.uleb128 0xb
 2283 0060 3B       		.uleb128 0x3b
 2284 0061 0B       		.uleb128 0xb
 2285 0062 49       		.uleb128 0x49
 2286 0063 13       		.uleb128 0x13
 2287 0064 38       		.uleb128 0x38
 2288 0065 0B       		.uleb128 0xb
 2289 0066 00       		.byte	0
 2290 0067 00       		.byte	0
 2291 0068 09       		.uleb128 0x9
 2292 0069 13       		.uleb128 0x13
 2293 006a 01       		.byte	0x1
 2294 006b 03       		.uleb128 0x3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 49


 2295 006c 0E       		.uleb128 0xe
 2296 006d 0B       		.uleb128 0xb
 2297 006e 05       		.uleb128 0x5
 2298 006f 3A       		.uleb128 0x3a
 2299 0070 0B       		.uleb128 0xb
 2300 0071 3B       		.uleb128 0x3b
 2301 0072 0B       		.uleb128 0xb
 2302 0073 01       		.uleb128 0x1
 2303 0074 13       		.uleb128 0x13
 2304 0075 00       		.byte	0
 2305 0076 00       		.byte	0
 2306 0077 0A       		.uleb128 0xa
 2307 0078 0D       		.uleb128 0xd
 2308 0079 00       		.byte	0
 2309 007a 03       		.uleb128 0x3
 2310 007b 08       		.uleb128 0x8
 2311 007c 3A       		.uleb128 0x3a
 2312 007d 0B       		.uleb128 0xb
 2313 007e 3B       		.uleb128 0x3b
 2314 007f 0B       		.uleb128 0xb
 2315 0080 49       		.uleb128 0x49
 2316 0081 13       		.uleb128 0x13
 2317 0082 38       		.uleb128 0x38
 2318 0083 0B       		.uleb128 0xb
 2319 0084 00       		.byte	0
 2320 0085 00       		.byte	0
 2321 0086 0B       		.uleb128 0xb
 2322 0087 01       		.uleb128 0x1
 2323 0088 01       		.byte	0x1
 2324 0089 49       		.uleb128 0x49
 2325 008a 13       		.uleb128 0x13
 2326 008b 01       		.uleb128 0x1
 2327 008c 13       		.uleb128 0x13
 2328 008d 00       		.byte	0
 2329 008e 00       		.byte	0
 2330 008f 0C       		.uleb128 0xc
 2331 0090 21       		.uleb128 0x21
 2332 0091 00       		.byte	0
 2333 0092 49       		.uleb128 0x49
 2334 0093 13       		.uleb128 0x13
 2335 0094 2F       		.uleb128 0x2f
 2336 0095 05       		.uleb128 0x5
 2337 0096 00       		.byte	0
 2338 0097 00       		.byte	0
 2339 0098 0D       		.uleb128 0xd
 2340 0099 2E       		.uleb128 0x2e
 2341 009a 00       		.byte	0
 2342 009b 3F       		.uleb128 0x3f
 2343 009c 19       		.uleb128 0x19
 2344 009d 03       		.uleb128 0x3
 2345 009e 0E       		.uleb128 0xe
 2346 009f 3A       		.uleb128 0x3a
 2347 00a0 0B       		.uleb128 0xb
 2348 00a1 3B       		.uleb128 0x3b
 2349 00a2 0B       		.uleb128 0xb
 2350 00a3 27       		.uleb128 0x27
 2351 00a4 19       		.uleb128 0x19
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 50


 2352 00a5 11       		.uleb128 0x11
 2353 00a6 01       		.uleb128 0x1
 2354 00a7 12       		.uleb128 0x12
 2355 00a8 06       		.uleb128 0x6
 2356 00a9 40       		.uleb128 0x40
 2357 00aa 18       		.uleb128 0x18
 2358 00ab 9742     		.uleb128 0x2117
 2359 00ad 19       		.uleb128 0x19
 2360 00ae 00       		.byte	0
 2361 00af 00       		.byte	0
 2362 00b0 0E       		.uleb128 0xe
 2363 00b1 2E       		.uleb128 0x2e
 2364 00b2 01       		.byte	0x1
 2365 00b3 3F       		.uleb128 0x3f
 2366 00b4 19       		.uleb128 0x19
 2367 00b5 03       		.uleb128 0x3
 2368 00b6 0E       		.uleb128 0xe
 2369 00b7 3A       		.uleb128 0x3a
 2370 00b8 0B       		.uleb128 0xb
 2371 00b9 3B       		.uleb128 0x3b
 2372 00ba 0B       		.uleb128 0xb
 2373 00bb 27       		.uleb128 0x27
 2374 00bc 19       		.uleb128 0x19
 2375 00bd 49       		.uleb128 0x49
 2376 00be 13       		.uleb128 0x13
 2377 00bf 11       		.uleb128 0x11
 2378 00c0 01       		.uleb128 0x1
 2379 00c1 12       		.uleb128 0x12
 2380 00c2 06       		.uleb128 0x6
 2381 00c3 40       		.uleb128 0x40
 2382 00c4 18       		.uleb128 0x18
 2383 00c5 9642     		.uleb128 0x2116
 2384 00c7 19       		.uleb128 0x19
 2385 00c8 01       		.uleb128 0x1
 2386 00c9 13       		.uleb128 0x13
 2387 00ca 00       		.byte	0
 2388 00cb 00       		.byte	0
 2389 00cc 0F       		.uleb128 0xf
 2390 00cd 34       		.uleb128 0x34
 2391 00ce 00       		.byte	0
 2392 00cf 03       		.uleb128 0x3
 2393 00d0 0E       		.uleb128 0xe
 2394 00d1 3A       		.uleb128 0x3a
 2395 00d2 0B       		.uleb128 0xb
 2396 00d3 3B       		.uleb128 0x3b
 2397 00d4 0B       		.uleb128 0xb
 2398 00d5 49       		.uleb128 0x49
 2399 00d6 13       		.uleb128 0x13
 2400 00d7 02       		.uleb128 0x2
 2401 00d8 18       		.uleb128 0x18
 2402 00d9 00       		.byte	0
 2403 00da 00       		.byte	0
 2404 00db 10       		.uleb128 0x10
 2405 00dc 34       		.uleb128 0x34
 2406 00dd 00       		.byte	0
 2407 00de 03       		.uleb128 0x3
 2408 00df 08       		.uleb128 0x8
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 51


 2409 00e0 3A       		.uleb128 0x3a
 2410 00e1 0B       		.uleb128 0xb
 2411 00e2 3B       		.uleb128 0x3b
 2412 00e3 0B       		.uleb128 0xb
 2413 00e4 49       		.uleb128 0x49
 2414 00e5 13       		.uleb128 0x13
 2415 00e6 02       		.uleb128 0x2
 2416 00e7 18       		.uleb128 0x18
 2417 00e8 00       		.byte	0
 2418 00e9 00       		.byte	0
 2419 00ea 11       		.uleb128 0x11
 2420 00eb 0B       		.uleb128 0xb
 2421 00ec 01       		.byte	0x1
 2422 00ed 11       		.uleb128 0x11
 2423 00ee 01       		.uleb128 0x1
 2424 00ef 12       		.uleb128 0x12
 2425 00f0 06       		.uleb128 0x6
 2426 00f1 01       		.uleb128 0x1
 2427 00f2 13       		.uleb128 0x13
 2428 00f3 00       		.byte	0
 2429 00f4 00       		.byte	0
 2430 00f5 12       		.uleb128 0x12
 2431 00f6 0B       		.uleb128 0xb
 2432 00f7 01       		.byte	0x1
 2433 00f8 11       		.uleb128 0x11
 2434 00f9 01       		.uleb128 0x1
 2435 00fa 12       		.uleb128 0x12
 2436 00fb 06       		.uleb128 0x6
 2437 00fc 00       		.byte	0
 2438 00fd 00       		.byte	0
 2439 00fe 13       		.uleb128 0x13
 2440 00ff 21       		.uleb128 0x21
 2441 0100 00       		.byte	0
 2442 0101 49       		.uleb128 0x49
 2443 0102 13       		.uleb128 0x13
 2444 0103 2F       		.uleb128 0x2f
 2445 0104 18       		.uleb128 0x18
 2446 0105 00       		.byte	0
 2447 0106 00       		.byte	0
 2448 0107 14       		.uleb128 0x14
 2449 0108 21       		.uleb128 0x21
 2450 0109 00       		.byte	0
 2451 010a 49       		.uleb128 0x49
 2452 010b 13       		.uleb128 0x13
 2453 010c 2F       		.uleb128 0x2f
 2454 010d 0B       		.uleb128 0xb
 2455 010e 00       		.byte	0
 2456 010f 00       		.byte	0
 2457 0110 15       		.uleb128 0x15
 2458 0111 0F       		.uleb128 0xf
 2459 0112 00       		.byte	0
 2460 0113 0B       		.uleb128 0xb
 2461 0114 0B       		.uleb128 0xb
 2462 0115 49       		.uleb128 0x49
 2463 0116 13       		.uleb128 0x13
 2464 0117 00       		.byte	0
 2465 0118 00       		.byte	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 52


 2466 0119 16       		.uleb128 0x16
 2467 011a 34       		.uleb128 0x34
 2468 011b 00       		.byte	0
 2469 011c 03       		.uleb128 0x3
 2470 011d 0E       		.uleb128 0xe
 2471 011e 3A       		.uleb128 0x3a
 2472 011f 0B       		.uleb128 0xb
 2473 0120 3B       		.uleb128 0x3b
 2474 0121 05       		.uleb128 0x5
 2475 0122 49       		.uleb128 0x49
 2476 0123 13       		.uleb128 0x13
 2477 0124 3F       		.uleb128 0x3f
 2478 0125 19       		.uleb128 0x19
 2479 0126 3C       		.uleb128 0x3c
 2480 0127 19       		.uleb128 0x19
 2481 0128 00       		.byte	0
 2482 0129 00       		.byte	0
 2483 012a 17       		.uleb128 0x17
 2484 012b 34       		.uleb128 0x34
 2485 012c 00       		.byte	0
 2486 012d 03       		.uleb128 0x3
 2487 012e 0E       		.uleb128 0xe
 2488 012f 3A       		.uleb128 0x3a
 2489 0130 0B       		.uleb128 0xb
 2490 0131 3B       		.uleb128 0x3b
 2491 0132 0B       		.uleb128 0xb
 2492 0133 49       		.uleb128 0x49
 2493 0134 13       		.uleb128 0x13
 2494 0135 3F       		.uleb128 0x3f
 2495 0136 19       		.uleb128 0x19
 2496 0137 02       		.uleb128 0x2
 2497 0138 18       		.uleb128 0x18
 2498 0139 00       		.byte	0
 2499 013a 00       		.byte	0
 2500 013b 18       		.uleb128 0x18
 2501 013c 34       		.uleb128 0x34
 2502 013d 00       		.byte	0
 2503 013e 03       		.uleb128 0x3
 2504 013f 08       		.uleb128 0x8
 2505 0140 3A       		.uleb128 0x3a
 2506 0141 0B       		.uleb128 0xb
 2507 0142 3B       		.uleb128 0x3b
 2508 0143 0B       		.uleb128 0xb
 2509 0144 49       		.uleb128 0x49
 2510 0145 13       		.uleb128 0x13
 2511 0146 3F       		.uleb128 0x3f
 2512 0147 19       		.uleb128 0x19
 2513 0148 02       		.uleb128 0x2
 2514 0149 18       		.uleb128 0x18
 2515 014a 00       		.byte	0
 2516 014b 00       		.byte	0
 2517 014c 00       		.byte	0
 2518              		.section	.debug_aranges,"",%progbits
 2519 0000 2C000000 		.4byte	0x2c
 2520 0004 0200     		.2byte	0x2
 2521 0006 00000000 		.4byte	.Ldebug_info0
 2522 000a 04       		.byte	0x4
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 53


 2523 000b 00       		.byte	0
 2524 000c 0000     		.2byte	0
 2525 000e 0000     		.2byte	0
 2526 0010 00000000 		.4byte	.LFB64
 2527 0014 30000000 		.4byte	.LFE64-.LFB64
 2528 0018 00000000 		.4byte	.LFB65
 2529 001c 18000000 		.4byte	.LFE65-.LFB65
 2530 0020 00000000 		.4byte	.LFB66
 2531 0024 74090000 		.4byte	.LFE66-.LFB66
 2532 0028 00000000 		.4byte	0
 2533 002c 00000000 		.4byte	0
 2534              		.section	.debug_ranges,"",%progbits
 2535              	.Ldebug_ranges0:
 2536 0000 00000000 		.4byte	.LFB64
 2537 0004 30000000 		.4byte	.LFE64
 2538 0008 00000000 		.4byte	.LFB65
 2539 000c 18000000 		.4byte	.LFE65
 2540 0010 00000000 		.4byte	.LFB66
 2541 0014 74090000 		.4byte	.LFE66
 2542 0018 00000000 		.4byte	0
 2543 001c 00000000 		.4byte	0
 2544              		.section	.debug_line,"",%progbits
 2545              	.Ldebug_line0:
 2546 0000 31030000 		.section	.debug_str,"MS",%progbits,1
 2546      02006B01 
 2546      00000201 
 2546      FB0E0D00 
 2546      01010101 
 2547              	.LASF68:
 2548 0000 7475726E 		.ascii	"turn_count\000"
 2548      5F636F75 
 2548      6E7400
 2549              	.LASF55:
 2550 000b 66696E61 		.ascii	"finalPath\000"
 2550      6C506174 
 2550      6800
 2551              	.LASF28:
 2552 0015 7072696F 		.ascii	"priority\000"
 2552      72697479 
 2552      00
 2553              	.LASF14:
 2554 001e 696E7438 		.ascii	"int8_t\000"
 2554      5F7400
 2555              	.LASF72:
 2556 0025 73746174 		.ascii	"state\000"
 2556      6500
 2557              	.LASF54:
 2558 002b 74617267 		.ascii	"target\000"
 2558      657400
 2559              	.LASF29:
 2560 0032 5072696F 		.ascii	"PriorityVertex\000"
 2560      72697479 
 2560      56657274 
 2560      657800
 2561              	.LASF70:
 2562 0041 41444352 		.ascii	"ADCResult\000"
 2562      6573756C 
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 54


 2562      7400
 2563              	.LASF51:
 2564 004b 7479636F 		.ascii	"tycord\000"
 2564      726400
 2565              	.LASF26:
 2566 0052 73697A65 		.ascii	"sizetype\000"
 2566      74797065 
 2566      00
 2567              	.LASF78:
 2568 005b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2568      43313120 
 2568      352E342E 
 2568      31203230 
 2568      31363036 
 2569 008e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2569      20726576 
 2569      6973696F 
 2569      6E203233 
 2569      37373135 
 2570 00c1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2570      66756E63 
 2570      74696F6E 
 2570      2D736563 
 2570      74696F6E 
 2571              	.LASF77:
 2572 00e9 73656E73 		.ascii	"sensor_state\000"
 2572      6F725F73 
 2572      74617465 
 2572      00
 2573              	.LASF25:
 2574 00f6 6C6F6E67 		.ascii	"long double\000"
 2574      20646F75 
 2574      626C6500 
 2575              	.LASF42:
 2576 0102 7864696D 		.ascii	"xdim\000"
 2576      00
 2577              	.LASF6:
 2578 0107 5F5F7569 		.ascii	"__uint16_t\000"
 2578      6E743136 
 2578      5F7400
 2579              	.LASF50:
 2580 0112 7478636F 		.ascii	"txcord\000"
 2580      726400
 2581              	.LASF5:
 2582 0119 73686F72 		.ascii	"short int\000"
 2582      7420696E 
 2582      7400
 2583              	.LASF27:
 2584 0123 76616C75 		.ascii	"value\000"
 2584      6500
 2585              	.LASF20:
 2586 0129 75696E74 		.ascii	"uint16\000"
 2586      313600
 2587              	.LASF15:
 2588 0130 75696E74 		.ascii	"uint8_t\000"
 2588      385F7400 
 2589              	.LASF69:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 55


 2590 0138 64697361 		.ascii	"disable_toggle\000"
 2590      626C655F 
 2590      746F6767 
 2590      6C6500
 2591              	.LASF19:
 2592 0147 75696E74 		.ascii	"uint8\000"
 2592      3800
 2593              	.LASF48:
 2594 014d 7378636F 		.ascii	"sxcord\000"
 2594      726400
 2595              	.LASF38:
 2596 0154 76697369 		.ascii	"visited\000"
 2596      74656400 
 2597              	.LASF64:
 2598 015c 73706565 		.ascii	"speedL\000"
 2598      644C00
 2599              	.LASF22:
 2600 0163 666C6F61 		.ascii	"float\000"
 2600      7400
 2601              	.LASF65:
 2602 0169 73706565 		.ascii	"speedR\000"
 2602      645200
 2603              	.LASF57:
 2604 0170 6E657874 		.ascii	"nextInstruction\000"
 2604      496E7374 
 2604      72756374 
 2604      696F6E00 
 2605              	.LASF11:
 2606 0180 6C6F6E67 		.ascii	"long long int\000"
 2606      206C6F6E 
 2606      6720696E 
 2606      7400
 2607              	.LASF56:
 2608 018e 696E7374 		.ascii	"instructionSet\000"
 2608      72756374 
 2608      696F6E53 
 2608      657400
 2609              	.LASF9:
 2610 019d 6C6F6E67 		.ascii	"long int\000"
 2610      20696E74 
 2610      00
 2611              	.LASF52:
 2612 01a6 6F666673 		.ascii	"offset\000"
 2612      657400
 2613              	.LASF1:
 2614 01ad 5F5F7569 		.ascii	"__uint8_t\000"
 2614      6E74385F 
 2614      7400
 2615              	.LASF41:
 2616 01b7 6973725F 		.ascii	"isr_timer_1\000"
 2616      74696D65 
 2616      725F3100 
 2617              	.LASF53:
 2618 01c3 736F7572 		.ascii	"source\000"
 2618      636500
 2619              	.LASF45:
 2620 01ca 61727261 		.ascii	"arrayString\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 56


 2620      79537472 
 2620      696E6700 
 2621              	.LASF43:
 2622 01d6 7964696D 		.ascii	"ydim\000"
 2622      00
 2623              	.LASF80:
 2624 01db 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Documents\\GitHub"
 2624      6C65732E 
 2624      6175636B 
 2624      6C616E64 
 2624      2E61632E 
 2625 0209 5C70726F 		.ascii	"\\project-project-group-7\\301 Project\\Sensor Test"
 2625      6A656374 
 2625      2D70726F 
 2625      6A656374 
 2625      2D67726F 
 2626 0239 2E637964 		.ascii	".cydsn\000"
 2626      736E00
 2627              	.LASF31:
 2628 0240 73746172 		.ascii	"start\000"
 2628      7400
 2629              	.LASF3:
 2630 0246 756E7369 		.ascii	"unsigned char\000"
 2630      676E6564 
 2630      20636861 
 2630      7200
 2631              	.LASF47:
 2632 0254 636E6F64 		.ascii	"cnode\000"
 2632      6500
 2633              	.LASF2:
 2634 025a 7369676E 		.ascii	"signed char\000"
 2634      65642063 
 2634      68617200 
 2635              	.LASF33:
 2636 0266 63617061 		.ascii	"capacity\000"
 2636      63697479 
 2636      00
 2637              	.LASF12:
 2638 026f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2638      206C6F6E 
 2638      6720756E 
 2638      7369676E 
 2638      65642069 
 2639              	.LASF13:
 2640 0286 756E7369 		.ascii	"unsigned int\000"
 2640      676E6564 
 2640      20696E74 
 2640      00
 2641              	.LASF17:
 2642 0293 75696E74 		.ascii	"uint16_t\000"
 2642      31365F74 
 2642      00
 2643              	.LASF49:
 2644 029c 7379636F 		.ascii	"sycord\000"
 2644      726400
 2645              	.LASF7:
 2646 02a3 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 57


 2646      7420756E 
 2646      7369676E 
 2646      65642069 
 2646      6E7400
 2647              	.LASF67:
 2648 02b6 696E7374 		.ascii	"instructionCursor\000"
 2648      72756374 
 2648      696F6E43 
 2648      7572736F 
 2648      7200
 2649              	.LASF0:
 2650 02c8 5F5F696E 		.ascii	"__int8_t\000"
 2650      74385F74 
 2650      00
 2651              	.LASF46:
 2652 02d1 61646A6C 		.ascii	"adjlist\000"
 2652      69737400 
 2653              	.LASF24:
 2654 02d9 63686172 		.ascii	"char\000"
 2654      00
 2655              	.LASF37:
 2656 02de 64697374 		.ascii	"distance\000"
 2656      616E6365 
 2656      00
 2657              	.LASF81:
 2658 02e7 6D61696E 		.ascii	"main\000"
 2658      00
 2659              	.LASF18:
 2660 02ec 696E7433 		.ascii	"int32_t\000"
 2660      325F7400 
 2661              	.LASF61:
 2662 02f4 676F616C 		.ascii	"goalSpeed\000"
 2662      53706565 
 2662      6400
 2663              	.LASF16:
 2664 02fe 696E7431 		.ascii	"int16_t\000"
 2664      365F7400 
 2665              	.LASF39:
 2666 0306 5F426F6F 		.ascii	"_Bool\000"
 2666      6C00
 2667              	.LASF66:
 2668 030c 6368616E 		.ascii	"channel\000"
 2668      6E656C00 
 2669              	.LASF35:
 2670 0314 56657274 		.ascii	"Vertex\000"
 2670      657800
 2671              	.LASF30:
 2672 031b 51756575 		.ascii	"Queue\000"
 2672      6500
 2673              	.LASF21:
 2674 0321 75696E74 		.ascii	"uint32\000"
 2674      333200
 2675              	.LASF79:
 2676 0328 6D61696E 		.ascii	"main.c\000"
 2676      2E6300
 2677              	.LASF71:
 2678 032f 6D696C6C 		.ascii	"milliVoltReading\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 58


 2678      69566F6C 
 2678      74526561 
 2678      64696E67 
 2678      00
 2679              	.LASF10:
 2680 0340 6C6F6E67 		.ascii	"long unsigned int\000"
 2680      20756E73 
 2680      69676E65 
 2680      6420696E 
 2680      7400
 2681              	.LASF74:
 2682 0352 6D617856 		.ascii	"maxValues\000"
 2682      616C7565 
 2682      7300
 2683              	.LASF34:
 2684 035c 61727261 		.ascii	"array\000"
 2684      7900
 2685              	.LASF32:
 2686 0362 73697A65 		.ascii	"size\000"
 2686      00
 2687              	.LASF76:
 2688 0367 636F756E 		.ascii	"count\000"
 2688      7400
 2689              	.LASF73:
 2690 036d 72657365 		.ascii	"reset\000"
 2690      7400
 2691              	.LASF8:
 2692 0373 5F5F696E 		.ascii	"__int32_t\000"
 2692      7433325F 
 2692      7400
 2693              	.LASF4:
 2694 037d 5F5F696E 		.ascii	"__int16_t\000"
 2694      7431365F 
 2694      7400
 2695              	.LASF36:
 2696 0387 70726564 		.ascii	"pred\000"
 2696      00
 2697              	.LASF44:
 2698 038c 78796469 		.ascii	"xydim\000"
 2698      6D00
 2699              	.LASF40:
 2700 0392 6973725F 		.ascii	"isr_eoc_1\000"
 2700      656F635F 
 2700      3100
 2701              	.LASF23:
 2702 039c 646F7562 		.ascii	"double\000"
 2702      6C6500
 2703              	.LASF59:
 2704 03a3 636F6D70 		.ascii	"compareValueL\000"
 2704      61726556 
 2704      616C7565 
 2704      4C00
 2705              	.LASF62:
 2706 03b1 636F756E 		.ascii	"countL\000"
 2706      744C00
 2707              	.LASF58:
 2708 03b8 49544D5F 		.ascii	"ITM_RxBuffer\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cc35iQrb.s 			page 59


 2708      52784275 
 2708      66666572 
 2708      00
 2709              	.LASF60:
 2710 03c5 636F6D70 		.ascii	"compareValueR\000"
 2710      61726556 
 2710      616C7565 
 2710      5200
 2711              	.LASF63:
 2712 03d3 636F756E 		.ascii	"countR\000"
 2712      745200
 2713              	.LASF75:
 2714 03da 70617374 		.ascii	"pastValues\000"
 2714      56616C75 
 2714      657300
 2715              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
