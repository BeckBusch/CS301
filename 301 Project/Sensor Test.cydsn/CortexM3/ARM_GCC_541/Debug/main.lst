ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.isr_eoc_1,"ax",%progbits
  20              		.align	2
  21              		.global	isr_eoc_1
  22              		.thumb
  23              		.thumb_func
  24              		.type	isr_eoc_1, %function
  25              	isr_eoc_1:
  26              	.LFB67:
  27              		.file 1 "main.c"
   1:main.c        **** #include "project.h"
   2:main.c        **** #include "motors.c"
   3:main.c        **** 
   4:main.c        **** #define ON 1
   5:main.c        **** #define OFF 0
   6:main.c        **** 
   7:main.c        **** // FL, FR, CL, CR, BC = front left, front right, center left, center right, back center respectivel
   8:main.c        **** #define FL 0
   9:main.c        **** #define FR 1
  10:main.c        **** #define CL 2
  11:main.c        **** #define CR 3
  12:main.c        **** #define BC 4
  13:main.c        **** 
  14:main.c        **** // State values.
  15:main.c        **** #define FORWARD 0
  16:main.c        **** #define TURNING_LEFT 1
  17:main.c        **** #define TURNING_RIGHT 2
  18:main.c        **** #define CORRECTION 3
  19:main.c        **** 
  20:main.c        **** // Prototype declarations.
  21:main.c        **** CY_ISR_PROTO(isr_eoc_1);
  22:main.c        **** CY_ISR_PROTO(isr_eoc_2);
  23:main.c        **** CY_ISR_PROTO(isr_timer);
  24:main.c        **** 
  25:main.c        **** uint8 channel = 0;
  26:main.c        **** 
  27:main.c        **** uint16 ADCResult;
  28:main.c        **** uint16 milliVoltReading;
  29:main.c        **** uint16 count = 0;
  30:main.c        **** uint16 state = FORWARD;
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 2


  31:main.c        **** 
  32:main.c        **** uint8 sensor_state[5];
  33:main.c        **** 
  34:main.c        **** CY_ISR(isr_eoc_1){
  28              		.loc 1 34 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  35:main.c        ****     // Change the ADC channel each time an eoc interrupt is generated.
  36:main.c        ****     if (channel == 4) {
  33              		.loc 1 36 0
  34 0000 054B     		ldr	r3, .L4
  35 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  36 0004 042B     		cmp	r3, #4
  37 0006 03D1     		bne	.L2
  37:main.c        ****         channel = 0;
  38              		.loc 1 37 0
  39 0008 0022     		movs	r2, #0
  40 000a 034B     		ldr	r3, .L4
  41 000c 1A70     		strb	r2, [r3]
  42 000e 7047     		bx	lr
  43              	.L2:
  38:main.c        ****     } else {
  39:main.c        ****         channel++;
  44              		.loc 1 39 0
  45 0010 0133     		adds	r3, r3, #1
  46 0012 014A     		ldr	r2, .L4
  47 0014 1370     		strb	r3, [r2]
  48 0016 7047     		bx	lr
  49              	.L5:
  50              		.align	2
  51              	.L4:
  52 0018 00000000 		.word	.LANCHOR0
  53              		.cfi_endproc
  54              	.LFE67:
  55              		.size	isr_eoc_1, .-isr_eoc_1
  56              		.section	.text.move_forward,"ax",%progbits
  57              		.align	2
  58              		.global	move_forward
  59              		.thumb
  60              		.thumb_func
  61              		.type	move_forward, %function
  62              	move_forward:
  63              	.LFB63:
  64              		.file 2 "motors.c"
   1:motors.c      **** /* ========================================
   2:motors.c      ****  *
   3:motors.c      ****  * Copyright YOUR COMPANY, THE YEAR
   4:motors.c      ****  * All Rights Reserved
   5:motors.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:motors.c      ****  *
   7:motors.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:motors.c      ****  * WHICH IS THE PROPERTY OF your company.
   9:motors.c      ****  *
  10:motors.c      ****  * ========================================
  11:motors.c      **** */
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 3


  12:motors.c      **** 
  13:motors.c      **** /* STRAIGHT: 
  14:motors.c      ****  * MOVE forward
  15:motors.c      ****  *
  16:motors.c      ****  * CORRECTION:
  17:motors.c      ****  * WAIT UNTIL BC off THEN
  18:motors.c      ****  * MOVE forward
  19:motors.c      ****  * UNTIL FL OR FR off ->
  20:motors.c      ****  * IF FL off TURN left UNTIL BC off
  21:motors.c      ****  * IF FR off TURN right UNTIL BC off
  22:motors.c      ****  *
  23:motors.c      ****  * LEFT:
  24:motors.c      ****  * WAIT UNTIL FL off
  25:motors.c      ****  * TURN left UNTIL CL off
  26:motors.c      ****  * MOVE forward UNTIL BC off
  27:motors.c      ****  * TURN left UNTIL FL on -> off
  28:motors.c      ****  * MOVE forward
  29:motors.c      ****  *
  30:motors.c      ****  * RIGHT:
  31:motors.c      ****  * WAIT UNTIL FR off
  32:motors.c      ****  * TURN right UNTIL CR off
  33:motors.c      ****  * MOVE forward UNTIL BC off
  34:motors.c      ****  * TURN right UNTIL FR on -> off
  35:motors.c      ****  * MOVE forward
  36:motors.c      ****  */
  37:motors.c      **** 
  38:motors.c      **** void move_forward() {
  65              		.loc 2 38 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70 0000 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE63:
  73              		.size	move_forward, .-move_forward
  74 0002 00BF     		.section	.text.correction,"ax",%progbits
  75              		.align	2
  76              		.global	correction
  77              		.thumb
  78              		.thumb_func
  79              		.type	correction, %function
  80              	correction:
  81              	.LFB64:
  39:motors.c      ****     
  40:motors.c      **** }
  41:motors.c      **** 
  42:motors.c      **** void correction() {
  82              		.loc 2 42 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0000 7047     		bx	lr
  88              		.cfi_endproc
  89              	.LFE64:
  90              		.size	correction, .-correction
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 4


  91 0002 00BF     		.section	.text.turn_left,"ax",%progbits
  92              		.align	2
  93              		.global	turn_left
  94              		.thumb
  95              		.thumb_func
  96              		.type	turn_left, %function
  97              	turn_left:
  98              	.LFB65:
  43:motors.c      **** 
  44:motors.c      **** }
  45:motors.c      **** 
  46:motors.c      **** void turn_left() {
  99              		.loc 2 46 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104 0000 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE65:
 107              		.size	turn_left, .-turn_left
 108 0002 00BF     		.section	.text.turn_right,"ax",%progbits
 109              		.align	2
 110              		.global	turn_right
 111              		.thumb
 112              		.thumb_func
 113              		.type	turn_right, %function
 114              	turn_right:
 115              	.LFB66:
  47:motors.c      **** 
  48:motors.c      **** }
  49:motors.c      **** 
  50:motors.c      **** void turn_right() {
 116              		.loc 2 50 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 7047     		bx	lr
 122              		.cfi_endproc
 123              	.LFE66:
 124              		.size	turn_right, .-turn_right
 125 0002 00BF     		.section	.text.main,"ax",%progbits
 126              		.align	2
 127              		.global	main
 128              		.thumb
 129              		.thumb_func
 130              		.type	main, %function
 131              	main:
 132              	.LFB68:
  40:main.c        ****     }
  41:main.c        **** }
  42:main.c        **** 
  43:main.c        **** int main(void){
 133              		.loc 1 43 0
 134              		.cfi_startproc
 135              		@ Volatile: function does not return.
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 5


 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		.loc 1 43 0
 139 0000 08B5     		push	{r3, lr}
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 3, -8
 142              		.cfi_offset 14, -4
  44:main.c        ****     
  45:main.c        ****     // Enable global interrupts as well as start and enable the isr.
  46:main.c        ****     CyGlobalIntEnable;
 143              		.loc 1 46 0
 144              		.syntax unified
 145              	@ 46 "main.c" 1
 146 0002 62B6     		CPSIE   i
 147              	@ 0 "" 2
  47:main.c        ****     isr_eoc_1_StartEx(isr_eoc_1);
 148              		.loc 1 47 0
 149              		.thumb
 150              		.syntax unified
 151 0004 5B48     		ldr	r0, .L43
 152 0006 FFF7FEFF 		bl	isr_eoc_1_StartEx
 153              	.LVL0:
  48:main.c        ****     //isr_eoc_1_Enable();
  49:main.c        ****     //isr_eoc_2_StartEx(isr_eoc_2);
  50:main.c        ****     //isr_eoc_2_Enable();
  51:main.c        ****     //isr_timer_StartEx(isr_timer);
  52:main.c        ****     //isr_timer_Enable();
  53:main.c        ****     
  54:main.c        ****     // Start the ADC and begin conversions (in free running mode so will continue to convert).
  55:main.c        ****     ADC_SAR_Seq_1_Start();
 154              		.loc 1 55 0
 155 000a FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 156              	.LVL1:
  56:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 157              		.loc 1 56 0
 158 000e FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 159              	.LVL2:
 160              	.L11:
  57:main.c        ****     //Timer_1_Start();
  58:main.c        ****         
  59:main.c        ****     while(1) {
  60:main.c        ****            
  61:main.c        ****         // If the conversion result is ready, put it into a variable and convert it into millivolts
  62:main.c        ****         ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_WAIT_FOR_RESULT);
 161              		.loc 1 62 0
 162 0012 0020     		movs	r0, #0
 163 0014 FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 164              	.LVL3:
  63:main.c        ****         ADCResult = ADC_SAR_Seq_1_GetResult16(channel);
 165              		.loc 1 63 0
 166 0018 574B     		ldr	r3, .L43+4
 167 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 168 001c FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 169              	.LVL4:
 170 0020 564B     		ldr	r3, .L43+8
 171 0022 1880     		strh	r0, [r3]	@ movhi
  64:main.c        ****         milliVoltReading = ADC_SAR_Seq_1_CountsTo_mVolts(ADCResult);
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 6


 172              		.loc 1 64 0
 173 0024 FFF7FEFF 		bl	ADC_SAR_Seq_1_CountsTo_mVolts
 174              	.LVL5:
 175 0028 80B2     		uxth	r0, r0
 176 002a 554B     		ldr	r3, .L43+12
 177 002c 1880     		strh	r0, [r3]	@ movhi
  65:main.c        ****         
  66:main.c        ****         // If the milliVolt reading is above the required threshold, perform the requested operatio
  67:main.c        ****         if (milliVoltReading >= 800) {
 178              		.loc 1 67 0
 179 002e B0F5487F 		cmp	r0, #800
 180 0032 1ED3     		bcc	.L12
  68:main.c        ****             // Change the position in the sensor_state array depending on the channel being read.
  69:main.c        ****             if (channel == 0) {
 181              		.loc 1 69 0
 182 0034 504B     		ldr	r3, .L43+4
 183 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 184 0038 1BB9     		cbnz	r3, .L13
  70:main.c        ****                 sensor_state[FL] = ON;
 185              		.loc 1 70 0
 186 003a 0122     		movs	r2, #1
 187 003c 514B     		ldr	r3, .L43+16
 188 003e 1A70     		strb	r2, [r3]
 189 0040 35E0     		b	.L14
 190              	.L13:
  71:main.c        ****             } else if (channel == 1) {
 191              		.loc 1 71 0
 192 0042 012B     		cmp	r3, #1
 193 0044 03D1     		bne	.L15
  72:main.c        ****                 sensor_state[FR] = ON;
 194              		.loc 1 72 0
 195 0046 0122     		movs	r2, #1
 196 0048 4E4B     		ldr	r3, .L43+16
 197 004a 5A70     		strb	r2, [r3, #1]
 198 004c 2FE0     		b	.L14
 199              	.L15:
  73:main.c        ****             } else if (channel == 2) {
 200              		.loc 1 73 0
 201 004e 022B     		cmp	r3, #2
 202 0050 03D1     		bne	.L16
  74:main.c        ****                 sensor_state[CL] = ON;
 203              		.loc 1 74 0
 204 0052 0122     		movs	r2, #1
 205 0054 4B4B     		ldr	r3, .L43+16
 206 0056 9A70     		strb	r2, [r3, #2]
 207 0058 29E0     		b	.L14
 208              	.L16:
  75:main.c        ****             } else if (channel == 3) {
 209              		.loc 1 75 0
 210 005a 032B     		cmp	r3, #3
 211 005c 03D1     		bne	.L17
  76:main.c        ****                 sensor_state[CR] = ON;
 212              		.loc 1 76 0
 213 005e 0122     		movs	r2, #1
 214 0060 484B     		ldr	r3, .L43+16
 215 0062 DA70     		strb	r2, [r3, #3]
 216 0064 23E0     		b	.L14
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 7


 217              	.L17:
  77:main.c        ****             } else if (channel == 4) {
 218              		.loc 1 77 0
 219 0066 042B     		cmp	r3, #4
 220 0068 21D1     		bne	.L14
  78:main.c        ****                 sensor_state[BC] = ON;
 221              		.loc 1 78 0
 222 006a 0122     		movs	r2, #1
 223 006c 454B     		ldr	r3, .L43+16
 224 006e 1A71     		strb	r2, [r3, #4]
 225 0070 1DE0     		b	.L14
 226              	.L12:
  79:main.c        ****             }
  80:main.c        ****         } else {
  81:main.c        ****             if (channel == 0) {
 227              		.loc 1 81 0
 228 0072 414B     		ldr	r3, .L43+4
 229 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 230 0076 1BB9     		cbnz	r3, .L18
  82:main.c        ****                 sensor_state[FL] = OFF;
 231              		.loc 1 82 0
 232 0078 0022     		movs	r2, #0
 233 007a 424B     		ldr	r3, .L43+16
 234 007c 1A70     		strb	r2, [r3]
 235 007e 16E0     		b	.L14
 236              	.L18:
  83:main.c        ****             } else if (channel == 1) {
 237              		.loc 1 83 0
 238 0080 012B     		cmp	r3, #1
 239 0082 03D1     		bne	.L19
  84:main.c        ****                 sensor_state[FR] = OFF;
 240              		.loc 1 84 0
 241 0084 0022     		movs	r2, #0
 242 0086 3F4B     		ldr	r3, .L43+16
 243 0088 5A70     		strb	r2, [r3, #1]
 244 008a 10E0     		b	.L14
 245              	.L19:
  85:main.c        ****             } else if (channel == 2) {
 246              		.loc 1 85 0
 247 008c 022B     		cmp	r3, #2
 248 008e 03D1     		bne	.L20
  86:main.c        ****                 sensor_state[CL] = OFF;
 249              		.loc 1 86 0
 250 0090 0022     		movs	r2, #0
 251 0092 3C4B     		ldr	r3, .L43+16
 252 0094 9A70     		strb	r2, [r3, #2]
 253 0096 0AE0     		b	.L14
 254              	.L20:
  87:main.c        ****             } else if (channel == 3) {
 255              		.loc 1 87 0
 256 0098 032B     		cmp	r3, #3
 257 009a 03D1     		bne	.L21
  88:main.c        ****                 sensor_state[CR] = OFF;
 258              		.loc 1 88 0
 259 009c 0022     		movs	r2, #0
 260 009e 394B     		ldr	r3, .L43+16
 261 00a0 DA70     		strb	r2, [r3, #3]
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 8


 262 00a2 04E0     		b	.L14
 263              	.L21:
  89:main.c        ****             } else if (channel == 4) {
 264              		.loc 1 89 0
 265 00a4 042B     		cmp	r3, #4
 266 00a6 02D1     		bne	.L14
  90:main.c        ****                 sensor_state[BC] = OFF;
 267              		.loc 1 90 0
 268 00a8 0022     		movs	r2, #0
 269 00aa 364B     		ldr	r3, .L43+16
 270 00ac 1A71     		strb	r2, [r3, #4]
 271              	.L14:
  91:main.c        ****             }
  92:main.c        ****         }
  93:main.c        ****         
  94:main.c        ****         /* STRAIGHT: 
  95:main.c        ****          * MOVE forward
  96:main.c        ****          *
  97:main.c        ****          * CORRECTION:
  98:main.c        ****          * WAIT UNTIL BC off
  99:main.c        ****          * MOVE forward
 100:main.c        ****          * UNTIL FL OR FR off ->
 101:main.c        ****          * IF FL off TURN left UNTIL BC off
 102:main.c        ****          * IF FR off TURN right UNTIL BC off
 103:main.c        ****          *
 104:main.c        ****          * LEFT:
 105:main.c        ****          * WAIT UNTIL FL off
 106:main.c        ****          * TURN left UNTIL CL off
 107:main.c        ****          * MOVE forward UNTIL BC off
 108:main.c        ****          * TURN left UNTIL FL on -> off
 109:main.c        ****          * MOVE forward
 110:main.c        ****          *
 111:main.c        ****          * RIGHT:
 112:main.c        ****          * WAIT UNTIL FR off
 113:main.c        ****          * TURN right UNTIL CR off
 114:main.c        ****          * MOVE forward UNTIL BC off
 115:main.c        ****          * TURN right UNTIL FR on -> off
 116:main.c        ****          * MOVE forward
 117:main.c        ****          */
 118:main.c        ****         
 119:main.c        ****         // Implementation of a state machine to control the robot.
 120:main.c        ****         if (state == FORWARD) {
 272              		.loc 1 120 0
 273 00ae 324B     		ldr	r3, .L43+4
 274 00b0 5B88     		ldrh	r3, [r3, #2]
 275 00b2 ABB9     		cbnz	r3, .L22
 121:main.c        ****             if (sensor_state[FL] == OFF) {
 276              		.loc 1 121 0
 277 00b4 334B     		ldr	r3, .L43+16
 278 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 279 00b8 1BB9     		cbnz	r3, .L23
 122:main.c        ****                 state = TURNING_LEFT;
 280              		.loc 1 122 0
 281 00ba 0122     		movs	r2, #1
 282 00bc 2E4B     		ldr	r3, .L43+4
 283 00be 5A80     		strh	r2, [r3, #2]	@ movhi
 284 00c0 A7E7     		b	.L11
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 9


 285              	.L23:
 123:main.c        ****             } else if (sensor_state[FR] == OFF) {
 286              		.loc 1 123 0
 287 00c2 304B     		ldr	r3, .L43+16
 288 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 289 00c6 1BB9     		cbnz	r3, .L25
 124:main.c        ****                 state = TURNING_RIGHT;
 290              		.loc 1 124 0
 291 00c8 0222     		movs	r2, #2
 292 00ca 2B4B     		ldr	r3, .L43+4
 293 00cc 5A80     		strh	r2, [r3, #2]	@ movhi
 294 00ce A0E7     		b	.L11
 295              	.L25:
 125:main.c        ****             } else if (sensor_state[BC] == OFF) {
 296              		.loc 1 125 0
 297 00d0 2C4B     		ldr	r3, .L43+16
 298 00d2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 299 00d4 002B     		cmp	r3, #0
 300 00d6 9CD1     		bne	.L11
 126:main.c        ****                 state = CORRECTION;
 301              		.loc 1 126 0
 302 00d8 0322     		movs	r2, #3
 303 00da 274B     		ldr	r3, .L43+4
 304 00dc 5A80     		strh	r2, [r3, #2]	@ movhi
 305 00de 98E7     		b	.L11
 306              	.L22:
 127:main.c        ****             }
 128:main.c        ****             move_forward();
 129:main.c        ****         } else if (state == TURNING_LEFT) {
 307              		.loc 1 129 0
 308 00e0 012B     		cmp	r3, #1
 309 00e2 11D1     		bne	.L27
 310              	.L28:
 130:main.c        ****             while(sensor_state[CL] == ON) {
 311              		.loc 1 130 0
 312 00e4 274B     		ldr	r3, .L43+16
 313 00e6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 314 00e8 012B     		cmp	r3, #1
 315 00ea FBD0     		beq	.L28
 316              	.L29:
 131:main.c        ****                 turn_left();
 132:main.c        ****             }
 133:main.c        ****             while(sensor_state[BC] == ON) {
 317              		.loc 1 133 0
 318 00ec 254B     		ldr	r3, .L43+16
 319 00ee 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 320 00f0 012B     		cmp	r3, #1
 321 00f2 FBD0     		beq	.L29
 322              	.L30:
 134:main.c        ****                 move_forward();
 135:main.c        ****             }
 136:main.c        ****             while(sensor_state[FL] == OFF) {
 323              		.loc 1 136 0
 324 00f4 234B     		ldr	r3, .L43+16
 325 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 00f8 002B     		cmp	r3, #0
 327 00fa FBD0     		beq	.L30
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 10


 328              	.L31:
 137:main.c        ****                 turn_left();
 138:main.c        ****             }
 139:main.c        ****             while(sensor_state[FL] == ON) {
 329              		.loc 1 139 0
 330 00fc 012B     		cmp	r3, #1
 331 00fe FDD0     		beq	.L31
 140:main.c        ****                 turn_left();
 141:main.c        ****             }
 142:main.c        ****             state = FORWARD;
 332              		.loc 1 142 0
 333 0100 0022     		movs	r2, #0
 334 0102 1D4B     		ldr	r3, .L43+4
 335 0104 5A80     		strh	r2, [r3, #2]	@ movhi
 336 0106 84E7     		b	.L11
 337              	.L27:
 143:main.c        ****         } else if (state == TURNING_RIGHT) {
 338              		.loc 1 143 0
 339 0108 022B     		cmp	r3, #2
 340 010a 11D1     		bne	.L32
 341              	.L33:
 144:main.c        ****             while(sensor_state[CR] == ON) {
 342              		.loc 1 144 0
 343 010c 1D4B     		ldr	r3, .L43+16
 344 010e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 345 0110 012B     		cmp	r3, #1
 346 0112 FBD0     		beq	.L33
 347              	.L34:
 145:main.c        ****                 turn_right();
 146:main.c        ****             }
 147:main.c        ****             while(sensor_state[BC] == ON) {
 348              		.loc 1 147 0
 349 0114 1B4B     		ldr	r3, .L43+16
 350 0116 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 351 0118 012B     		cmp	r3, #1
 352 011a FBD0     		beq	.L34
 353              	.L35:
 148:main.c        ****                 move_forward();
 149:main.c        ****             }
 150:main.c        ****             while(sensor_state[FR] == OFF) {
 354              		.loc 1 150 0
 355 011c 194B     		ldr	r3, .L43+16
 356 011e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 357 0120 002B     		cmp	r3, #0
 358 0122 FBD0     		beq	.L35
 359              	.L36:
 151:main.c        ****                 turn_right();
 152:main.c        ****             }
 153:main.c        ****             while(sensor_state[FR] == ON) {
 360              		.loc 1 153 0
 361 0124 012B     		cmp	r3, #1
 362 0126 FDD0     		beq	.L36
 154:main.c        ****                 turn_right();
 155:main.c        ****             }
 156:main.c        ****             state = FORWARD;
 363              		.loc 1 156 0
 364 0128 0022     		movs	r2, #0
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 11


 365 012a 134B     		ldr	r3, .L43+4
 366 012c 5A80     		strh	r2, [r3, #2]	@ movhi
 367 012e 70E7     		b	.L11
 368              	.L32:
 157:main.c        ****         } else if (state == CORRECTION) {
 369              		.loc 1 157 0
 370 0130 032B     		cmp	r3, #3
 371 0132 7FF46EAF 		bne	.L11
 372              	.L38:
 158:main.c        ****             while(sensor_state[FL] == ON && sensor_state[FR] == ON) {
 373              		.loc 1 158 0
 374 0136 134B     		ldr	r3, .L43+16
 375 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 376 013a 012B     		cmp	r3, #1
 377 013c 03D1     		bne	.L37
 378              		.loc 1 158 0 is_stmt 0 discriminator 1
 379 013e 114A     		ldr	r2, .L43+16
 380 0140 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 381 0142 012A     		cmp	r2, #1
 382 0144 F7D0     		beq	.L38
 383              	.L37:
 159:main.c        ****                 move_forward();
 160:main.c        ****             }
 161:main.c        ****             if (sensor_state[FL] == OFF) {
 384              		.loc 1 161 0 is_stmt 1
 385 0146 3BB9     		cbnz	r3, .L39
 386              	.L40:
 162:main.c        ****                 while(sensor_state[BC] == ON) {
 387              		.loc 1 162 0
 388 0148 0E4B     		ldr	r3, .L43+16
 389 014a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 390 014c 012B     		cmp	r3, #1
 391 014e FBD0     		beq	.L40
 163:main.c        ****                     turn_left();
 164:main.c        ****                 }
 165:main.c        ****                 state = FORWARD;
 392              		.loc 1 165 0
 393 0150 0022     		movs	r2, #0
 394 0152 094B     		ldr	r3, .L43+4
 395 0154 5A80     		strh	r2, [r3, #2]	@ movhi
 396 0156 5CE7     		b	.L11
 397              	.L39:
 166:main.c        ****             } else if (sensor_state[FR] == OFF) {
 398              		.loc 1 166 0
 399 0158 0A4B     		ldr	r3, .L43+16
 400 015a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 401 015c 002B     		cmp	r3, #0
 402 015e 7FF458AF 		bne	.L11
 403              	.L41:
 167:main.c        ****                 while(sensor_state[BC] == ON) {
 404              		.loc 1 167 0
 405 0162 084B     		ldr	r3, .L43+16
 406 0164 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 407 0166 012B     		cmp	r3, #1
 408 0168 FBD0     		beq	.L41
 168:main.c        ****                     turn_right();
 169:main.c        ****                 }
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 12


 170:main.c        ****                 state = FORWARD;
 409              		.loc 1 170 0
 410 016a 0022     		movs	r2, #0
 411 016c 024B     		ldr	r3, .L43+4
 412 016e 5A80     		strh	r2, [r3, #2]	@ movhi
 413 0170 4FE7     		b	.L11
 414              	.L44:
 415 0172 00BF     		.align	2
 416              	.L43:
 417 0174 00000000 		.word	isr_eoc_1
 418 0178 00000000 		.word	.LANCHOR0
 419 017c 00000000 		.word	ADCResult
 420 0180 00000000 		.word	milliVoltReading
 421 0184 00000000 		.word	sensor_state
 422              		.cfi_endproc
 423              	.LFE68:
 424              		.size	main, .-main
 425              		.comm	sensor_state,5,4
 426              		.global	state
 427              		.global	count
 428              		.comm	milliVoltReading,2,2
 429              		.comm	ADCResult,2,2
 430              		.global	channel
 431              		.bss
 432              		.align	1
 433              		.set	.LANCHOR0,. + 0
 434              		.type	channel, %object
 435              		.size	channel, 1
 436              	channel:
 437 0000 00       		.space	1
 438 0001 00       		.space	1
 439              		.type	state, %object
 440              		.size	state, 2
 441              	state:
 442 0002 0000     		.space	2
 443              		.type	count, %object
 444              		.size	count, 2
 445              	count:
 446 0004 0000     		.space	2
 447              		.text
 448              	.Letext0:
 449              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 450              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 451              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 452              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 453              		.file 7 "Generated_Source\\PSoC5/isr_eoc_1.h"
 454              		.file 8 "Generated_Source\\PSoC5/ADC_SAR_Seq_1.h"
 455              		.section	.debug_info,"",%progbits
 456              	.Ldebug_info0:
 457 0000 3F020000 		.4byte	0x23f
 458 0004 0400     		.2byte	0x4
 459 0006 00000000 		.4byte	.Ldebug_abbrev0
 460 000a 04       		.byte	0x4
 461 000b 01       		.uleb128 0x1
 462 000c EB000000 		.4byte	.LASF35
 463 0010 0C       		.byte	0xc
 464 0011 3D020000 		.4byte	.LASF36
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 13


 465 0015 49000000 		.4byte	.LASF37
 466 0019 00000000 		.4byte	.Ldebug_ranges0+0
 467 001d 00000000 		.4byte	0
 468 0021 00000000 		.4byte	.Ldebug_line0
 469 0025 02       		.uleb128 0x2
 470 0026 01       		.byte	0x1
 471 0027 06       		.byte	0x6
 472 0028 B4020000 		.4byte	.LASF0
 473 002c 02       		.uleb128 0x2
 474 002d 01       		.byte	0x1
 475 002e 08       		.byte	0x8
 476 002f DD000000 		.4byte	.LASF1
 477 0033 02       		.uleb128 0x2
 478 0034 02       		.byte	0x2
 479 0035 05       		.byte	0x5
 480 0036 80020000 		.4byte	.LASF2
 481 003a 02       		.uleb128 0x2
 482 003b 02       		.byte	0x2
 483 003c 07       		.byte	0x7
 484 003d 36000000 		.4byte	.LASF3
 485 0041 03       		.uleb128 0x3
 486 0042 2C000000 		.4byte	.LASF9
 487 0046 03       		.byte	0x3
 488 0047 3F       		.byte	0x3f
 489 0048 4C000000 		.4byte	0x4c
 490 004c 02       		.uleb128 0x2
 491 004d 04       		.byte	0x4
 492 004e 05       		.byte	0x5
 493 004f 9A020000 		.4byte	.LASF4
 494 0053 02       		.uleb128 0x2
 495 0054 04       		.byte	0x4
 496 0055 07       		.byte	0x7
 497 0056 79010000 		.4byte	.LASF5
 498 005a 02       		.uleb128 0x2
 499 005b 08       		.byte	0x8
 500 005c 05       		.byte	0x5
 501 005d 2F020000 		.4byte	.LASF6
 502 0061 02       		.uleb128 0x2
 503 0062 08       		.byte	0x8
 504 0063 07       		.byte	0x7
 505 0064 FA010000 		.4byte	.LASF7
 506 0068 04       		.uleb128 0x4
 507 0069 04       		.byte	0x4
 508 006a 05       		.byte	0x5
 509 006b 696E7400 		.ascii	"int\000"
 510 006f 02       		.uleb128 0x2
 511 0070 04       		.byte	0x4
 512 0071 07       		.byte	0x7
 513 0072 D2010000 		.4byte	.LASF8
 514 0076 03       		.uleb128 0x3
 515 0077 1E020000 		.4byte	.LASF10
 516 007b 04       		.byte	0x4
 517 007c 2C       		.byte	0x2c
 518 007d 41000000 		.4byte	0x41
 519 0081 05       		.uleb128 0x5
 520 0082 8A020000 		.4byte	.LASF11
 521 0086 05       		.byte	0x5
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 14


 522 0087 E401     		.2byte	0x1e4
 523 0089 2C000000 		.4byte	0x2c
 524 008d 05       		.uleb128 0x5
 525 008e B9010000 		.4byte	.LASF12
 526 0092 05       		.byte	0x5
 527 0093 E501     		.2byte	0x1e5
 528 0095 3A000000 		.4byte	0x3a
 529 0099 02       		.uleb128 0x2
 530 009a 04       		.byte	0x4
 531 009b 04       		.byte	0x4
 532 009c D7000000 		.4byte	.LASF13
 533 00a0 02       		.uleb128 0x2
 534 00a1 08       		.byte	0x8
 535 00a2 04       		.byte	0x4
 536 00a3 A3010000 		.4byte	.LASF14
 537 00a7 02       		.uleb128 0x2
 538 00a8 01       		.byte	0x1
 539 00a9 08       		.byte	0x8
 540 00aa A3020000 		.4byte	.LASF15
 541 00ae 02       		.uleb128 0x2
 542 00af 08       		.byte	0x8
 543 00b0 04       		.byte	0x4
 544 00b1 A8020000 		.4byte	.LASF16
 545 00b5 02       		.uleb128 0x2
 546 00b6 04       		.byte	0x4
 547 00b7 07       		.byte	0x7
 548 00b8 26020000 		.4byte	.LASF17
 549 00bc 06       		.uleb128 0x6
 550 00bd 90020000 		.4byte	.LASF38
 551 00c1 01       		.byte	0x1
 552 00c2 22       		.byte	0x22
 553 00c3 00000000 		.4byte	.LFB67
 554 00c7 1C000000 		.4byte	.LFE67-.LFB67
 555 00cb 01       		.uleb128 0x1
 556 00cc 9C       		.byte	0x9c
 557 00cd 07       		.uleb128 0x7
 558 00ce 4F020000 		.4byte	.LASF18
 559 00d2 02       		.byte	0x2
 560 00d3 26       		.byte	0x26
 561 00d4 00000000 		.4byte	.LFB63
 562 00d8 02000000 		.4byte	.LFE63-.LFB63
 563 00dc 01       		.uleb128 0x1
 564 00dd 9C       		.byte	0x9c
 565 00de 07       		.uleb128 0x7
 566 00df 44020000 		.4byte	.LASF19
 567 00e3 02       		.byte	0x2
 568 00e4 2A       		.byte	0x2a
 569 00e5 00000000 		.4byte	.LFB64
 570 00e9 02000000 		.4byte	.LFE64-.LFB64
 571 00ed 01       		.uleb128 0x1
 572 00ee 9C       		.byte	0x9c
 573 00ef 07       		.uleb128 0x7
 574 00f0 B9000000 		.4byte	.LASF20
 575 00f4 02       		.byte	0x2
 576 00f5 2E       		.byte	0x2e
 577 00f6 00000000 		.4byte	.LFB65
 578 00fa 02000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 15


 579 00fe 01       		.uleb128 0x1
 580 00ff 9C       		.byte	0x9c
 581 0100 07       		.uleb128 0x7
 582 0101 8B010000 		.4byte	.LASF21
 583 0105 02       		.byte	0x2
 584 0106 32       		.byte	0x32
 585 0107 00000000 		.4byte	.LFB66
 586 010b 02000000 		.4byte	.LFE66-.LFB66
 587 010f 01       		.uleb128 0x1
 588 0110 9C       		.byte	0x9c
 589 0111 08       		.uleb128 0x8
 590 0112 B4010000 		.4byte	.LASF39
 591 0116 01       		.byte	0x1
 592 0117 2B       		.byte	0x2b
 593 0118 68000000 		.4byte	0x68
 594 011c 00000000 		.4byte	.LFB68
 595 0120 88010000 		.4byte	.LFE68-.LFB68
 596 0124 01       		.uleb128 0x1
 597 0125 9C       		.byte	0x9c
 598 0126 79010000 		.4byte	0x179
 599 012a 09       		.uleb128 0x9
 600 012b 0A000000 		.4byte	.LVL0
 601 012f 00020000 		.4byte	0x200
 602 0133 41010000 		.4byte	0x141
 603 0137 0A       		.uleb128 0xa
 604 0138 01       		.uleb128 0x1
 605 0139 50       		.byte	0x50
 606 013a 05       		.uleb128 0x5
 607 013b 03       		.byte	0x3
 608 013c 00000000 		.4byte	isr_eoc_1
 609 0140 00       		.byte	0
 610 0141 0B       		.uleb128 0xb
 611 0142 0E000000 		.4byte	.LVL1
 612 0146 0B020000 		.4byte	0x20b
 613 014a 0B       		.uleb128 0xb
 614 014b 12000000 		.4byte	.LVL2
 615 014f 16020000 		.4byte	0x216
 616 0153 09       		.uleb128 0x9
 617 0154 18000000 		.4byte	.LVL3
 618 0158 21020000 		.4byte	0x221
 619 015c 66010000 		.4byte	0x166
 620 0160 0A       		.uleb128 0xa
 621 0161 01       		.uleb128 0x1
 622 0162 50       		.byte	0x50
 623 0163 01       		.uleb128 0x1
 624 0164 30       		.byte	0x30
 625 0165 00       		.byte	0
 626 0166 0B       		.uleb128 0xb
 627 0167 20000000 		.4byte	.LVL4
 628 016b 2C020000 		.4byte	0x22c
 629 016f 0B       		.uleb128 0xb
 630 0170 28000000 		.4byte	.LVL5
 631 0174 37020000 		.4byte	0x237
 632 0178 00       		.byte	0
 633 0179 0C       		.uleb128 0xc
 634 017a 96010000 		.4byte	.LASF22
 635 017e 06       		.byte	0x6
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 16


 636 017f 1207     		.2byte	0x712
 637 0181 85010000 		.4byte	0x185
 638 0185 0D       		.uleb128 0xd
 639 0186 76000000 		.4byte	0x76
 640 018a 0E       		.uleb128 0xe
 641 018b 1E000000 		.4byte	.LASF23
 642 018f 01       		.byte	0x1
 643 0190 19       		.byte	0x19
 644 0191 81000000 		.4byte	0x81
 645 0195 05       		.uleb128 0x5
 646 0196 03       		.byte	0x3
 647 0197 00000000 		.4byte	channel
 648 019b 0E       		.uleb128 0xe
 649 019c AA010000 		.4byte	.LASF24
 650 01a0 01       		.byte	0x1
 651 01a1 1B       		.byte	0x1b
 652 01a2 8D000000 		.4byte	0x8d
 653 01a6 05       		.uleb128 0x5
 654 01a7 03       		.byte	0x3
 655 01a8 00000000 		.4byte	ADCResult
 656 01ac 0E       		.uleb128 0xe
 657 01ad C0020000 		.4byte	.LASF25
 658 01b1 01       		.byte	0x1
 659 01b2 1C       		.byte	0x1c
 660 01b3 8D000000 		.4byte	0x8d
 661 01b7 05       		.uleb128 0x5
 662 01b8 03       		.byte	0x3
 663 01b9 00000000 		.4byte	milliVoltReading
 664 01bd 0E       		.uleb128 0xe
 665 01be 7A020000 		.4byte	.LASF26
 666 01c2 01       		.byte	0x1
 667 01c3 1D       		.byte	0x1d
 668 01c4 8D000000 		.4byte	0x8d
 669 01c8 05       		.uleb128 0x5
 670 01c9 03       		.byte	0x3
 671 01ca 00000000 		.4byte	count
 672 01ce 0E       		.uleb128 0xe
 673 01cf 26000000 		.4byte	.LASF27
 674 01d3 01       		.byte	0x1
 675 01d4 1E       		.byte	0x1e
 676 01d5 8D000000 		.4byte	0x8d
 677 01d9 05       		.uleb128 0x5
 678 01da 03       		.byte	0x3
 679 01db 00000000 		.4byte	state
 680 01df 0F       		.uleb128 0xf
 681 01e0 81000000 		.4byte	0x81
 682 01e4 EF010000 		.4byte	0x1ef
 683 01e8 10       		.uleb128 0x10
 684 01e9 B5000000 		.4byte	0xb5
 685 01ed 04       		.byte	0x4
 686 01ee 00       		.byte	0
 687 01ef 0E       		.uleb128 0xe
 688 01f0 11020000 		.4byte	.LASF28
 689 01f4 01       		.byte	0x1
 690 01f5 20       		.byte	0x20
 691 01f6 DF010000 		.4byte	0x1df
 692 01fa 05       		.uleb128 0x5
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 17


 693 01fb 03       		.byte	0x3
 694 01fc 00000000 		.4byte	sensor_state
 695 0200 11       		.uleb128 0x11
 696 0201 C0010000 		.4byte	.LASF29
 697 0205 C0010000 		.4byte	.LASF29
 698 0209 07       		.byte	0x7
 699 020a 18       		.byte	0x18
 700 020b 11       		.uleb128 0x11
 701 020c C3000000 		.4byte	.LASF30
 702 0210 C3000000 		.4byte	.LASF30
 703 0214 08       		.byte	0x8
 704 0215 31       		.byte	0x31
 705 0216 11       		.uleb128 0x11
 706 0217 DF010000 		.4byte	.LASF31
 707 021b DF010000 		.4byte	.LASF31
 708 021f 08       		.byte	0x8
 709 0220 A1       		.byte	0xa1
 710 0221 11       		.uleb128 0x11
 711 0222 00000000 		.4byte	.LASF32
 712 0226 00000000 		.4byte	.LASF32
 713 022a 08       		.byte	0x8
 714 022b 34       		.byte	0x34
 715 022c 11       		.uleb128 0x11
 716 022d D1020000 		.4byte	.LASF33
 717 0231 D1020000 		.4byte	.LASF33
 718 0235 08       		.byte	0x8
 719 0236 35       		.byte	0x35
 720 0237 11       		.uleb128 0x11
 721 0238 5C020000 		.4byte	.LASF34
 722 023c 5C020000 		.4byte	.LASF34
 723 0240 08       		.byte	0x8
 724 0241 3A       		.byte	0x3a
 725 0242 00       		.byte	0
 726              		.section	.debug_abbrev,"",%progbits
 727              	.Ldebug_abbrev0:
 728 0000 01       		.uleb128 0x1
 729 0001 11       		.uleb128 0x11
 730 0002 01       		.byte	0x1
 731 0003 25       		.uleb128 0x25
 732 0004 0E       		.uleb128 0xe
 733 0005 13       		.uleb128 0x13
 734 0006 0B       		.uleb128 0xb
 735 0007 03       		.uleb128 0x3
 736 0008 0E       		.uleb128 0xe
 737 0009 1B       		.uleb128 0x1b
 738 000a 0E       		.uleb128 0xe
 739 000b 55       		.uleb128 0x55
 740 000c 17       		.uleb128 0x17
 741 000d 11       		.uleb128 0x11
 742 000e 01       		.uleb128 0x1
 743 000f 10       		.uleb128 0x10
 744 0010 17       		.uleb128 0x17
 745 0011 00       		.byte	0
 746 0012 00       		.byte	0
 747 0013 02       		.uleb128 0x2
 748 0014 24       		.uleb128 0x24
 749 0015 00       		.byte	0
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 18


 750 0016 0B       		.uleb128 0xb
 751 0017 0B       		.uleb128 0xb
 752 0018 3E       		.uleb128 0x3e
 753 0019 0B       		.uleb128 0xb
 754 001a 03       		.uleb128 0x3
 755 001b 0E       		.uleb128 0xe
 756 001c 00       		.byte	0
 757 001d 00       		.byte	0
 758 001e 03       		.uleb128 0x3
 759 001f 16       		.uleb128 0x16
 760 0020 00       		.byte	0
 761 0021 03       		.uleb128 0x3
 762 0022 0E       		.uleb128 0xe
 763 0023 3A       		.uleb128 0x3a
 764 0024 0B       		.uleb128 0xb
 765 0025 3B       		.uleb128 0x3b
 766 0026 0B       		.uleb128 0xb
 767 0027 49       		.uleb128 0x49
 768 0028 13       		.uleb128 0x13
 769 0029 00       		.byte	0
 770 002a 00       		.byte	0
 771 002b 04       		.uleb128 0x4
 772 002c 24       		.uleb128 0x24
 773 002d 00       		.byte	0
 774 002e 0B       		.uleb128 0xb
 775 002f 0B       		.uleb128 0xb
 776 0030 3E       		.uleb128 0x3e
 777 0031 0B       		.uleb128 0xb
 778 0032 03       		.uleb128 0x3
 779 0033 08       		.uleb128 0x8
 780 0034 00       		.byte	0
 781 0035 00       		.byte	0
 782 0036 05       		.uleb128 0x5
 783 0037 16       		.uleb128 0x16
 784 0038 00       		.byte	0
 785 0039 03       		.uleb128 0x3
 786 003a 0E       		.uleb128 0xe
 787 003b 3A       		.uleb128 0x3a
 788 003c 0B       		.uleb128 0xb
 789 003d 3B       		.uleb128 0x3b
 790 003e 05       		.uleb128 0x5
 791 003f 49       		.uleb128 0x49
 792 0040 13       		.uleb128 0x13
 793 0041 00       		.byte	0
 794 0042 00       		.byte	0
 795 0043 06       		.uleb128 0x6
 796 0044 2E       		.uleb128 0x2e
 797 0045 00       		.byte	0
 798 0046 3F       		.uleb128 0x3f
 799 0047 19       		.uleb128 0x19
 800 0048 03       		.uleb128 0x3
 801 0049 0E       		.uleb128 0xe
 802 004a 3A       		.uleb128 0x3a
 803 004b 0B       		.uleb128 0xb
 804 004c 3B       		.uleb128 0x3b
 805 004d 0B       		.uleb128 0xb
 806 004e 27       		.uleb128 0x27
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 19


 807 004f 19       		.uleb128 0x19
 808 0050 11       		.uleb128 0x11
 809 0051 01       		.uleb128 0x1
 810 0052 12       		.uleb128 0x12
 811 0053 06       		.uleb128 0x6
 812 0054 40       		.uleb128 0x40
 813 0055 18       		.uleb128 0x18
 814 0056 9742     		.uleb128 0x2117
 815 0058 19       		.uleb128 0x19
 816 0059 00       		.byte	0
 817 005a 00       		.byte	0
 818 005b 07       		.uleb128 0x7
 819 005c 2E       		.uleb128 0x2e
 820 005d 00       		.byte	0
 821 005e 3F       		.uleb128 0x3f
 822 005f 19       		.uleb128 0x19
 823 0060 03       		.uleb128 0x3
 824 0061 0E       		.uleb128 0xe
 825 0062 3A       		.uleb128 0x3a
 826 0063 0B       		.uleb128 0xb
 827 0064 3B       		.uleb128 0x3b
 828 0065 0B       		.uleb128 0xb
 829 0066 11       		.uleb128 0x11
 830 0067 01       		.uleb128 0x1
 831 0068 12       		.uleb128 0x12
 832 0069 06       		.uleb128 0x6
 833 006a 40       		.uleb128 0x40
 834 006b 18       		.uleb128 0x18
 835 006c 9742     		.uleb128 0x2117
 836 006e 19       		.uleb128 0x19
 837 006f 00       		.byte	0
 838 0070 00       		.byte	0
 839 0071 08       		.uleb128 0x8
 840 0072 2E       		.uleb128 0x2e
 841 0073 01       		.byte	0x1
 842 0074 3F       		.uleb128 0x3f
 843 0075 19       		.uleb128 0x19
 844 0076 03       		.uleb128 0x3
 845 0077 0E       		.uleb128 0xe
 846 0078 3A       		.uleb128 0x3a
 847 0079 0B       		.uleb128 0xb
 848 007a 3B       		.uleb128 0x3b
 849 007b 0B       		.uleb128 0xb
 850 007c 27       		.uleb128 0x27
 851 007d 19       		.uleb128 0x19
 852 007e 49       		.uleb128 0x49
 853 007f 13       		.uleb128 0x13
 854 0080 8701     		.uleb128 0x87
 855 0082 19       		.uleb128 0x19
 856 0083 11       		.uleb128 0x11
 857 0084 01       		.uleb128 0x1
 858 0085 12       		.uleb128 0x12
 859 0086 06       		.uleb128 0x6
 860 0087 40       		.uleb128 0x40
 861 0088 18       		.uleb128 0x18
 862 0089 9742     		.uleb128 0x2117
 863 008b 19       		.uleb128 0x19
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 20


 864 008c 01       		.uleb128 0x1
 865 008d 13       		.uleb128 0x13
 866 008e 00       		.byte	0
 867 008f 00       		.byte	0
 868 0090 09       		.uleb128 0x9
 869 0091 898201   		.uleb128 0x4109
 870 0094 01       		.byte	0x1
 871 0095 11       		.uleb128 0x11
 872 0096 01       		.uleb128 0x1
 873 0097 31       		.uleb128 0x31
 874 0098 13       		.uleb128 0x13
 875 0099 01       		.uleb128 0x1
 876 009a 13       		.uleb128 0x13
 877 009b 00       		.byte	0
 878 009c 00       		.byte	0
 879 009d 0A       		.uleb128 0xa
 880 009e 8A8201   		.uleb128 0x410a
 881 00a1 00       		.byte	0
 882 00a2 02       		.uleb128 0x2
 883 00a3 18       		.uleb128 0x18
 884 00a4 9142     		.uleb128 0x2111
 885 00a6 18       		.uleb128 0x18
 886 00a7 00       		.byte	0
 887 00a8 00       		.byte	0
 888 00a9 0B       		.uleb128 0xb
 889 00aa 898201   		.uleb128 0x4109
 890 00ad 00       		.byte	0
 891 00ae 11       		.uleb128 0x11
 892 00af 01       		.uleb128 0x1
 893 00b0 31       		.uleb128 0x31
 894 00b1 13       		.uleb128 0x13
 895 00b2 00       		.byte	0
 896 00b3 00       		.byte	0
 897 00b4 0C       		.uleb128 0xc
 898 00b5 34       		.uleb128 0x34
 899 00b6 00       		.byte	0
 900 00b7 03       		.uleb128 0x3
 901 00b8 0E       		.uleb128 0xe
 902 00b9 3A       		.uleb128 0x3a
 903 00ba 0B       		.uleb128 0xb
 904 00bb 3B       		.uleb128 0x3b
 905 00bc 05       		.uleb128 0x5
 906 00bd 49       		.uleb128 0x49
 907 00be 13       		.uleb128 0x13
 908 00bf 3F       		.uleb128 0x3f
 909 00c0 19       		.uleb128 0x19
 910 00c1 3C       		.uleb128 0x3c
 911 00c2 19       		.uleb128 0x19
 912 00c3 00       		.byte	0
 913 00c4 00       		.byte	0
 914 00c5 0D       		.uleb128 0xd
 915 00c6 35       		.uleb128 0x35
 916 00c7 00       		.byte	0
 917 00c8 49       		.uleb128 0x49
 918 00c9 13       		.uleb128 0x13
 919 00ca 00       		.byte	0
 920 00cb 00       		.byte	0
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 21


 921 00cc 0E       		.uleb128 0xe
 922 00cd 34       		.uleb128 0x34
 923 00ce 00       		.byte	0
 924 00cf 03       		.uleb128 0x3
 925 00d0 0E       		.uleb128 0xe
 926 00d1 3A       		.uleb128 0x3a
 927 00d2 0B       		.uleb128 0xb
 928 00d3 3B       		.uleb128 0x3b
 929 00d4 0B       		.uleb128 0xb
 930 00d5 49       		.uleb128 0x49
 931 00d6 13       		.uleb128 0x13
 932 00d7 3F       		.uleb128 0x3f
 933 00d8 19       		.uleb128 0x19
 934 00d9 02       		.uleb128 0x2
 935 00da 18       		.uleb128 0x18
 936 00db 00       		.byte	0
 937 00dc 00       		.byte	0
 938 00dd 0F       		.uleb128 0xf
 939 00de 01       		.uleb128 0x1
 940 00df 01       		.byte	0x1
 941 00e0 49       		.uleb128 0x49
 942 00e1 13       		.uleb128 0x13
 943 00e2 01       		.uleb128 0x1
 944 00e3 13       		.uleb128 0x13
 945 00e4 00       		.byte	0
 946 00e5 00       		.byte	0
 947 00e6 10       		.uleb128 0x10
 948 00e7 21       		.uleb128 0x21
 949 00e8 00       		.byte	0
 950 00e9 49       		.uleb128 0x49
 951 00ea 13       		.uleb128 0x13
 952 00eb 2F       		.uleb128 0x2f
 953 00ec 0B       		.uleb128 0xb
 954 00ed 00       		.byte	0
 955 00ee 00       		.byte	0
 956 00ef 11       		.uleb128 0x11
 957 00f0 2E       		.uleb128 0x2e
 958 00f1 00       		.byte	0
 959 00f2 3F       		.uleb128 0x3f
 960 00f3 19       		.uleb128 0x19
 961 00f4 3C       		.uleb128 0x3c
 962 00f5 19       		.uleb128 0x19
 963 00f6 6E       		.uleb128 0x6e
 964 00f7 0E       		.uleb128 0xe
 965 00f8 03       		.uleb128 0x3
 966 00f9 0E       		.uleb128 0xe
 967 00fa 3A       		.uleb128 0x3a
 968 00fb 0B       		.uleb128 0xb
 969 00fc 3B       		.uleb128 0x3b
 970 00fd 0B       		.uleb128 0xb
 971 00fe 00       		.byte	0
 972 00ff 00       		.byte	0
 973 0100 00       		.byte	0
 974              		.section	.debug_aranges,"",%progbits
 975 0000 44000000 		.4byte	0x44
 976 0004 0200     		.2byte	0x2
 977 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 22


 978 000a 04       		.byte	0x4
 979 000b 00       		.byte	0
 980 000c 0000     		.2byte	0
 981 000e 0000     		.2byte	0
 982 0010 00000000 		.4byte	.LFB67
 983 0014 1C000000 		.4byte	.LFE67-.LFB67
 984 0018 00000000 		.4byte	.LFB63
 985 001c 02000000 		.4byte	.LFE63-.LFB63
 986 0020 00000000 		.4byte	.LFB64
 987 0024 02000000 		.4byte	.LFE64-.LFB64
 988 0028 00000000 		.4byte	.LFB65
 989 002c 02000000 		.4byte	.LFE65-.LFB65
 990 0030 00000000 		.4byte	.LFB66
 991 0034 02000000 		.4byte	.LFE66-.LFB66
 992 0038 00000000 		.4byte	.LFB68
 993 003c 88010000 		.4byte	.LFE68-.LFB68
 994 0040 00000000 		.4byte	0
 995 0044 00000000 		.4byte	0
 996              		.section	.debug_ranges,"",%progbits
 997              	.Ldebug_ranges0:
 998 0000 00000000 		.4byte	.LFB67
 999 0004 1C000000 		.4byte	.LFE67
 1000 0008 00000000 		.4byte	.LFB63
 1001 000c 02000000 		.4byte	.LFE63
 1002 0010 00000000 		.4byte	.LFB64
 1003 0014 02000000 		.4byte	.LFE64
 1004 0018 00000000 		.4byte	.LFB65
 1005 001c 02000000 		.4byte	.LFE65
 1006 0020 00000000 		.4byte	.LFB66
 1007 0024 02000000 		.4byte	.LFE66
 1008 0028 00000000 		.4byte	.LFB68
 1009 002c 88010000 		.4byte	.LFE68
 1010 0030 00000000 		.4byte	0
 1011 0034 00000000 		.4byte	0
 1012              		.section	.debug_line,"",%progbits
 1013              	.Ldebug_line0:
 1014 0000 26020000 		.section	.debug_str,"MS",%progbits,1
 1014      02007A01 
 1014      00000201 
 1014      FB0E0D00 
 1014      01010101 
 1015              	.LASF32:
 1016 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 1016      5341525F 
 1016      5365715F 
 1016      315F4973 
 1016      456E6443 
 1017              	.LASF23:
 1018 001e 6368616E 		.ascii	"channel\000"
 1018      6E656C00 
 1019              	.LASF27:
 1020 0026 73746174 		.ascii	"state\000"
 1020      6500
 1021              	.LASF9:
 1022 002c 5F5F696E 		.ascii	"__int32_t\000"
 1022      7433325F 
 1022      7400
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 23


 1023              	.LASF3:
 1024 0036 73686F72 		.ascii	"short unsigned int\000"
 1024      7420756E 
 1024      7369676E 
 1024      65642069 
 1024      6E7400
 1025              	.LASF37:
 1026 0049 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Downloads\\ENGGEN"
 1026      6C65732E 
 1026      6175636B 
 1026      6C616E64 
 1026      2E61632E 
 1027 0077 20323039 		.ascii	" 209 Github\\project-project-group-7\\301 Project\\"
 1027      20476974 
 1027      6875625C 
 1027      70726F6A 
 1027      6563742D 
 1028 00a7 53656E73 		.ascii	"Sensor Test.cydsn\000"
 1028      6F722054 
 1028      6573742E 
 1028      63796473 
 1028      6E00
 1029              	.LASF20:
 1030 00b9 7475726E 		.ascii	"turn_left\000"
 1030      5F6C6566 
 1030      7400
 1031              	.LASF30:
 1032 00c3 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 1032      5341525F 
 1032      5365715F 
 1032      315F5374 
 1032      61727400 
 1033              	.LASF13:
 1034 00d7 666C6F61 		.ascii	"float\000"
 1034      7400
 1035              	.LASF1:
 1036 00dd 756E7369 		.ascii	"unsigned char\000"
 1036      676E6564 
 1036      20636861 
 1036      7200
 1037              	.LASF35:
 1038 00eb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1038      43313120 
 1038      352E342E 
 1038      31203230 
 1038      31363036 
 1039 011e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1039      20726576 
 1039      6973696F 
 1039      6E203233 
 1039      37373135 
 1040 0151 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1040      66756E63 
 1040      74696F6E 
 1040      2D736563 
 1040      74696F6E 
 1041              	.LASF5:
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 24


 1042 0179 6C6F6E67 		.ascii	"long unsigned int\000"
 1042      20756E73 
 1042      69676E65 
 1042      6420696E 
 1042      7400
 1043              	.LASF21:
 1044 018b 7475726E 		.ascii	"turn_right\000"
 1044      5F726967 
 1044      687400
 1045              	.LASF22:
 1046 0196 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1046      52784275 
 1046      66666572 
 1046      00
 1047              	.LASF14:
 1048 01a3 646F7562 		.ascii	"double\000"
 1048      6C6500
 1049              	.LASF24:
 1050 01aa 41444352 		.ascii	"ADCResult\000"
 1050      6573756C 
 1050      7400
 1051              	.LASF39:
 1052 01b4 6D61696E 		.ascii	"main\000"
 1052      00
 1053              	.LASF12:
 1054 01b9 75696E74 		.ascii	"uint16\000"
 1054      313600
 1055              	.LASF29:
 1056 01c0 6973725F 		.ascii	"isr_eoc_1_StartEx\000"
 1056      656F635F 
 1056      315F5374 
 1056      61727445 
 1056      7800
 1057              	.LASF8:
 1058 01d2 756E7369 		.ascii	"unsigned int\000"
 1058      676E6564 
 1058      20696E74 
 1058      00
 1059              	.LASF31:
 1060 01df 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 1060      5341525F 
 1060      5365715F 
 1060      315F5374 
 1060      61727443 
 1061              	.LASF7:
 1062 01fa 6C6F6E67 		.ascii	"long long unsigned int\000"
 1062      206C6F6E 
 1062      6720756E 
 1062      7369676E 
 1062      65642069 
 1063              	.LASF28:
 1064 0211 73656E73 		.ascii	"sensor_state\000"
 1064      6F725F73 
 1064      74617465 
 1064      00
 1065              	.LASF10:
 1066 021e 696E7433 		.ascii	"int32_t\000"
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 25


 1066      325F7400 
 1067              	.LASF17:
 1068 0226 73697A65 		.ascii	"sizetype\000"
 1068      74797065 
 1068      00
 1069              	.LASF6:
 1070 022f 6C6F6E67 		.ascii	"long long int\000"
 1070      206C6F6E 
 1070      6720696E 
 1070      7400
 1071              	.LASF36:
 1072 023d 6D61696E 		.ascii	"main.c\000"
 1072      2E6300
 1073              	.LASF19:
 1074 0244 636F7272 		.ascii	"correction\000"
 1074      65637469 
 1074      6F6E00
 1075              	.LASF18:
 1076 024f 6D6F7665 		.ascii	"move_forward\000"
 1076      5F666F72 
 1076      77617264 
 1076      00
 1077              	.LASF34:
 1078 025c 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 1078      5341525F 
 1078      5365715F 
 1078      315F436F 
 1078      756E7473 
 1079              	.LASF26:
 1080 027a 636F756E 		.ascii	"count\000"
 1080      7400
 1081              	.LASF2:
 1082 0280 73686F72 		.ascii	"short int\000"
 1082      7420696E 
 1082      7400
 1083              	.LASF11:
 1084 028a 75696E74 		.ascii	"uint8\000"
 1084      3800
 1085              	.LASF38:
 1086 0290 6973725F 		.ascii	"isr_eoc_1\000"
 1086      656F635F 
 1086      3100
 1087              	.LASF4:
 1088 029a 6C6F6E67 		.ascii	"long int\000"
 1088      20696E74 
 1088      00
 1089              	.LASF15:
 1090 02a3 63686172 		.ascii	"char\000"
 1090      00
 1091              	.LASF16:
 1092 02a8 6C6F6E67 		.ascii	"long double\000"
 1092      20646F75 
 1092      626C6500 
 1093              	.LASF0:
 1094 02b4 7369676E 		.ascii	"signed char\000"
 1094      65642063 
 1094      68617200 
ARM GAS  C:\Users\smas270\AppData\Local\Temp\ccAiCCyW.s 			page 26


 1095              	.LASF25:
 1096 02c0 6D696C6C 		.ascii	"milliVoltReading\000"
 1096      69566F6C 
 1096      74526561 
 1096      64696E67 
 1096      00
 1097              	.LASF33:
 1098 02d1 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 1098      5341525F 
 1098      5365715F 
 1098      315F4765 
 1098      74526573 
 1099              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
