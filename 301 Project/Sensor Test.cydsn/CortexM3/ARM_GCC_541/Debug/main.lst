ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	compareValueL,1,1
  20              		.comm	compareValueR,1,1
  21              		.comm	goalSpeed,1,1
  22              		.comm	countL,2,2
  23              		.comm	countR,2,2
  24              		.comm	speedL,2,2
  25              		.comm	speedR,2,2
  26              		.comm	PriorityVertex,4,4
  27              		.comm	Queue,1152,4
  28              		.comm	Vertex,6,4
  29              		.global	array
  30              		.data
  31              		.align	2
  32              		.type	array, %object
  33              		.size	array, 1140
  34              	array:
  35 0000 01000000 		.word	1
  36 0004 01000000 		.word	1
  37 0008 01000000 		.word	1
  38 000c 01000000 		.word	1
  39 0010 01000000 		.word	1
  40 0014 01000000 		.word	1
  41 0018 01000000 		.word	1
  42 001c 01000000 		.word	1
  43 0020 01000000 		.word	1
  44 0024 01000000 		.word	1
  45 0028 01000000 		.word	1
  46 002c 01000000 		.word	1
  47 0030 01000000 		.word	1
  48 0034 01000000 		.word	1
  49 0038 01000000 		.word	1
  50 003c 01000000 		.word	1
  51 0040 01000000 		.word	1
  52 0044 01000000 		.word	1
  53 0048 01000000 		.word	1
  54 004c 01000000 		.word	1
  55 0050 00000000 		.word	0
  56 0054 00000000 		.word	0
  57 0058 00000000 		.word	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 2


  58 005c 00000000 		.word	0
  59 0060 00000000 		.word	0
  60 0064 01000000 		.word	1
  61 0068 00000000 		.word	0
  62 006c 00000000 		.word	0
  63 0070 00000000 		.word	0
  64 0074 00000000 		.word	0
  65 0078 00000000 		.word	0
  66 007c 00000000 		.word	0
  67 0080 00000000 		.word	0
  68 0084 00000000 		.word	0
  69 0088 00000000 		.word	0
  70 008c 00000000 		.word	0
  71 0090 00000000 		.word	0
  72 0094 01000000 		.word	1
  73 0098 01000000 		.word	1
  74 009c 01000000 		.word	1
  75 00a0 01000000 		.word	1
  76 00a4 01000000 		.word	1
  77 00a8 01000000 		.word	1
  78 00ac 00000000 		.word	0
  79 00b0 01000000 		.word	1
  80 00b4 00000000 		.word	0
  81 00b8 01000000 		.word	1
  82 00bc 01000000 		.word	1
  83 00c0 01000000 		.word	1
  84 00c4 01000000 		.word	1
  85 00c8 01000000 		.word	1
  86 00cc 01000000 		.word	1
  87 00d0 01000000 		.word	1
  88 00d4 00000000 		.word	0
  89 00d8 01000000 		.word	1
  90 00dc 00000000 		.word	0
  91 00e0 01000000 		.word	1
  92 00e4 01000000 		.word	1
  93 00e8 00000000 		.word	0
  94 00ec 00000000 		.word	0
  95 00f0 00000000 		.word	0
  96 00f4 00000000 		.word	0
  97 00f8 00000000 		.word	0
  98 00fc 00000000 		.word	0
  99 0100 00000000 		.word	0
 100 0104 00000000 		.word	0
 101 0108 00000000 		.word	0
 102 010c 00000000 		.word	0
 103 0110 00000000 		.word	0
 104 0114 00000000 		.word	0
 105 0118 00000000 		.word	0
 106 011c 01000000 		.word	1
 107 0120 00000000 		.word	0
 108 0124 01000000 		.word	1
 109 0128 00000000 		.word	0
 110 012c 01000000 		.word	1
 111 0130 01000000 		.word	1
 112 0134 00000000 		.word	0
 113 0138 01000000 		.word	1
 114 013c 00000000 		.word	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 3


 115 0140 01000000 		.word	1
 116 0144 01000000 		.word	1
 117 0148 01000000 		.word	1
 118 014c 01000000 		.word	1
 119 0150 01000000 		.word	1
 120 0154 00000000 		.word	0
 121 0158 01000000 		.word	1
 122 015c 00000000 		.word	0
 123 0160 01000000 		.word	1
 124 0164 01000000 		.word	1
 125 0168 01000000 		.word	1
 126 016c 00000000 		.word	0
 127 0170 01000000 		.word	1
 128 0174 00000000 		.word	0
 129 0178 01000000 		.word	1
 130 017c 01000000 		.word	1
 131 0180 00000000 		.word	0
 132 0184 01000000 		.word	1
 133 0188 00000000 		.word	0
 134 018c 00000000 		.word	0
 135 0190 00000000 		.word	0
 136 0194 01000000 		.word	1
 137 0198 00000000 		.word	0
 138 019c 00000000 		.word	0
 139 01a0 00000000 		.word	0
 140 01a4 01000000 		.word	1
 141 01a8 00000000 		.word	0
 142 01ac 01000000 		.word	1
 143 01b0 00000000 		.word	0
 144 01b4 00000000 		.word	0
 145 01b8 00000000 		.word	0
 146 01bc 01000000 		.word	1
 147 01c0 00000000 		.word	0
 148 01c4 01000000 		.word	1
 149 01c8 01000000 		.word	1
 150 01cc 00000000 		.word	0
 151 01d0 01000000 		.word	1
 152 01d4 01000000 		.word	1
 153 01d8 01000000 		.word	1
 154 01dc 00000000 		.word	0
 155 01e0 01000000 		.word	1
 156 01e4 00000000 		.word	0
 157 01e8 01000000 		.word	1
 158 01ec 00000000 		.word	0
 159 01f0 01000000 		.word	1
 160 01f4 00000000 		.word	0
 161 01f8 01000000 		.word	1
 162 01fc 00000000 		.word	0
 163 0200 01000000 		.word	1
 164 0204 01000000 		.word	1
 165 0208 01000000 		.word	1
 166 020c 00000000 		.word	0
 167 0210 01000000 		.word	1
 168 0214 01000000 		.word	1
 169 0218 00000000 		.word	0
 170 021c 00000000 		.word	0
 171 0220 00000000 		.word	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 4


 172 0224 00000000 		.word	0
 173 0228 00000000 		.word	0
 174 022c 01000000 		.word	1
 175 0230 00000000 		.word	0
 176 0234 01000000 		.word	1
 177 0238 00000000 		.word	0
 178 023c 01000000 		.word	1
 179 0240 00000000 		.word	0
 180 0244 01000000 		.word	1
 181 0248 00000000 		.word	0
 182 024c 01000000 		.word	1
 183 0250 00000000 		.word	0
 184 0254 00000000 		.word	0
 185 0258 00000000 		.word	0
 186 025c 01000000 		.word	1
 187 0260 01000000 		.word	1
 188 0264 00000000 		.word	0
 189 0268 01000000 		.word	1
 190 026c 01000000 		.word	1
 191 0270 01000000 		.word	1
 192 0274 01000000 		.word	1
 193 0278 01000000 		.word	1
 194 027c 00000000 		.word	0
 195 0280 01000000 		.word	1
 196 0284 00000000 		.word	0
 197 0288 01000000 		.word	1
 198 028c 01000000 		.word	1
 199 0290 01000000 		.word	1
 200 0294 00000000 		.word	0
 201 0298 01000000 		.word	1
 202 029c 00000000 		.word	0
 203 02a0 01000000 		.word	1
 204 02a4 01000000 		.word	1
 205 02a8 01000000 		.word	1
 206 02ac 01000000 		.word	1
 207 02b0 00000000 		.word	0
 208 02b4 00000000 		.word	0
 209 02b8 00000000 		.word	0
 210 02bc 00000000 		.word	0
 211 02c0 00000000 		.word	0
 212 02c4 00000000 		.word	0
 213 02c8 00000000 		.word	0
 214 02cc 01000000 		.word	1
 215 02d0 00000000 		.word	0
 216 02d4 00000000 		.word	0
 217 02d8 00000000 		.word	0
 218 02dc 01000000 		.word	1
 219 02e0 00000000 		.word	0
 220 02e4 01000000 		.word	1
 221 02e8 00000000 		.word	0
 222 02ec 00000000 		.word	0
 223 02f0 00000000 		.word	0
 224 02f4 01000000 		.word	1
 225 02f8 01000000 		.word	1
 226 02fc 01000000 		.word	1
 227 0300 01000000 		.word	1
 228 0304 01000000 		.word	1
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 5


 229 0308 01000000 		.word	1
 230 030c 01000000 		.word	1
 231 0310 01000000 		.word	1
 232 0314 00000000 		.word	0
 233 0318 01000000 		.word	1
 234 031c 01000000 		.word	1
 235 0320 01000000 		.word	1
 236 0324 00000000 		.word	0
 237 0328 01000000 		.word	1
 238 032c 00000000 		.word	0
 239 0330 01000000 		.word	1
 240 0334 01000000 		.word	1
 241 0338 01000000 		.word	1
 242 033c 00000000 		.word	0
 243 0340 01000000 		.word	1
 244 0344 01000000 		.word	1
 245 0348 00000000 		.word	0
 246 034c 00000000 		.word	0
 247 0350 00000000 		.word	0
 248 0354 00000000 		.word	0
 249 0358 00000000 		.word	0
 250 035c 00000000 		.word	0
 251 0360 00000000 		.word	0
 252 0364 00000000 		.word	0
 253 0368 00000000 		.word	0
 254 036c 01000000 		.word	1
 255 0370 00000000 		.word	0
 256 0374 01000000 		.word	1
 257 0378 00000000 		.word	0
 258 037c 00000000 		.word	0
 259 0380 00000000 		.word	0
 260 0384 00000000 		.word	0
 261 0388 00000000 		.word	0
 262 038c 01000000 		.word	1
 263 0390 01000000 		.word	1
 264 0394 00000000 		.word	0
 265 0398 01000000 		.word	1
 266 039c 01000000 		.word	1
 267 03a0 01000000 		.word	1
 268 03a4 01000000 		.word	1
 269 03a8 01000000 		.word	1
 270 03ac 01000000 		.word	1
 271 03b0 01000000 		.word	1
 272 03b4 00000000 		.word	0
 273 03b8 01000000 		.word	1
 274 03bc 00000000 		.word	0
 275 03c0 01000000 		.word	1
 276 03c4 01000000 		.word	1
 277 03c8 01000000 		.word	1
 278 03cc 01000000 		.word	1
 279 03d0 01000000 		.word	1
 280 03d4 00000000 		.word	0
 281 03d8 01000000 		.word	1
 282 03dc 01000000 		.word	1
 283 03e0 00000000 		.word	0
 284 03e4 00000000 		.word	0
 285 03e8 00000000 		.word	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 6


 286 03ec 00000000 		.word	0
 287 03f0 00000000 		.word	0
 288 03f4 00000000 		.word	0
 289 03f8 00000000 		.word	0
 290 03fc 01000000 		.word	1
 291 0400 00000000 		.word	0
 292 0404 00000000 		.word	0
 293 0408 00000000 		.word	0
 294 040c 00000000 		.word	0
 295 0410 00000000 		.word	0
 296 0414 00000000 		.word	0
 297 0418 00000000 		.word	0
 298 041c 00000000 		.word	0
 299 0420 00000000 		.word	0
 300 0424 01000000 		.word	1
 301 0428 01000000 		.word	1
 302 042c 01000000 		.word	1
 303 0430 01000000 		.word	1
 304 0434 01000000 		.word	1
 305 0438 01000000 		.word	1
 306 043c 01000000 		.word	1
 307 0440 01000000 		.word	1
 308 0444 01000000 		.word	1
 309 0448 01000000 		.word	1
 310 044c 01000000 		.word	1
 311 0450 01000000 		.word	1
 312 0454 01000000 		.word	1
 313 0458 01000000 		.word	1
 314 045c 01000000 		.word	1
 315 0460 01000000 		.word	1
 316 0464 01000000 		.word	1
 317 0468 01000000 		.word	1
 318 046c 01000000 		.word	1
 319 0470 01000000 		.word	1
 320              		.global	channel
 321              		.bss
 322              		.type	channel, %object
 323              		.size	channel, 1
 324              	channel:
 325 0000 00       		.space	1
 326              		.global	instructionCursor
 327 0001 00       		.align	1
 328              		.type	instructionCursor, %object
 329              		.size	instructionCursor, 2
 330              	instructionCursor:
 331 0002 0000     		.space	2
 332              		.global	i
 333              		.align	2
 334              		.type	i, %object
 335              		.size	i, 4
 336              	i:
 337 0004 00000000 		.space	4
 338              		.global	turn_count
 339              		.align	1
 340              		.type	turn_count, %object
 341              		.size	turn_count, 2
 342              	turn_count:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 7


 343 0008 0000     		.space	2
 344              		.global	disable_toggle
 345              		.data
 346              		.type	disable_toggle, %object
 347              		.size	disable_toggle, 1
 348              	disable_toggle:
 349 0474 03       		.byte	3
 350              		.comm	ADCResult,2,2
 351              		.comm	milliVoltReading,2,2
 352              		.global	state
 353              		.bss
 354              		.type	state, %object
 355              		.size	state, 1
 356              	state:
 357 000a 00       		.space	1
 358              		.global	reset
 359              		.type	reset, %object
 360              		.size	reset, 1
 361              	reset:
 362 000b 00       		.space	1
 363              		.global	maxValues
 364              		.align	2
 365              		.type	maxValues, %object
 366              		.size	maxValues, 10
 367              	maxValues:
 368 000c 00000000 		.space	10
 368      00000000 
 368      0000
 369              		.global	pastValues
 370 0016 0000     		.align	2
 371              		.type	pastValues, %object
 372              		.size	pastValues, 10
 373              	pastValues:
 374 0018 00000000 		.space	10
 374      00000000 
 374      0000
 375              		.global	count
 376              		.align	1
 377              		.type	count, %object
 378              		.size	count, 2
 379              	count:
 380 0022 0000     		.space	2
 381              		.comm	sensor_state,5,4
 382              		.section	.text.isr_eoc_1,"ax",%progbits
 383              		.align	2
 384              		.global	isr_eoc_1
 385              		.thumb
 386              		.thumb_func
 387              		.type	isr_eoc_1, %function
 388              	isr_eoc_1:
 389              	.LFB64:
 390              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  * main.c
   3:main.c        ****  * ========================================
   4:main.c        **** */
   5:main.c        **** 
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 8


   6:main.c        **** #include "project.h"
   7:main.c        **** #include "motors.h"
   8:main.c        **** #include "USBUART.h"
   9:main.c        **** #include "decoders.h"
  10:main.c        **** #include <stdio.h>
  11:main.c        **** #include "pathfinding.h"
  12:main.c        **** 
  13:main.c        **** #include "map.h"
  14:main.c        **** 
  15:main.c        **** #define ON 1
  16:main.c        **** #define OFF 0
  17:main.c        **** 
  18:main.c        **** #define L 0
  19:main.c        **** #define R 1
  20:main.c        **** #define J 2
  21:main.c        **** #define NULLDIR -1
  22:main.c        **** 
  23:main.c        **** // FL, FR, CL, CR, BC = front left, front right, center left, center right, back center respectivel
  24:main.c        **** #define FL 0
  25:main.c        **** #define FR 1
  26:main.c        **** #define CL 2
  27:main.c        **** #define CR 3
  28:main.c        **** #define BC 4
  29:main.c        **** 
  30:main.c        **** // State values.
  31:main.c        **** #define FORWARD 0
  32:main.c        **** #define TURNING_LEFT 1
  33:main.c        **** #define TURNING_RIGHT 2
  34:main.c        **** #define EXIT_LEFT 3
  35:main.c        **** #define EXIT_RIGHT 4
  36:main.c        **** #define TURNING_ENABLE 5
  37:main.c        **** #define STOPPED 6
  38:main.c        **** 
  39:main.c        **** // Disable left and right turns at appropriate times.
  40:main.c        **** #define DISABLE_LEFT_TURN 0
  41:main.c        **** #define DISABLE_RIGHT_TURN 1
  42:main.c        **** #define DISABLE_ALL 2
  43:main.c        **** #define DISABLE_NONE 3
  44:main.c        **** 
  45:main.c        **** // Prototype declarations.
  46:main.c        **** CY_ISR_PROTO(isr_eoc_1);
  47:main.c        **** CY_ISR_PROTO(isr_timer_1);
  48:main.c        **** 
  49:main.c        **** volatile uint8 channel = 0;
  50:main.c        **** volatile uint16 instructionCursor = 0;
  51:main.c        **** 
  52:main.c        **** // Move these inside main???? (volatile may need to be kept outside, among others potentially)
  53:main.c        **** uint32 i = 0;
  54:main.c        **** uint16 turn_count = 0;
  55:main.c        **** 
  56:main.c        **** uint8 disable_toggle = DISABLE_NONE;
  57:main.c        **** 
  58:main.c        **** uint16 ADCResult;
  59:main.c        **** uint16 milliVoltReading;
  60:main.c        **** uint8 state = FORWARD;
  61:main.c        **** volatile uint8 reset = 0;
  62:main.c        **** 
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 9


  63:main.c        **** uint16 maxValues[5] = {0};
  64:main.c        **** uint16 pastValues[5] = {0};
  65:main.c        **** volatile uint16 count = 0;
  66:main.c        **** uint8 sensor_state[5];
  67:main.c        **** 
  68:main.c        **** CY_ISR(isr_eoc_1) {
 391              		.loc 1 68 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
  69:main.c        ****     // Change the ADC channel each time an eoc interrupt is generated.
  70:main.c        ****     if (channel == 4) {
 401              		.loc 1 70 0
 402 0004 094B     		ldr	r3, .L5
 403 0006 1B78     		ldrb	r3, [r3]
 404 0008 DBB2     		uxtb	r3, r3
 405 000a 042B     		cmp	r3, #4
 406 000c 03D1     		bne	.L2
  71:main.c        ****         channel = 0;
 407              		.loc 1 71 0
 408 000e 074B     		ldr	r3, .L5
 409 0010 0022     		movs	r2, #0
 410 0012 1A70     		strb	r2, [r3]
  72:main.c        ****     } else {
  73:main.c        ****         channel++;
  74:main.c        ****     }   
  75:main.c        **** }
 411              		.loc 1 75 0
 412 0014 06E0     		b	.L4
 413              	.L2:
  73:main.c        ****     }   
 414              		.loc 1 73 0
 415 0016 054B     		ldr	r3, .L5
 416 0018 1B78     		ldrb	r3, [r3]
 417 001a DBB2     		uxtb	r3, r3
 418 001c 0133     		adds	r3, r3, #1
 419 001e DAB2     		uxtb	r2, r3
 420 0020 024B     		ldr	r3, .L5
 421 0022 1A70     		strb	r2, [r3]
 422              	.L4:
 423              		.loc 1 75 0
 424 0024 00BF     		nop
 425 0026 BD46     		mov	sp, r7
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0028 80BC     		pop	{r7}
 429              		.cfi_restore 7
 430              		.cfi_def_cfa_offset 0
 431 002a 7047     		bx	lr
 432              	.L6:
 433              		.align	2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 10


 434              	.L5:
 435 002c 00000000 		.word	channel
 436              		.cfi_endproc
 437              	.LFE64:
 438              		.size	isr_eoc_1, .-isr_eoc_1
 439              		.section	.text.isr_timer_1,"ax",%progbits
 440              		.align	2
 441              		.global	isr_timer_1
 442              		.thumb
 443              		.thumb_func
 444              		.type	isr_timer_1, %function
 445              	isr_timer_1:
 446              	.LFB65:
  76:main.c        **** 
  77:main.c        **** CY_ISR(isr_timer_1) {
 447              		.loc 1 77 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 7, -4
 455 0002 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
  78:main.c        ****     reset = 1;
 457              		.loc 1 78 0
 458 0004 034B     		ldr	r3, .L8
 459 0006 0122     		movs	r2, #1
 460 0008 1A70     		strb	r2, [r3]
  79:main.c        **** }
 461              		.loc 1 79 0
 462 000a 00BF     		nop
 463 000c BD46     		mov	sp, r7
 464              		.cfi_def_cfa_register 13
 465              		@ sp needed
 466 000e 80BC     		pop	{r7}
 467              		.cfi_restore 7
 468              		.cfi_def_cfa_offset 0
 469 0010 7047     		bx	lr
 470              	.L9:
 471 0012 00BF     		.align	2
 472              	.L8:
 473 0014 00000000 		.word	reset
 474              		.cfi_endproc
 475              	.LFE65:
 476              		.size	isr_timer_1, .-isr_timer_1
 477              		.section	.text.main,"ax",%progbits
 478              		.align	2
 479              		.global	main
 480              		.thumb
 481              		.thumb_func
 482              		.type	main, %function
 483              	main:
 484              	.LFB66:
  80:main.c        **** 
  81:main.c        **** int main(void) {
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 11


 485              		.loc 1 81 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 64
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 490              		.cfi_def_cfa_offset 24
 491              		.cfi_offset 4, -24
 492              		.cfi_offset 5, -20
 493              		.cfi_offset 7, -16
 494              		.cfi_offset 8, -12
 495              		.cfi_offset 9, -8
 496              		.cfi_offset 14, -4
 497 0004 92B0     		sub	sp, sp, #72
 498              		.cfi_def_cfa_offset 96
 499 0006 02AF     		add	r7, sp, #8
 500              		.cfi_def_cfa 7, 88
  82:main.c        **** 
  83:main.c        ****     // Write debugging led high.
  84:main.c        ****     led_Write(1);
 501              		.loc 1 84 0
 502 0008 0120     		movs	r0, #1
 503 000a FFF7FEFF 		bl	led_Write
  85:main.c        ****     
  86:main.c        ****     // Store the dimensions of the map so we can't go outside of it later on. Hard coding this.
  87:main.c        ****     uint16_t xdim = 19, ydim = 15;
 504              		.loc 1 87 0
 505 000e 1323     		movs	r3, #19
 506 0010 7B85     		strh	r3, [r7, #42]	@ movhi
 507 0012 0F23     		movs	r3, #15
 508 0014 3B85     		strh	r3, [r7, #40]	@ movhi
  88:main.c        ****     uint16_t xydim = xdim * ydim;
 509              		.loc 1 88 0
 510 0016 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 511 0018 3A8D     		ldrh	r2, [r7, #40]	@ movhi
 512 001a 02FB03F3 		mul	r3, r2, r3
 513 001e FB84     		strh	r3, [r7, #38]	@ movhi
  89:main.c        ****     
  90:main.c        ****     // Each zero can only be adjacent to 4 zeroes maximum.
  91:main.c        ****     int16_t adjlist[xydim][4];
 514              		.loc 1 91 0
 515 0020 F98C     		ldrh	r1, [r7, #38]
 516 0022 0B46     		mov	r3, r1
 517 0024 013B     		subs	r3, r3, #1
 518 0026 3B62     		str	r3, [r7, #32]
 519 0028 8AB2     		uxth	r2, r1
 520 002a 4FF00003 		mov	r3, #0
 521 002e 4FEA8319 		lsl	r9, r3, #6
 522 0032 49EA9269 		orr	r9, r9, r2, lsr #26
 523 0036 4FEA8218 		lsl	r8, r2, #6
 524 003a 8AB2     		uxth	r2, r1
 525 003c 4FF00003 		mov	r3, #0
 526 0040 9D01     		lsls	r5, r3, #6
 527 0042 45EA9265 		orr	r5, r5, r2, lsr #26
 528 0046 9401     		lsls	r4, r2, #6
 529 0048 0B46     		mov	r3, r1
 530 004a DB00     		lsls	r3, r3, #3
 531 004c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 12


 532 004e 0733     		adds	r3, r3, #7
 533 0050 DB08     		lsrs	r3, r3, #3
 534 0052 DB00     		lsls	r3, r3, #3
 535 0054 ADEB030D 		sub	sp, sp, r3
 536 0058 02AB     		add	r3, sp, #8
 537 005a 0133     		adds	r3, r3, #1
 538 005c 5B08     		lsrs	r3, r3, #1
 539 005e 5B00     		lsls	r3, r3, #1
 540 0060 FB61     		str	r3, [r7, #28]
 541              	.LBB2:
  92:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 542              		.loc 1 92 0
 543 0062 0023     		movs	r3, #0
 544 0064 FB87     		strh	r3, [r7, #62]	@ movhi
 545 0066 19E0     		b	.L11
 546              	.L14:
 547              	.LBB3:
  93:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 548              		.loc 1 93 0
 549 0068 0023     		movs	r3, #0
 550 006a 87F83D30 		strb	r3, [r7, #61]
 551 006e 0EE0     		b	.L12
 552              	.L13:
  94:main.c        ****             adjlist[i][j] = -1;
 553              		.loc 1 94 0 discriminator 3
 554 0070 F98F     		ldrh	r1, [r7, #62]
 555 0072 97F83D20 		ldrb	r2, [r7, #61]	@ zero_extendqisi2
 556 0076 FB69     		ldr	r3, [r7, #28]
 557 0078 8900     		lsls	r1, r1, #2
 558 007a 0A44     		add	r2, r2, r1
 559 007c 4FF6FF71 		movw	r1, #65535
 560 0080 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  93:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 561              		.loc 1 93 0 discriminator 3
 562 0084 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 563 0088 0133     		adds	r3, r3, #1
 564 008a 87F83D30 		strb	r3, [r7, #61]
 565              	.L12:
  93:main.c        ****         for (uint8_t j = 0; j < 4; j++) {
 566              		.loc 1 93 0 is_stmt 0 discriminator 1
 567 008e 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 568 0092 032B     		cmp	r3, #3
 569 0094 ECD9     		bls	.L13
 570              	.LBE3:
  92:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 571              		.loc 1 92 0 is_stmt 1 discriminator 2
 572 0096 FB8F     		ldrh	r3, [r7, #62]
 573 0098 0133     		adds	r3, r3, #1
 574 009a FB87     		strh	r3, [r7, #62]	@ movhi
 575              	.L11:
  92:main.c        ****     for (uint16_t i = 0; i < xydim; i++) {
 576              		.loc 1 92 0 is_stmt 0 discriminator 1
 577 009c FA8F     		ldrh	r2, [r7, #62]
 578 009e FB8C     		ldrh	r3, [r7, #38]
 579 00a0 9A42     		cmp	r2, r3
 580 00a2 E1D3     		bcc	.L14
 581              	.LBE2:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 13


 582              	.LBB4:
  95:main.c        ****         }
  96:main.c        ****     }
  97:main.c        ****     uint16_t cnode;
  98:main.c        **** 
  99:main.c        ****     /* Construct the adjacency list.
 100:main.c        ****        Numbered reading from left to right, top down. */
 101:main.c        ****     for (uint16_t i = 0; i < ydim; i++) {
 583              		.loc 1 101 0 is_stmt 1
 584 00a4 0023     		movs	r3, #0
 585 00a6 7B87     		strh	r3, [r7, #58]	@ movhi
 586 00a8 ADE0     		b	.L15
 587              	.L22:
 588              	.LBB5:
 102:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
 589              		.loc 1 102 0
 590 00aa 0023     		movs	r3, #0
 591 00ac 3B87     		strh	r3, [r7, #56]	@ movhi
 592 00ae A2E0     		b	.L16
 593              	.L21:
 103:main.c        ****             // For loops go through rows, cols.
 104:main.c        ****             if (array[i][j] == 0) {
 594              		.loc 1 104 0
 595 00b0 7A8F     		ldrh	r2, [r7, #58]
 596 00b2 398F     		ldrh	r1, [r7, #56]
 597 00b4 A548     		ldr	r0, .L69
 598 00b6 1346     		mov	r3, r2
 599 00b8 DB00     		lsls	r3, r3, #3
 600 00ba 1344     		add	r3, r3, r2
 601 00bc 5B00     		lsls	r3, r3, #1
 602 00be 1344     		add	r3, r3, r2
 603 00c0 0B44     		add	r3, r3, r1
 604 00c2 50F82330 		ldr	r3, [r0, r3, lsl #2]
 605 00c6 002B     		cmp	r3, #0
 606 00c8 40F09280 		bne	.L17
 105:main.c        ****                 cnode = i * xdim + j; 
 607              		.loc 1 105 0
 608 00cc 7B8F     		ldrh	r3, [r7, #58]	@ movhi
 609 00ce 7A8D     		ldrh	r2, [r7, #42]	@ movhi
 610 00d0 02FB03F3 		mul	r3, r2, r3
 611 00d4 9AB2     		uxth	r2, r3
 612 00d6 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 613 00d8 1344     		add	r3, r3, r2
 614 00da 7B83     		strh	r3, [r7, #26]	@ movhi
 106:main.c        ****                 if (i >= 1) {
 615              		.loc 1 106 0
 616 00dc 7B8F     		ldrh	r3, [r7, #58]
 617 00de 002B     		cmp	r3, #0
 618 00e0 1CD0     		beq	.L18
 107:main.c        ****                     if (array[i - 1][j] == 0) {
 619              		.loc 1 107 0
 620 00e2 7B8F     		ldrh	r3, [r7, #58]
 621 00e4 5A1E     		subs	r2, r3, #1
 622 00e6 398F     		ldrh	r1, [r7, #56]
 623 00e8 9848     		ldr	r0, .L69
 624 00ea 1346     		mov	r3, r2
 625 00ec DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 14


 626 00ee 1344     		add	r3, r3, r2
 627 00f0 5B00     		lsls	r3, r3, #1
 628 00f2 1344     		add	r3, r3, r2
 629 00f4 0B44     		add	r3, r3, r1
 630 00f6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 631 00fa 002B     		cmp	r3, #0
 632 00fc 0ED1     		bne	.L18
 108:main.c        ****                         // Row above.
 109:main.c        ****                         adjlist[cnode][0] = (i - 1) * xdim + j;
 633              		.loc 1 109 0
 634 00fe 7A8B     		ldrh	r2, [r7, #26]
 635 0100 7B8F     		ldrh	r3, [r7, #58]
 636 0102 013B     		subs	r3, r3, #1
 637 0104 9BB2     		uxth	r3, r3
 638 0106 798D     		ldrh	r1, [r7, #42]	@ movhi
 639 0108 01FB03F3 		mul	r3, r1, r3
 640 010c 99B2     		uxth	r1, r3
 641 010e 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 642 0110 0B44     		add	r3, r3, r1
 643 0112 9BB2     		uxth	r3, r3
 644 0114 19B2     		sxth	r1, r3
 645 0116 FB69     		ldr	r3, [r7, #28]
 646 0118 23F83210 		strh	r1, [r3, r2, lsl #3]	@ movhi
 647              	.L18:
 110:main.c        ****                     }
 111:main.c        ****                 } if (i <= ydim - 2) {
 648              		.loc 1 111 0
 649 011c 7A8F     		ldrh	r2, [r7, #58]
 650 011e 3B8D     		ldrh	r3, [r7, #40]
 651 0120 023B     		subs	r3, r3, #2
 652 0122 9A42     		cmp	r2, r3
 653 0124 1EDC     		bgt	.L19
 112:main.c        ****                     if (array[i + 1][j] == 0) {
 654              		.loc 1 112 0
 655 0126 7B8F     		ldrh	r3, [r7, #58]
 656 0128 5A1C     		adds	r2, r3, #1
 657 012a 398F     		ldrh	r1, [r7, #56]
 658 012c 8748     		ldr	r0, .L69
 659 012e 1346     		mov	r3, r2
 660 0130 DB00     		lsls	r3, r3, #3
 661 0132 1344     		add	r3, r3, r2
 662 0134 5B00     		lsls	r3, r3, #1
 663 0136 1344     		add	r3, r3, r2
 664 0138 0B44     		add	r3, r3, r1
 665 013a 50F82330 		ldr	r3, [r0, r3, lsl #2]
 666 013e 002B     		cmp	r3, #0
 667 0140 10D1     		bne	.L19
 113:main.c        ****                         // Row below.
 114:main.c        ****                         adjlist[cnode][1] = (i + 1) * xdim + j;
 668              		.loc 1 114 0
 669 0142 7B8B     		ldrh	r3, [r7, #26]
 670 0144 7A8F     		ldrh	r2, [r7, #58]
 671 0146 0132     		adds	r2, r2, #1
 672 0148 92B2     		uxth	r2, r2
 673 014a 798D     		ldrh	r1, [r7, #42]	@ movhi
 674 014c 01FB02F2 		mul	r2, r1, r2
 675 0150 91B2     		uxth	r1, r2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 15


 676 0152 3A8F     		ldrh	r2, [r7, #56]	@ movhi
 677 0154 0A44     		add	r2, r2, r1
 678 0156 92B2     		uxth	r2, r2
 679 0158 11B2     		sxth	r1, r2
 680 015a FA69     		ldr	r2, [r7, #28]
 681 015c DB00     		lsls	r3, r3, #3
 682 015e 1344     		add	r3, r3, r2
 683 0160 0A46     		mov	r2, r1	@ movhi
 684 0162 5A80     		strh	r2, [r3, #2]	@ movhi
 685              	.L19:
 115:main.c        ****                     }
 116:main.c        ****                 } if (j >= 1) {
 686              		.loc 1 116 0
 687 0164 3B8F     		ldrh	r3, [r7, #56]
 688 0166 002B     		cmp	r3, #0
 689 0168 1ED0     		beq	.L20
 117:main.c        ****                     if (array[i][j - 1] == 0) {
 690              		.loc 1 117 0
 691 016a 7A8F     		ldrh	r2, [r7, #58]
 692 016c 3B8F     		ldrh	r3, [r7, #56]
 693 016e 591E     		subs	r1, r3, #1
 694 0170 7648     		ldr	r0, .L69
 695 0172 1346     		mov	r3, r2
 696 0174 DB00     		lsls	r3, r3, #3
 697 0176 1344     		add	r3, r3, r2
 698 0178 5B00     		lsls	r3, r3, #1
 699 017a 1344     		add	r3, r3, r2
 700 017c 0B44     		add	r3, r3, r1
 701 017e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 702 0182 002B     		cmp	r3, #0
 703 0184 10D1     		bne	.L20
 118:main.c        ****                         // Column left.
 119:main.c        ****                         adjlist[cnode][2] = i * xdim + j - 1;
 704              		.loc 1 119 0
 705 0186 7B8B     		ldrh	r3, [r7, #26]
 706 0188 7A8F     		ldrh	r2, [r7, #58]	@ movhi
 707 018a 798D     		ldrh	r1, [r7, #42]	@ movhi
 708 018c 01FB02F2 		mul	r2, r1, r2
 709 0190 91B2     		uxth	r1, r2
 710 0192 3A8F     		ldrh	r2, [r7, #56]	@ movhi
 711 0194 0A44     		add	r2, r2, r1
 712 0196 92B2     		uxth	r2, r2
 713 0198 013A     		subs	r2, r2, #1
 714 019a 92B2     		uxth	r2, r2
 715 019c 11B2     		sxth	r1, r2
 716 019e FA69     		ldr	r2, [r7, #28]
 717 01a0 DB00     		lsls	r3, r3, #3
 718 01a2 1344     		add	r3, r3, r2
 719 01a4 0A46     		mov	r2, r1	@ movhi
 720 01a6 9A80     		strh	r2, [r3, #4]	@ movhi
 721              	.L20:
 120:main.c        ****                     }
 121:main.c        ****                 } if (j <= xdim - 2) {
 722              		.loc 1 121 0
 723 01a8 3A8F     		ldrh	r2, [r7, #56]
 724 01aa 7B8D     		ldrh	r3, [r7, #42]
 725 01ac 023B     		subs	r3, r3, #2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 16


 726 01ae 9A42     		cmp	r2, r3
 727 01b0 1EDC     		bgt	.L17
 122:main.c        ****                     if (array[i][j + 1] == 0) {
 728              		.loc 1 122 0
 729 01b2 7A8F     		ldrh	r2, [r7, #58]
 730 01b4 3B8F     		ldrh	r3, [r7, #56]
 731 01b6 591C     		adds	r1, r3, #1
 732 01b8 6448     		ldr	r0, .L69
 733 01ba 1346     		mov	r3, r2
 734 01bc DB00     		lsls	r3, r3, #3
 735 01be 1344     		add	r3, r3, r2
 736 01c0 5B00     		lsls	r3, r3, #1
 737 01c2 1344     		add	r3, r3, r2
 738 01c4 0B44     		add	r3, r3, r1
 739 01c6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 740 01ca 002B     		cmp	r3, #0
 741 01cc 10D1     		bne	.L17
 123:main.c        ****                         // Column right.
 124:main.c        ****                         adjlist[cnode][3] = i * xdim + j + 1;
 742              		.loc 1 124 0
 743 01ce 7B8B     		ldrh	r3, [r7, #26]
 744 01d0 7A8F     		ldrh	r2, [r7, #58]	@ movhi
 745 01d2 798D     		ldrh	r1, [r7, #42]	@ movhi
 746 01d4 01FB02F2 		mul	r2, r1, r2
 747 01d8 91B2     		uxth	r1, r2
 748 01da 3A8F     		ldrh	r2, [r7, #56]	@ movhi
 749 01dc 0A44     		add	r2, r2, r1
 750 01de 92B2     		uxth	r2, r2
 751 01e0 0132     		adds	r2, r2, #1
 752 01e2 92B2     		uxth	r2, r2
 753 01e4 11B2     		sxth	r1, r2
 754 01e6 FA69     		ldr	r2, [r7, #28]
 755 01e8 DB00     		lsls	r3, r3, #3
 756 01ea 1344     		add	r3, r3, r2
 757 01ec 0A46     		mov	r2, r1	@ movhi
 758 01ee DA80     		strh	r2, [r3, #6]	@ movhi
 759              	.L17:
 102:main.c        ****             // For loops go through rows, cols.
 760              		.loc 1 102 0 discriminator 2
 761 01f0 3B8F     		ldrh	r3, [r7, #56]
 762 01f2 0133     		adds	r3, r3, #1
 763 01f4 3B87     		strh	r3, [r7, #56]	@ movhi
 764              	.L16:
 102:main.c        ****             // For loops go through rows, cols.
 765              		.loc 1 102 0 is_stmt 0 discriminator 1
 766 01f6 3A8F     		ldrh	r2, [r7, #56]
 767 01f8 7B8D     		ldrh	r3, [r7, #42]
 768 01fa 9A42     		cmp	r2, r3
 769 01fc FFF458AF 		bcc	.L21
 770              	.LBE5:
 101:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
 771              		.loc 1 101 0 is_stmt 1 discriminator 2
 772 0200 7B8F     		ldrh	r3, [r7, #58]
 773 0202 0133     		adds	r3, r3, #1
 774 0204 7B87     		strh	r3, [r7, #58]	@ movhi
 775              	.L15:
 101:main.c        ****         for (uint16_t j = 0; j < xdim; j++) {
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 17


 776              		.loc 1 101 0 is_stmt 0 discriminator 1
 777 0206 7A8F     		ldrh	r2, [r7, #58]
 778 0208 3B8D     		ldrh	r3, [r7, #40]
 779 020a 9A42     		cmp	r2, r3
 780 020c FFF44DAF 		bcc	.L22
 781              	.LBE4:
 125:main.c        ****                     }
 126:main.c        ****                 }
 127:main.c        ****             }
 128:main.c        ****         }
 129:main.c        ****     }
 130:main.c        **** 
 131:main.c        ****     // Source x and y co-ordinates.
 132:main.c        ****     uint16_t sxcord = 1;
 782              		.loc 1 132 0 is_stmt 1
 783 0210 0123     		movs	r3, #1
 784 0212 3B83     		strh	r3, [r7, #24]	@ movhi
 133:main.c        ****     uint16_t sycord = 1;
 785              		.loc 1 133 0
 786 0214 0123     		movs	r3, #1
 787 0216 FB82     		strh	r3, [r7, #22]	@ movhi
 134:main.c        **** 
 135:main.c        ****     // Target x and y co-ordinates.
 136:main.c        ****     uint16_t txcord = 9;//5;
 788              		.loc 1 136 0
 789 0218 0923     		movs	r3, #9
 790 021a BB82     		strh	r3, [r7, #20]	@ movhi
 137:main.c        ****     uint16_t tycord = 9;//13;
 791              		.loc 1 137 0
 792 021c 0923     		movs	r3, #9
 793 021e 7B82     		strh	r3, [r7, #18]	@ movhi
 138:main.c        **** 
 139:main.c        ****     // The offset value - if we are indexing starting at 0, this should be 0, if we are indexing st
 140:main.c        ****     uint16_t offset = 0;
 794              		.loc 1 140 0
 795 0220 0023     		movs	r3, #0
 796 0222 3B82     		strh	r3, [r7, #16]	@ movhi
 141:main.c        **** 
 142:main.c        ****     // Calculation for the source and target co-ordinates.
 143:main.c        ****     uint16_t source = ((sycord - offset) * xdim + sxcord - offset);
 797              		.loc 1 143 0
 798 0224 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 799 0226 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 800 0228 D31A     		subs	r3, r2, r3
 801 022a 9BB2     		uxth	r3, r3
 802 022c 7A8D     		ldrh	r2, [r7, #42]	@ movhi
 803 022e 02FB03F3 		mul	r3, r2, r3
 804 0232 9AB2     		uxth	r2, r3
 805 0234 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 806 0236 1344     		add	r3, r3, r2
 807 0238 9AB2     		uxth	r2, r3
 808 023a 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 809 023c D31A     		subs	r3, r2, r3
 810 023e FB81     		strh	r3, [r7, #14]	@ movhi
 144:main.c        ****     uint16_t target = ((tycord - offset) * xdim + txcord - offset);
 811              		.loc 1 144 0
 812 0240 7A8A     		ldrh	r2, [r7, #18]	@ movhi
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 18


 813 0242 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 814 0244 D31A     		subs	r3, r2, r3
 815 0246 9BB2     		uxth	r3, r3
 816 0248 7A8D     		ldrh	r2, [r7, #42]	@ movhi
 817 024a 02FB03F3 		mul	r3, r2, r3
 818 024e 9AB2     		uxth	r2, r3
 819 0250 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 820 0252 1344     		add	r3, r3, r2
 821 0254 9AB2     		uxth	r2, r3
 822 0256 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 823 0258 D31A     		subs	r3, r2, r3
 824 025a BB81     		strh	r3, [r7, #12]	@ movhi
 145:main.c        ****     
 146:main.c        ****     uint16_t *finalPath = ASTAR(source, target, adjlist, xdim, ydim);
 825              		.loc 1 146 0
 826 025c FA69     		ldr	r2, [r7, #28]
 827 025e 7C8D     		ldrh	r4, [r7, #42]
 828 0260 B989     		ldrh	r1, [r7, #12]
 829 0262 F889     		ldrh	r0, [r7, #14]
 830 0264 3B8D     		ldrh	r3, [r7, #40]
 831 0266 0093     		str	r3, [sp]
 832 0268 2346     		mov	r3, r4
 833 026a FFF7FEFF 		bl	ASTAR
 834 026e B860     		str	r0, [r7, #8]
 147:main.c        ****     int8_t *instructionSet = decode(finalPath, adjlist, xdim, target);
 835              		.loc 1 147 0
 836 0270 F969     		ldr	r1, [r7, #28]
 837 0272 BB89     		ldrh	r3, [r7, #12]
 838 0274 7A8D     		ldrh	r2, [r7, #42]
 839 0276 B868     		ldr	r0, [r7, #8]
 840 0278 FFF7FEFF 		bl	decode
 841 027c 7860     		str	r0, [r7, #4]
 148:main.c        ****     
 149:main.c        ****     // Write the debugging led low.
 150:main.c        ****     led_Write(0);
 842              		.loc 1 150 0
 843 027e 0020     		movs	r0, #0
 844 0280 FFF7FEFF 		bl	led_Write
 151:main.c        ****     
 152:main.c        ****     // Enable global interrupts as well as start and enable the isr.
 153:main.c        ****     CyGlobalIntEnable;
 845              		.loc 1 153 0
 846              		.syntax unified
 847              	@ 153 "main.c" 1
 848 0284 62B6     		CPSIE   i
 849              	@ 0 "" 2
 154:main.c        ****     isr_eoc_1_StartEx(isr_eoc_1);
 850              		.loc 1 154 0
 851              		.thumb
 852              		.syntax unified
 853 0286 3248     		ldr	r0, .L69+4
 854 0288 FFF7FEFF 		bl	isr_eoc_1_StartEx
 155:main.c        ****     isr_timer_1_StartEx(isr_timer_1);
 855              		.loc 1 155 0
 856 028c 3148     		ldr	r0, .L69+8
 857 028e FFF7FEFF 		bl	isr_timer_1_StartEx
 156:main.c        ****     ADC_SAR_Seq_1_IRQ_Enable();
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 19


 858              		.loc 1 156 0
 859 0292 FFF7FEFF 		bl	ADC_SAR_Seq_1_IRQ_Enable
 157:main.c        ****     
 158:main.c        ****     // Init the decoders and related tools
 159:main.c        ****     decoderInit();
 860              		.loc 1 159 0
 861 0296 FFF7FEFF 		bl	decoderInit
 160:main.c        ****     
 161:main.c        ****     // Start the ADC and begin conversions (in free running mode so will continue to convert).
 162:main.c        ****     ADC_SAR_Seq_1_Start();
 862              		.loc 1 162 0
 863 029a FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 163:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 864              		.loc 1 163 0
 865 029e FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 866              	.LBB6:
 164:main.c        ****     
 165:main.c        ****     // Initialise sensor states.
 166:main.c        ****     for (int i = 0; i < 5; i++) {
 867              		.loc 1 166 0
 868 02a2 0023     		movs	r3, #0
 869 02a4 7B63     		str	r3, [r7, #52]
 870 02a6 07E0     		b	.L23
 871              	.L24:
 167:main.c        ****         sensor_state[i] = ON;
 872              		.loc 1 167 0 discriminator 3
 873 02a8 2B4A     		ldr	r2, .L69+12
 874 02aa 7B6B     		ldr	r3, [r7, #52]
 875 02ac 1344     		add	r3, r3, r2
 876 02ae 0122     		movs	r2, #1
 877 02b0 1A70     		strb	r2, [r3]
 166:main.c        ****         sensor_state[i] = ON;
 878              		.loc 1 166 0 discriminator 3
 879 02b2 7B6B     		ldr	r3, [r7, #52]
 880 02b4 0133     		adds	r3, r3, #1
 881 02b6 7B63     		str	r3, [r7, #52]
 882              	.L23:
 166:main.c        ****         sensor_state[i] = ON;
 883              		.loc 1 166 0 is_stmt 0 discriminator 1
 884 02b8 7B6B     		ldr	r3, [r7, #52]
 885 02ba 042B     		cmp	r3, #4
 886 02bc F4DD     		ble	.L24
 887              	.LBE6:
 168:main.c        ****     }
 169:main.c        ****     
 170:main.c        ****     PWM_1_Start();
 888              		.loc 1 170 0 is_stmt 1
 889 02be FFF7FEFF 		bl	PWM_1_Start
 171:main.c        ****     PWM_2_Start();
 890              		.loc 1 171 0
 891 02c2 FFF7FEFF 		bl	PWM_2_Start
 172:main.c        ****     stop();
 892              		.loc 1 172 0
 893 02c6 FFF7FEFF 		bl	stop
 173:main.c        ****     Timer_1_Start();
 894              		.loc 1 173 0
 895 02ca FFF7FEFF 		bl	Timer_1_Start
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 20


 174:main.c        ****     //turn_left();
 175:main.c        ****     //stop();
 176:main.c        ****     //turn_right();
 177:main.c        **** 
 178:main.c        ****     int8_t nextInstruction = instructionSet[instructionCursor];
 896              		.loc 1 178 0
 897 02ce 234B     		ldr	r3, .L69+16
 898 02d0 1B88     		ldrh	r3, [r3]	@ movhi
 899 02d2 9BB2     		uxth	r3, r3
 900 02d4 1A46     		mov	r2, r3
 901 02d6 7B68     		ldr	r3, [r7, #4]
 902 02d8 1344     		add	r3, r3, r2
 903 02da 1B78     		ldrb	r3, [r3]
 904 02dc 87F83330 		strb	r3, [r7, #51]
 905              	.L68:
 179:main.c        ****         
 180:main.c        ****     while(1) {
 181:main.c        ****         
 182:main.c        ****         // If the conversion result is ready, put it into a variable and convert it into millivolts
 183:main.c        ****         ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_WAIT_FOR_RESULT);
 906              		.loc 1 183 0
 907 02e0 0020     		movs	r0, #0
 908 02e2 FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 184:main.c        ****         ADCResult = ADC_SAR_Seq_1_GetResult16(channel);
 909              		.loc 1 184 0
 910 02e6 1E4B     		ldr	r3, .L69+20
 911 02e8 1B78     		ldrb	r3, [r3]
 912 02ea DBB2     		uxtb	r3, r3
 913 02ec 9BB2     		uxth	r3, r3
 914 02ee 1846     		mov	r0, r3
 915 02f0 FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 916 02f4 0346     		mov	r3, r0
 917 02f6 9AB2     		uxth	r2, r3
 918 02f8 1A4B     		ldr	r3, .L69+24
 919 02fa 1A80     		strh	r2, [r3]	@ movhi
 185:main.c        ****         milliVoltReading = ADC_SAR_Seq_1_CountsTo_mVolts(ADCResult);
 920              		.loc 1 185 0
 921 02fc 194B     		ldr	r3, .L69+24
 922 02fe 1B88     		ldrh	r3, [r3]
 923 0300 1BB2     		sxth	r3, r3
 924 0302 1846     		mov	r0, r3
 925 0304 FFF7FEFF 		bl	ADC_SAR_Seq_1_CountsTo_mVolts
 926 0308 0346     		mov	r3, r0
 927 030a 9AB2     		uxth	r2, r3
 928 030c 164B     		ldr	r3, .L69+28
 929 030e 1A80     		strh	r2, [r3]	@ movhi
 186:main.c        **** 
 187:main.c        ****         /* disabled uart code
 188:main.c        ****         char send[100];
 189:main.c        ****         sprintf(send,"%d\r\n",milliVoltReading);
 190:main.c        ****         USBUART_1_PutString(send);
 191:main.c        ****         
 192:main.c        ****         CyDelay(100);
 193:main.c        ****         */
 194:main.c        ****         
 195:main.c        ****         // If we read in a value higher than the current maximum for this period, replace the corre
 196:main.c        ****         if (milliVoltReading > maxValues[channel]) {
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 21


 930              		.loc 1 196 0
 931 0310 134B     		ldr	r3, .L69+20
 932 0312 1B78     		ldrb	r3, [r3]
 933 0314 DBB2     		uxtb	r3, r3
 934 0316 1A46     		mov	r2, r3
 935 0318 144B     		ldr	r3, .L69+32
 936 031a 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 937 031e 124B     		ldr	r3, .L69+28
 938 0320 1B88     		ldrh	r3, [r3]
 939 0322 9A42     		cmp	r2, r3
 940 0324 08D2     		bcs	.L25
 197:main.c        ****             maxValues[channel] = milliVoltReading;
 941              		.loc 1 197 0
 942 0326 0E4B     		ldr	r3, .L69+20
 943 0328 1B78     		ldrb	r3, [r3]
 944 032a DBB2     		uxtb	r3, r3
 945 032c 1A46     		mov	r2, r3
 946 032e 0E4B     		ldr	r3, .L69+28
 947 0330 1988     		ldrh	r1, [r3]
 948 0332 0E4B     		ldr	r3, .L69+32
 949 0334 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 950              	.L25:
 198:main.c        ****         }
 199:main.c        ****         
 200:main.c        ****         if (reset == 1) {
 951              		.loc 1 200 0
 952 0338 0D4B     		ldr	r3, .L69+36
 953 033a 1B78     		ldrb	r3, [r3]
 954 033c DBB2     		uxtb	r3, r3
 955 033e 012B     		cmp	r3, #1
 956 0340 40F06B81 		bne	.L26
 957              	.LBB7:
 201:main.c        **** 
 202:main.c        ****             // Fill the pastValues array with the new set of values.
 203:main.c        ****             for (int i = 0; i < 5; i++) {
 958              		.loc 1 203 0
 959 0344 0023     		movs	r3, #0
 960 0346 FB62     		str	r3, [r7, #44]
 961 0348 24E0     		b	.L27
 962              	.L70:
 963 034a 00BF     		.align	2
 964              	.L69:
 965 034c 00000000 		.word	array
 966 0350 00000000 		.word	isr_eoc_1
 967 0354 00000000 		.word	isr_timer_1
 968 0358 00000000 		.word	sensor_state
 969 035c 00000000 		.word	instructionCursor
 970 0360 00000000 		.word	channel
 971 0364 00000000 		.word	ADCResult
 972 0368 00000000 		.word	milliVoltReading
 973 036c 00000000 		.word	maxValues
 974 0370 00000000 		.word	reset
 975              	.L28:
 204:main.c        ****                 pastValues[i] = maxValues[i];
 976              		.loc 1 204 0 discriminator 3
 977 0374 934A     		ldr	r2, .L71
 978 0376 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 22


 979 0378 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 980 037c 924A     		ldr	r2, .L71+4
 981 037e FB6A     		ldr	r3, [r7, #44]
 982 0380 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 205:main.c        ****                 maxValues[i] = 0;
 983              		.loc 1 205 0 discriminator 3
 984 0384 8F4A     		ldr	r2, .L71
 985 0386 FB6A     		ldr	r3, [r7, #44]
 986 0388 0021     		movs	r1, #0
 987 038a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 203:main.c        ****                 pastValues[i] = maxValues[i];
 988              		.loc 1 203 0 discriminator 3
 989 038e FB6A     		ldr	r3, [r7, #44]
 990 0390 0133     		adds	r3, r3, #1
 991 0392 FB62     		str	r3, [r7, #44]
 992              	.L27:
 203:main.c        ****                 pastValues[i] = maxValues[i];
 993              		.loc 1 203 0 is_stmt 0 discriminator 1
 994 0394 FB6A     		ldr	r3, [r7, #44]
 995 0396 042B     		cmp	r3, #4
 996 0398 ECDD     		ble	.L28
 997              	.LBE7:
 206:main.c        ****             }
 207:main.c        **** 
 208:main.c        ****             if (nextInstruction == L) {
 998              		.loc 1 208 0 is_stmt 1
 999 039a 97F93330 		ldrsb	r3, [r7, #51]
 1000 039e 002B     		cmp	r3, #0
 1001 03a0 03D1     		bne	.L29
 209:main.c        ****                 // For left turning.
 210:main.c        ****                 disable_toggle = DISABLE_RIGHT_TURN;
 1002              		.loc 1 210 0
 1003 03a2 8A4B     		ldr	r3, .L71+8
 1004 03a4 0122     		movs	r2, #1
 1005 03a6 1A70     		strb	r2, [r3]
 1006 03a8 17E0     		b	.L30
 1007              	.L29:
 211:main.c        ****             } else if (nextInstruction == R) {
 1008              		.loc 1 211 0
 1009 03aa 97F93330 		ldrsb	r3, [r7, #51]
 1010 03ae 012B     		cmp	r3, #1
 1011 03b0 03D1     		bne	.L31
 212:main.c        ****                 // For right turning.
 213:main.c        ****                 disable_toggle = DISABLE_LEFT_TURN;
 1012              		.loc 1 213 0
 1013 03b2 864B     		ldr	r3, .L71+8
 1014 03b4 0022     		movs	r2, #0
 1015 03b6 1A70     		strb	r2, [r3]
 1016 03b8 0FE0     		b	.L30
 1017              	.L31:
 214:main.c        ****             } else if (nextInstruction == J) {
 1018              		.loc 1 214 0
 1019 03ba 97F93330 		ldrsb	r3, [r7, #51]
 1020 03be 022B     		cmp	r3, #2
 1021 03c0 03D1     		bne	.L32
 215:main.c        ****                 // For junctions.
 216:main.c        ****                 disable_toggle = DISABLE_ALL;
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 23


 1022              		.loc 1 216 0
 1023 03c2 824B     		ldr	r3, .L71+8
 1024 03c4 0222     		movs	r2, #2
 1025 03c6 1A70     		strb	r2, [r3]
 1026 03c8 07E0     		b	.L30
 1027              	.L32:
 217:main.c        ****             } else if (nextInstruction == NULLDIR) {
 1028              		.loc 1 217 0
 1029 03ca 97F93330 		ldrsb	r3, [r7, #51]
 1030 03ce B3F1FF3F 		cmp	r3, #-1
 1031 03d2 02D1     		bne	.L30
 218:main.c        ****                 // For uninitialised or reset.
 219:main.c        ****                 disable_toggle = DISABLE_NONE;
 1032              		.loc 1 219 0
 1033 03d4 7D4B     		ldr	r3, .L71+8
 1034 03d6 0322     		movs	r2, #3
 1035 03d8 1A70     		strb	r2, [r3]
 1036              	.L30:
 220:main.c        ****             }
 221:main.c        ****             
 222:main.c        ****             if (state == TURNING_ENABLE) {
 1037              		.loc 1 222 0
 1038 03da 7D4B     		ldr	r3, .L71+12
 1039 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 03de 052B     		cmp	r3, #5
 1041 03e0 1DD1     		bne	.L33
 223:main.c        ****                 // If we have passed the junction, return to the forward state.
 224:main.c        ****                 if (sensor_state[CL] == ON && sensor_state[CR] == ON) {
 1042              		.loc 1 224 0
 1043 03e2 7C4B     		ldr	r3, .L71+16
 1044 03e4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1045 03e6 012B     		cmp	r3, #1
 1046 03e8 16D1     		bne	.L34
 1047              		.loc 1 224 0 is_stmt 0 discriminator 1
 1048 03ea 7A4B     		ldr	r3, .L71+16
 1049 03ec DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1050 03ee 012B     		cmp	r3, #1
 1051 03f0 12D1     		bne	.L34
 225:main.c        ****                     // Go to the next movement instruction.
 226:main.c        ****                     instructionCursor++;
 1052              		.loc 1 226 0 is_stmt 1
 1053 03f2 794B     		ldr	r3, .L71+20
 1054 03f4 1B88     		ldrh	r3, [r3]	@ movhi
 1055 03f6 9BB2     		uxth	r3, r3
 1056 03f8 0133     		adds	r3, r3, #1
 1057 03fa 9AB2     		uxth	r2, r3
 1058 03fc 764B     		ldr	r3, .L71+20
 1059 03fe 1A80     		strh	r2, [r3]	@ movhi
 227:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 1060              		.loc 1 227 0
 1061 0400 754B     		ldr	r3, .L71+20
 1062 0402 1B88     		ldrh	r3, [r3]	@ movhi
 1063 0404 9BB2     		uxth	r3, r3
 1064 0406 1A46     		mov	r2, r3
 1065 0408 7B68     		ldr	r3, [r7, #4]
 1066 040a 1344     		add	r3, r3, r2
 1067 040c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 24


 1068 040e 87F83330 		strb	r3, [r7, #51]
 228:main.c        ****                     state = FORWARD;
 1069              		.loc 1 228 0
 1070 0412 6F4B     		ldr	r3, .L71+12
 1071 0414 0022     		movs	r2, #0
 1072 0416 1A70     		strb	r2, [r3]
 1073              	.L34:
 229:main.c        ****                 }
 230:main.c        ****                 move_forward();
 1074              		.loc 1 230 0
 1075 0418 FFF7FEFF 		bl	move_forward
 1076 041c 1AE1     		b	.L55
 1077              	.L33:
 231:main.c        ****             } else if (state == TURNING_LEFT) {
 1078              		.loc 1 231 0
 1079 041e 6C4B     		ldr	r3, .L71+12
 1080 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 0422 012B     		cmp	r3, #1
 1082 0424 09D1     		bne	.L36
 232:main.c        ****                 // Exit left if we have done (most of) the 90 degree turn.
 233:main.c        ****                 if (sensor_state[FL] == OFF) {
 1083              		.loc 1 233 0
 1084 0426 6B4B     		ldr	r3, .L71+16
 1085 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 042a 002B     		cmp	r3, #0
 1087 042c 02D1     		bne	.L37
 234:main.c        ****                     state = EXIT_LEFT;
 1088              		.loc 1 234 0
 1089 042e 684B     		ldr	r3, .L71+12
 1090 0430 0322     		movs	r2, #3
 1091 0432 1A70     		strb	r2, [r3]
 1092              	.L37:
 235:main.c        ****                 }
 236:main.c        ****                 turn_left_sharp();
 1093              		.loc 1 236 0
 1094 0434 FFF7FEFF 		bl	turn_left_sharp
 1095 0438 0CE1     		b	.L55
 1096              	.L36:
 237:main.c        ****             } else if (state == EXIT_LEFT) {
 1097              		.loc 1 237 0
 1098 043a 654B     		ldr	r3, .L71+12
 1099 043c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1100 043e 032B     		cmp	r3, #3
 1101 0440 23D1     		bne	.L38
 238:main.c        ****                 // Continue turning for a bit so that we don't just drive off the path.
 239:main.c        ****                 if (turn_count < 3) {
 1102              		.loc 1 239 0
 1103 0442 664B     		ldr	r3, .L71+24
 1104 0444 1B88     		ldrh	r3, [r3]
 1105 0446 022B     		cmp	r3, #2
 1106 0448 08D8     		bhi	.L39
 240:main.c        ****                     turn_left();
 1107              		.loc 1 240 0
 1108 044a FFF7FEFF 		bl	turn_left
 241:main.c        ****                     turn_count++;
 1109              		.loc 1 241 0
 1110 044e 634B     		ldr	r3, .L71+24
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 25


 1111 0450 1B88     		ldrh	r3, [r3]
 1112 0452 0133     		adds	r3, r3, #1
 1113 0454 9AB2     		uxth	r2, r3
 1114 0456 614B     		ldr	r3, .L71+24
 1115 0458 1A80     		strh	r2, [r3]	@ movhi
 1116 045a FBE0     		b	.L55
 1117              	.L39:
 242:main.c        ****                 } else {
 243:main.c        ****                     turn_count = 0;
 1118              		.loc 1 243 0
 1119 045c 5F4B     		ldr	r3, .L71+24
 1120 045e 0022     		movs	r2, #0
 1121 0460 1A80     		strh	r2, [r3]	@ movhi
 244:main.c        ****                     // Go to the next movement instruction.
 245:main.c        ****                     instructionCursor++;
 1122              		.loc 1 245 0
 1123 0462 5D4B     		ldr	r3, .L71+20
 1124 0464 1B88     		ldrh	r3, [r3]	@ movhi
 1125 0466 9BB2     		uxth	r3, r3
 1126 0468 0133     		adds	r3, r3, #1
 1127 046a 9AB2     		uxth	r2, r3
 1128 046c 5A4B     		ldr	r3, .L71+20
 1129 046e 1A80     		strh	r2, [r3]	@ movhi
 246:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 1130              		.loc 1 246 0
 1131 0470 594B     		ldr	r3, .L71+20
 1132 0472 1B88     		ldrh	r3, [r3]	@ movhi
 1133 0474 9BB2     		uxth	r3, r3
 1134 0476 1A46     		mov	r2, r3
 1135 0478 7B68     		ldr	r3, [r7, #4]
 1136 047a 1344     		add	r3, r3, r2
 1137 047c 1B78     		ldrb	r3, [r3]
 1138 047e 87F83330 		strb	r3, [r7, #51]
 247:main.c        ****                     state = FORWARD;
 1139              		.loc 1 247 0
 1140 0482 534B     		ldr	r3, .L71+12
 1141 0484 0022     		movs	r2, #0
 1142 0486 1A70     		strb	r2, [r3]
 1143 0488 E4E0     		b	.L55
 1144              	.L38:
 248:main.c        ****                 }
 249:main.c        ****             } else if (state == TURNING_RIGHT) {
 1145              		.loc 1 249 0
 1146 048a 514B     		ldr	r3, .L71+12
 1147 048c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1148 048e 022B     		cmp	r3, #2
 1149 0490 09D1     		bne	.L41
 250:main.c        ****                 // Exit right if we have done (most of) the 90 degree turn.
 251:main.c        ****                 if (sensor_state[FR] == OFF) {
 1150              		.loc 1 251 0
 1151 0492 504B     		ldr	r3, .L71+16
 1152 0494 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1153 0496 002B     		cmp	r3, #0
 1154 0498 02D1     		bne	.L42
 252:main.c        ****                     state = EXIT_RIGHT;
 1155              		.loc 1 252 0
 1156 049a 4D4B     		ldr	r3, .L71+12
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 26


 1157 049c 0422     		movs	r2, #4
 1158 049e 1A70     		strb	r2, [r3]
 1159              	.L42:
 253:main.c        ****                 }
 254:main.c        ****                 turn_right_sharp();
 1160              		.loc 1 254 0
 1161 04a0 FFF7FEFF 		bl	turn_right_sharp
 1162 04a4 D6E0     		b	.L55
 1163              	.L41:
 255:main.c        ****             } else if (state == EXIT_RIGHT) {
 1164              		.loc 1 255 0
 1165 04a6 4A4B     		ldr	r3, .L71+12
 1166 04a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 04aa 042B     		cmp	r3, #4
 1168 04ac 23D1     		bne	.L43
 256:main.c        ****                 // Continue turning for a bit so that we don't just drive off the path.
 257:main.c        ****                 if (turn_count < 3) {
 1169              		.loc 1 257 0
 1170 04ae 4B4B     		ldr	r3, .L71+24
 1171 04b0 1B88     		ldrh	r3, [r3]
 1172 04b2 022B     		cmp	r3, #2
 1173 04b4 08D8     		bhi	.L44
 258:main.c        ****                     turn_right();
 1174              		.loc 1 258 0
 1175 04b6 FFF7FEFF 		bl	turn_right
 259:main.c        ****                     turn_count++;
 1176              		.loc 1 259 0
 1177 04ba 484B     		ldr	r3, .L71+24
 1178 04bc 1B88     		ldrh	r3, [r3]
 1179 04be 0133     		adds	r3, r3, #1
 1180 04c0 9AB2     		uxth	r2, r3
 1181 04c2 464B     		ldr	r3, .L71+24
 1182 04c4 1A80     		strh	r2, [r3]	@ movhi
 1183 04c6 C5E0     		b	.L55
 1184              	.L44:
 260:main.c        ****                 } else {
 261:main.c        ****                     turn_count = 0;
 1185              		.loc 1 261 0
 1186 04c8 444B     		ldr	r3, .L71+24
 1187 04ca 0022     		movs	r2, #0
 1188 04cc 1A80     		strh	r2, [r3]	@ movhi
 262:main.c        ****                     // Go to the next movement instruction.
 263:main.c        ****                     instructionCursor++;
 1189              		.loc 1 263 0
 1190 04ce 424B     		ldr	r3, .L71+20
 1191 04d0 1B88     		ldrh	r3, [r3]	@ movhi
 1192 04d2 9BB2     		uxth	r3, r3
 1193 04d4 0133     		adds	r3, r3, #1
 1194 04d6 9AB2     		uxth	r2, r3
 1195 04d8 3F4B     		ldr	r3, .L71+20
 1196 04da 1A80     		strh	r2, [r3]	@ movhi
 264:main.c        ****                     nextInstruction = instructionSet[instructionCursor];
 1197              		.loc 1 264 0
 1198 04dc 3E4B     		ldr	r3, .L71+20
 1199 04de 1B88     		ldrh	r3, [r3]	@ movhi
 1200 04e0 9BB2     		uxth	r3, r3
 1201 04e2 1A46     		mov	r2, r3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 27


 1202 04e4 7B68     		ldr	r3, [r7, #4]
 1203 04e6 1344     		add	r3, r3, r2
 1204 04e8 1B78     		ldrb	r3, [r3]
 1205 04ea 87F83330 		strb	r3, [r7, #51]
 265:main.c        ****                     state = FORWARD;
 1206              		.loc 1 265 0
 1207 04ee 384B     		ldr	r3, .L71+12
 1208 04f0 0022     		movs	r2, #0
 1209 04f2 1A70     		strb	r2, [r3]
 1210 04f4 AEE0     		b	.L55
 1211              	.L43:
 266:main.c        ****                 }
 267:main.c        ****             } else if (state == FORWARD) {
 1212              		.loc 1 267 0
 1213 04f6 364B     		ldr	r3, .L71+12
 1214 04f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1215 04fa 002B     		cmp	r3, #0
 1216 04fc 40F08A80 		bne	.L46
 268:main.c        ****                 // Default state of forward movement.
 269:main.c        ****                 if (sensor_state[FL] == OFF && sensor_state[FR] == OFF && sensor_state[CL] == OFF &
 1217              		.loc 1 269 0
 1218 0500 344B     		ldr	r3, .L71+16
 1219 0502 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1220 0504 002B     		cmp	r3, #0
 1221 0506 13D1     		bne	.L47
 1222              		.loc 1 269 0 is_stmt 0 discriminator 1
 1223 0508 324B     		ldr	r3, .L71+16
 1224 050a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1225 050c 002B     		cmp	r3, #0
 1226 050e 0FD1     		bne	.L47
 1227              		.loc 1 269 0 discriminator 2
 1228 0510 304B     		ldr	r3, .L71+16
 1229 0512 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1230 0514 002B     		cmp	r3, #0
 1231 0516 0BD1     		bne	.L47
 1232              		.loc 1 269 0 discriminator 3
 1233 0518 2E4B     		ldr	r3, .L71+16
 1234 051a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1235 051c 002B     		cmp	r3, #0
 1236 051e 07D1     		bne	.L47
 1237              		.loc 1 269 0 discriminator 4
 1238 0520 2C4B     		ldr	r3, .L71+16
 1239 0522 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1240 0524 002B     		cmp	r3, #0
 1241 0526 03D1     		bne	.L47
 270:main.c        ****                     // If a shadow is hovered over the robot (all sensors), it will stop moving.
 271:main.c        ****                     state = STOPPED;
 1242              		.loc 1 271 0 is_stmt 1
 1243 0528 294B     		ldr	r3, .L71+12
 1244 052a 0622     		movs	r2, #6
 1245 052c 1A70     		strb	r2, [r3]
 1246 052e 91E0     		b	.L55
 1247              	.L47:
 272:main.c        ****                 } else if (sensor_state[FL] == OFF) {
 1248              		.loc 1 272 0
 1249 0530 284B     		ldr	r3, .L71+16
 1250 0532 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 28


 1251 0534 002B     		cmp	r3, #0
 1252 0536 02D1     		bne	.L49
 273:main.c        ****                     // Correct to the left.
 274:main.c        ****                     turn_left();
 1253              		.loc 1 274 0
 1254 0538 FFF7FEFF 		bl	turn_left
 1255 053c 8AE0     		b	.L55
 1256              	.L49:
 275:main.c        ****                 } else if (sensor_state[FR] == OFF) {
 1257              		.loc 1 275 0
 1258 053e 254B     		ldr	r3, .L71+16
 1259 0540 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1260 0542 002B     		cmp	r3, #0
 1261 0544 02D1     		bne	.L50
 276:main.c        ****                     // Correct to the right.
 277:main.c        ****                     turn_right();
 1262              		.loc 1 277 0
 1263 0546 FFF7FEFF 		bl	turn_right
 1264 054a 83E0     		b	.L55
 1265              	.L50:
 278:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && ((sensor_state[CL] =
 1266              		.loc 1 278 0
 1267 054c 214B     		ldr	r3, .L71+16
 1268 054e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1269 0550 012B     		cmp	r3, #1
 1270 0552 1DD1     		bne	.L51
 1271              		.loc 1 278 0 is_stmt 0 discriminator 1
 1272 0554 1F4B     		ldr	r3, .L71+16
 1273 0556 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1274 0558 012B     		cmp	r3, #1
 1275 055a 19D1     		bne	.L51
 1276              		.loc 1 278 0 discriminator 2
 1277 055c 1D4B     		ldr	r3, .L71+16
 1278 055e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1279 0560 012B     		cmp	r3, #1
 1280 0562 03D1     		bne	.L52
 1281              		.loc 1 278 0 discriminator 3
 1282 0564 1B4B     		ldr	r3, .L71+16
 1283 0566 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1284 0568 002B     		cmp	r3, #0
 1285 056a 07D0     		beq	.L53
 1286              	.L52:
 1287              		.loc 1 278 0 discriminator 6
 1288 056c 194B     		ldr	r3, .L71+16
 1289 056e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1290 0570 002B     		cmp	r3, #0
 1291 0572 0DD1     		bne	.L51
 1292              		.loc 1 278 0 discriminator 7
 1293 0574 174B     		ldr	r3, .L71+16
 1294 0576 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1295 0578 012B     		cmp	r3, #1
 1296 057a 09D1     		bne	.L51
 1297              	.L53:
 1298              		.loc 1 278 0 discriminator 8
 1299 057c 134B     		ldr	r3, .L71+8
 1300 057e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1301 0580 022B     		cmp	r3, #2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 29


 1302 0582 05D1     		bne	.L51
 279:main.c        ****                     // Pass through the junction.
 280:main.c        ****                     state = TURNING_ENABLE;
 1303              		.loc 1 280 0 is_stmt 1
 1304 0584 124B     		ldr	r3, .L71+12
 1305 0586 0522     		movs	r2, #5
 1306 0588 1A70     		strb	r2, [r3]
 281:main.c        ****                     move_forward();
 1307              		.loc 1 281 0
 1308 058a FFF7FEFF 		bl	move_forward
 1309 058e 61E0     		b	.L55
 1310              	.L51:
 282:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && sensor_state[CL] == 
 1311              		.loc 1 282 0
 1312 0590 104B     		ldr	r3, .L71+16
 1313 0592 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1314 0594 012B     		cmp	r3, #1
 1315 0596 23D1     		bne	.L54
 1316              		.loc 1 282 0 is_stmt 0 discriminator 1
 1317 0598 0E4B     		ldr	r3, .L71+16
 1318 059a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1319 059c 012B     		cmp	r3, #1
 1320 059e 1FD1     		bne	.L54
 1321              		.loc 1 282 0 discriminator 2
 1322 05a0 0C4B     		ldr	r3, .L71+16
 1323 05a2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1324 05a4 002B     		cmp	r3, #0
 1325 05a6 1BD1     		bne	.L54
 1326              		.loc 1 282 0 discriminator 3
 1327 05a8 0A4B     		ldr	r3, .L71+16
 1328 05aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1329 05ac 012B     		cmp	r3, #1
 1330 05ae 17D1     		bne	.L54
 1331              		.loc 1 282 0 discriminator 4
 1332 05b0 064B     		ldr	r3, .L71+8
 1333 05b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1334 05b4 002B     		cmp	r3, #0
 1335 05b6 13D0     		beq	.L54
 283:main.c        ****                     // Left turning.
 284:main.c        ****                     state = TURNING_LEFT;
 1336              		.loc 1 284 0 is_stmt 1
 1337 05b8 054B     		ldr	r3, .L71+12
 1338 05ba 0122     		movs	r2, #1
 1339 05bc 1A70     		strb	r2, [r3]
 285:main.c        ****                     turn_left();
 1340              		.loc 1 285 0
 1341 05be FFF7FEFF 		bl	turn_left
 1342 05c2 47E0     		b	.L55
 1343              	.L72:
 1344              		.align	2
 1345              	.L71:
 1346 05c4 00000000 		.word	maxValues
 1347 05c8 00000000 		.word	pastValues
 1348 05cc 00000000 		.word	disable_toggle
 1349 05d0 00000000 		.word	state
 1350 05d4 00000000 		.word	sensor_state
 1351 05d8 00000000 		.word	instructionCursor
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 30


 1352 05dc 00000000 		.word	turn_count
 1353              	.L54:
 286:main.c        ****                 } else if (sensor_state[FL] == ON && sensor_state[FR] == ON && sensor_state[CL] == 
 1354              		.loc 1 286 0
 1355 05e0 514B     		ldr	r3, .L73
 1356 05e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1357 05e4 012B     		cmp	r3, #1
 1358 05e6 35D1     		bne	.L55
 1359              		.loc 1 286 0 is_stmt 0 discriminator 1
 1360 05e8 4F4B     		ldr	r3, .L73
 1361 05ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1362 05ec 012B     		cmp	r3, #1
 1363 05ee 31D1     		bne	.L55
 1364              		.loc 1 286 0 discriminator 2
 1365 05f0 4D4B     		ldr	r3, .L73
 1366 05f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1367 05f4 012B     		cmp	r3, #1
 1368 05f6 2DD1     		bne	.L55
 1369              		.loc 1 286 0 discriminator 3
 1370 05f8 4B4B     		ldr	r3, .L73
 1371 05fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1372 05fc 002B     		cmp	r3, #0
 1373 05fe 29D1     		bne	.L55
 1374              		.loc 1 286 0 discriminator 4
 1375 0600 4A4B     		ldr	r3, .L73+4
 1376 0602 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1377 0604 012B     		cmp	r3, #1
 1378 0606 25D0     		beq	.L55
 287:main.c        ****                     // Right turning.
 288:main.c        ****                     state = TURNING_RIGHT;
 1379              		.loc 1 288 0 is_stmt 1
 1380 0608 494B     		ldr	r3, .L73+8
 1381 060a 0222     		movs	r2, #2
 1382 060c 1A70     		strb	r2, [r3]
 289:main.c        ****                     turn_right();
 1383              		.loc 1 289 0
 1384 060e FFF7FEFF 		bl	turn_right
 1385 0612 1FE0     		b	.L55
 1386              	.L46:
 290:main.c        ****                 } 
 291:main.c        ****                 } else {
 292:main.c        ****                     // If no other condition has been met, continue to move forward.
 293:main.c        ****                     move_forward();
 1387              		.loc 1 293 0
 1388 0614 FFF7FEFF 		bl	move_forward
 1389 0618 1CE0     		b	.L55
 1390              	.L26:
 294:main.c        ****                 }
 295:main.c        ****             } else if (state == STOPPED) {
 1391              		.loc 1 295 0
 1392 061a 454B     		ldr	r3, .L73+8
 1393 061c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1394 061e 062B     		cmp	r3, #6
 1395 0620 18D1     		bne	.L55
 296:main.c        ****                 // Stop moving.
 297:main.c        ****                 stop();
 1396              		.loc 1 297 0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 31


 1397 0622 FFF7FEFF 		bl	stop
 298:main.c        ****                 // If all the light sensors are on, start moving again.
 299:main.c        ****                 if (sensor_state[FL] == ON || sensor_state[FR] == ON || sensor_state[CL] == ON || s
 1398              		.loc 1 299 0
 1399 0626 404B     		ldr	r3, .L73
 1400 0628 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 062a 012B     		cmp	r3, #1
 1402 062c 0FD0     		beq	.L56
 1403              		.loc 1 299 0 is_stmt 0 discriminator 1
 1404 062e 3E4B     		ldr	r3, .L73
 1405 0630 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1406 0632 012B     		cmp	r3, #1
 1407 0634 0BD0     		beq	.L56
 1408              		.loc 1 299 0 discriminator 2
 1409 0636 3C4B     		ldr	r3, .L73
 1410 0638 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1411 063a 012B     		cmp	r3, #1
 1412 063c 07D0     		beq	.L56
 1413              		.loc 1 299 0 discriminator 3
 1414 063e 3A4B     		ldr	r3, .L73
 1415 0640 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1416 0642 012B     		cmp	r3, #1
 1417 0644 03D0     		beq	.L56
 1418              		.loc 1 299 0 discriminator 4
 1419 0646 384B     		ldr	r3, .L73
 1420 0648 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1421 064a 012B     		cmp	r3, #1
 1422 064c 02D1     		bne	.L55
 1423              	.L56:
 300:main.c        ****                     state = FORWARD;
 1424              		.loc 1 300 0 is_stmt 1
 1425 064e 384B     		ldr	r3, .L73+8
 1426 0650 0022     		movs	r2, #0
 1427 0652 1A70     		strb	r2, [r3]
 1428              	.L55:
 301:main.c        ****                 }
 302:main.c        ****             }
 303:main.c        ****             reset = 0;
 1429              		.loc 1 303 0
 1430 0654 374B     		ldr	r3, .L73+12
 1431 0656 0022     		movs	r2, #0
 1432 0658 1A70     		strb	r2, [r3]
 304:main.c        ****             
 305:main.c        ****              
 306:main.c        ****         
 307:main.c        ****         // If the milliVolt reading is above the required threshold, perform the requested operatio
 308:main.c        ****         if (pastValues[channel] >= 500) {
 1433              		.loc 1 308 0
 1434 065a 374B     		ldr	r3, .L73+16
 1435 065c 1B78     		ldrb	r3, [r3]
 1436 065e DBB2     		uxtb	r3, r3
 1437 0660 1A46     		mov	r2, r3
 1438 0662 364B     		ldr	r3, .L73+20
 1439 0664 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1440 0668 B3F5FA7F 		cmp	r3, #500
 1441 066c 2DD3     		bcc	.L57
 309:main.c        ****             // Change the position in the sensor_state array depending on the channel being read.
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 32


 310:main.c        ****             if (channel == 0) {
 1442              		.loc 1 310 0
 1443 066e 324B     		ldr	r3, .L73+16
 1444 0670 1B78     		ldrb	r3, [r3]
 1445 0672 DBB2     		uxtb	r3, r3
 1446 0674 002B     		cmp	r3, #0
 1447 0676 03D1     		bne	.L58
 311:main.c        ****                 sensor_state[FL] = ON;
 1448              		.loc 1 311 0
 1449 0678 2B4B     		ldr	r3, .L73
 1450 067a 0122     		movs	r2, #1
 1451 067c 1A70     		strb	r2, [r3]
 1452 067e 2FE6     		b	.L68
 1453              	.L58:
 312:main.c        ****             } else if (channel == 1) {
 1454              		.loc 1 312 0
 1455 0680 2D4B     		ldr	r3, .L73+16
 1456 0682 1B78     		ldrb	r3, [r3]
 1457 0684 DBB2     		uxtb	r3, r3
 1458 0686 012B     		cmp	r3, #1
 1459 0688 03D1     		bne	.L60
 313:main.c        ****                 sensor_state[FR] = ON;
 1460              		.loc 1 313 0
 1461 068a 274B     		ldr	r3, .L73
 1462 068c 0122     		movs	r2, #1
 1463 068e 5A70     		strb	r2, [r3, #1]
 1464 0690 26E6     		b	.L68
 1465              	.L60:
 314:main.c        ****             } else if (channel == 2) {
 1466              		.loc 1 314 0
 1467 0692 294B     		ldr	r3, .L73+16
 1468 0694 1B78     		ldrb	r3, [r3]
 1469 0696 DBB2     		uxtb	r3, r3
 1470 0698 022B     		cmp	r3, #2
 1471 069a 03D1     		bne	.L61
 315:main.c        ****                 sensor_state[CL] = ON;
 1472              		.loc 1 315 0
 1473 069c 224B     		ldr	r3, .L73
 1474 069e 0122     		movs	r2, #1
 1475 06a0 9A70     		strb	r2, [r3, #2]
 1476 06a2 1DE6     		b	.L68
 1477              	.L61:
 316:main.c        ****             } else if (channel == 3) {
 1478              		.loc 1 316 0
 1479 06a4 244B     		ldr	r3, .L73+16
 1480 06a6 1B78     		ldrb	r3, [r3]
 1481 06a8 DBB2     		uxtb	r3, r3
 1482 06aa 032B     		cmp	r3, #3
 1483 06ac 03D1     		bne	.L62
 317:main.c        ****                 sensor_state[CR] = ON;
 1484              		.loc 1 317 0
 1485 06ae 1E4B     		ldr	r3, .L73
 1486 06b0 0122     		movs	r2, #1
 1487 06b2 DA70     		strb	r2, [r3, #3]
 1488 06b4 14E6     		b	.L68
 1489              	.L62:
 318:main.c        ****             } else if (channel == 4) {
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 33


 1490              		.loc 1 318 0
 1491 06b6 204B     		ldr	r3, .L73+16
 1492 06b8 1B78     		ldrb	r3, [r3]
 1493 06ba DBB2     		uxtb	r3, r3
 1494 06bc 042B     		cmp	r3, #4
 1495 06be 7FF40FAE 		bne	.L68
 319:main.c        ****                 sensor_state[BC] = ON;
 1496              		.loc 1 319 0
 1497 06c2 194B     		ldr	r3, .L73
 1498 06c4 0122     		movs	r2, #1
 1499 06c6 1A71     		strb	r2, [r3, #4]
 1500 06c8 0AE6     		b	.L68
 1501              	.L57:
 320:main.c        ****             }
 321:main.c        ****         } else {
 322:main.c        ****             if (channel == 0) {
 1502              		.loc 1 322 0
 1503 06ca 1B4B     		ldr	r3, .L73+16
 1504 06cc 1B78     		ldrb	r3, [r3]
 1505 06ce DBB2     		uxtb	r3, r3
 1506 06d0 002B     		cmp	r3, #0
 1507 06d2 03D1     		bne	.L64
 323:main.c        ****                 sensor_state[FL] = OFF;
 1508              		.loc 1 323 0
 1509 06d4 144B     		ldr	r3, .L73
 1510 06d6 0022     		movs	r2, #0
 1511 06d8 1A70     		strb	r2, [r3]
 1512 06da 01E6     		b	.L68
 1513              	.L64:
 324:main.c        ****             } else if (channel == 1) {
 1514              		.loc 1 324 0
 1515 06dc 164B     		ldr	r3, .L73+16
 1516 06de 1B78     		ldrb	r3, [r3]
 1517 06e0 DBB2     		uxtb	r3, r3
 1518 06e2 012B     		cmp	r3, #1
 1519 06e4 03D1     		bne	.L65
 325:main.c        ****                 sensor_state[FR] = OFF;
 1520              		.loc 1 325 0
 1521 06e6 104B     		ldr	r3, .L73
 1522 06e8 0022     		movs	r2, #0
 1523 06ea 5A70     		strb	r2, [r3, #1]
 1524 06ec F8E5     		b	.L68
 1525              	.L65:
 326:main.c        ****             } else if (channel == 2) {
 1526              		.loc 1 326 0
 1527 06ee 124B     		ldr	r3, .L73+16
 1528 06f0 1B78     		ldrb	r3, [r3]
 1529 06f2 DBB2     		uxtb	r3, r3
 1530 06f4 022B     		cmp	r3, #2
 1531 06f6 03D1     		bne	.L66
 327:main.c        ****                 sensor_state[CL] = OFF;
 1532              		.loc 1 327 0
 1533 06f8 0B4B     		ldr	r3, .L73
 1534 06fa 0022     		movs	r2, #0
 1535 06fc 9A70     		strb	r2, [r3, #2]
 1536 06fe EFE5     		b	.L68
 1537              	.L66:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 34


 328:main.c        ****             } else if (channel == 3) {
 1538              		.loc 1 328 0
 1539 0700 0D4B     		ldr	r3, .L73+16
 1540 0702 1B78     		ldrb	r3, [r3]
 1541 0704 DBB2     		uxtb	r3, r3
 1542 0706 032B     		cmp	r3, #3
 1543 0708 03D1     		bne	.L67
 329:main.c        ****                 sensor_state[CR] = OFF;
 1544              		.loc 1 329 0
 1545 070a 074B     		ldr	r3, .L73
 1546 070c 0022     		movs	r2, #0
 1547 070e DA70     		strb	r2, [r3, #3]
 1548 0710 E6E5     		b	.L68
 1549              	.L67:
 330:main.c        ****             } else if (channel == 4) {
 1550              		.loc 1 330 0
 1551 0712 094B     		ldr	r3, .L73+16
 1552 0714 1B78     		ldrb	r3, [r3]
 1553 0716 DBB2     		uxtb	r3, r3
 1554 0718 042B     		cmp	r3, #4
 1555 071a 7FF4E1AD 		bne	.L68
 331:main.c        ****                 sensor_state[BC] = OFF;
 1556              		.loc 1 331 0
 1557 071e 024B     		ldr	r3, .L73
 1558 0720 0022     		movs	r2, #0
 1559 0722 1A71     		strb	r2, [r3, #4]
 332:main.c        ****             }
 333:main.c        ****         }
 334:main.c        ****                 
 335:main.c        ****     }
 1560              		.loc 1 335 0
 1561 0724 DCE5     		b	.L68
 1562              	.L74:
 1563 0726 00BF     		.align	2
 1564              	.L73:
 1565 0728 00000000 		.word	sensor_state
 1566 072c 00000000 		.word	disable_toggle
 1567 0730 00000000 		.word	state
 1568 0734 00000000 		.word	reset
 1569 0738 00000000 		.word	channel
 1570 073c 00000000 		.word	pastValues
 1571              		.cfi_endproc
 1572              	.LFE66:
 1573              		.size	main, .-main
 1574              		.text
 1575              	.Letext0:
 1576              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1577              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1578              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1579              		.file 5 "pathfinding.h"
 1580              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1581              		.file 7 "decoders.h"
 1582              		.file 8 "map.h"
 1583              		.section	.debug_info,"",%progbits
 1584              	.Ldebug_info0:
 1585 0000 88050000 		.4byte	0x588
 1586 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 35


 1587 0006 00000000 		.4byte	.Ldebug_abbrev0
 1588 000a 04       		.byte	0x4
 1589 000b 01       		.uleb128 0x1
 1590 000c 5B000000 		.4byte	.LASF77
 1591 0010 0C       		.byte	0xc
 1592 0011 1C030000 		.4byte	.LASF78
 1593 0015 C8010000 		.4byte	.LASF79
 1594 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1595 001d 00000000 		.4byte	0
 1596 0021 00000000 		.4byte	.Ldebug_line0
 1597 0025 02       		.uleb128 0x2
 1598 0026 C1020000 		.4byte	.LASF0
 1599 002a 02       		.byte	0x2
 1600 002b 1B       		.byte	0x1b
 1601 002c 30000000 		.4byte	0x30
 1602 0030 03       		.uleb128 0x3
 1603 0031 01       		.byte	0x1
 1604 0032 06       		.byte	0x6
 1605 0033 53020000 		.4byte	.LASF2
 1606 0037 02       		.uleb128 0x2
 1607 0038 A6010000 		.4byte	.LASF1
 1608 003c 02       		.byte	0x2
 1609 003d 1D       		.byte	0x1d
 1610 003e 42000000 		.4byte	0x42
 1611 0042 03       		.uleb128 0x3
 1612 0043 01       		.byte	0x1
 1613 0044 08       		.byte	0x8
 1614 0045 3F020000 		.4byte	.LASF3
 1615 0049 02       		.uleb128 0x2
 1616 004a 71030000 		.4byte	.LASF4
 1617 004e 02       		.byte	0x2
 1618 004f 29       		.byte	0x29
 1619 0050 54000000 		.4byte	0x54
 1620 0054 03       		.uleb128 0x3
 1621 0055 02       		.byte	0x2
 1622 0056 05       		.byte	0x5
 1623 0057 12010000 		.4byte	.LASF5
 1624 005b 02       		.uleb128 0x2
 1625 005c 00010000 		.4byte	.LASF6
 1626 0060 02       		.byte	0x2
 1627 0061 2B       		.byte	0x2b
 1628 0062 66000000 		.4byte	0x66
 1629 0066 03       		.uleb128 0x3
 1630 0067 02       		.byte	0x2
 1631 0068 07       		.byte	0x7
 1632 0069 9C020000 		.4byte	.LASF7
 1633 006d 02       		.uleb128 0x2
 1634 006e 67030000 		.4byte	.LASF8
 1635 0072 02       		.byte	0x2
 1636 0073 3F       		.byte	0x3f
 1637 0074 78000000 		.4byte	0x78
 1638 0078 03       		.uleb128 0x3
 1639 0079 04       		.byte	0x4
 1640 007a 05       		.byte	0x5
 1641 007b 96010000 		.4byte	.LASF9
 1642 007f 03       		.uleb128 0x3
 1643 0080 04       		.byte	0x4
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 36


 1644 0081 07       		.byte	0x7
 1645 0082 34030000 		.4byte	.LASF10
 1646 0086 03       		.uleb128 0x3
 1647 0087 08       		.byte	0x8
 1648 0088 05       		.byte	0x5
 1649 0089 79010000 		.4byte	.LASF11
 1650 008d 03       		.uleb128 0x3
 1651 008e 08       		.byte	0x8
 1652 008f 07       		.byte	0x7
 1653 0090 68020000 		.4byte	.LASF12
 1654 0094 04       		.uleb128 0x4
 1655 0095 04       		.byte	0x4
 1656 0096 05       		.byte	0x5
 1657 0097 696E7400 		.ascii	"int\000"
 1658 009b 03       		.uleb128 0x3
 1659 009c 04       		.byte	0x4
 1660 009d 07       		.byte	0x7
 1661 009e 7F020000 		.4byte	.LASF13
 1662 00a2 02       		.uleb128 0x2
 1663 00a3 1E000000 		.4byte	.LASF14
 1664 00a7 03       		.byte	0x3
 1665 00a8 14       		.byte	0x14
 1666 00a9 25000000 		.4byte	0x25
 1667 00ad 02       		.uleb128 0x2
 1668 00ae 29010000 		.4byte	.LASF15
 1669 00b2 03       		.byte	0x3
 1670 00b3 18       		.byte	0x18
 1671 00b4 37000000 		.4byte	0x37
 1672 00b8 02       		.uleb128 0x2
 1673 00b9 F2020000 		.4byte	.LASF16
 1674 00bd 03       		.byte	0x3
 1675 00be 20       		.byte	0x20
 1676 00bf 49000000 		.4byte	0x49
 1677 00c3 02       		.uleb128 0x2
 1678 00c4 8C020000 		.4byte	.LASF17
 1679 00c8 03       		.byte	0x3
 1680 00c9 24       		.byte	0x24
 1681 00ca 5B000000 		.4byte	0x5b
 1682 00ce 02       		.uleb128 0x2
 1683 00cf E0020000 		.4byte	.LASF18
 1684 00d3 03       		.byte	0x3
 1685 00d4 2C       		.byte	0x2c
 1686 00d5 6D000000 		.4byte	0x6d
 1687 00d9 05       		.uleb128 0x5
 1688 00da 40010000 		.4byte	.LASF19
 1689 00de 04       		.byte	0x4
 1690 00df E701     		.2byte	0x1e7
 1691 00e1 42000000 		.4byte	0x42
 1692 00e5 05       		.uleb128 0x5
 1693 00e6 22010000 		.4byte	.LASF20
 1694 00ea 04       		.byte	0x4
 1695 00eb E801     		.2byte	0x1e8
 1696 00ed 66000000 		.4byte	0x66
 1697 00f1 05       		.uleb128 0x5
 1698 00f2 15030000 		.4byte	.LASF21
 1699 00f6 04       		.byte	0x4
 1700 00f7 E901     		.2byte	0x1e9
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 37


 1701 00f9 7F000000 		.4byte	0x7f
 1702 00fd 03       		.uleb128 0x3
 1703 00fe 04       		.byte	0x4
 1704 00ff 04       		.byte	0x4
 1705 0100 5C010000 		.4byte	.LASF22
 1706 0104 03       		.uleb128 0x3
 1707 0105 08       		.byte	0x8
 1708 0106 04       		.byte	0x4
 1709 0107 90030000 		.4byte	.LASF23
 1710 010b 03       		.uleb128 0x3
 1711 010c 01       		.byte	0x1
 1712 010d 08       		.byte	0x8
 1713 010e D2020000 		.4byte	.LASF24
 1714 0112 06       		.uleb128 0x6
 1715 0113 D9000000 		.4byte	0xd9
 1716 0117 06       		.uleb128 0x6
 1717 0118 E5000000 		.4byte	0xe5
 1718 011c 03       		.uleb128 0x3
 1719 011d 08       		.byte	0x8
 1720 011e 04       		.byte	0x4
 1721 011f 2D020000 		.4byte	.LASF25
 1722 0123 03       		.uleb128 0x3
 1723 0124 04       		.byte	0x4
 1724 0125 07       		.byte	0x7
 1725 0126 52000000 		.4byte	.LASF26
 1726 012a 07       		.uleb128 0x7
 1727 012b 32000000 		.4byte	.LASF29
 1728 012f 04       		.byte	0x4
 1729 0130 05       		.byte	0x5
 1730 0131 1E       		.byte	0x1e
 1731 0132 4F010000 		.4byte	0x14f
 1732 0136 08       		.uleb128 0x8
 1733 0137 1C010000 		.4byte	.LASF27
 1734 013b 05       		.byte	0x5
 1735 013c 1F       		.byte	0x1f
 1736 013d B8000000 		.4byte	0xb8
 1737 0141 00       		.byte	0
 1738 0142 08       		.uleb128 0x8
 1739 0143 15000000 		.4byte	.LASF28
 1740 0147 05       		.byte	0x5
 1741 0148 20       		.byte	0x20
 1742 0149 C3000000 		.4byte	0xc3
 1743 014d 02       		.byte	0x2
 1744 014e 00       		.byte	0
 1745 014f 09       		.uleb128 0x9
 1746 0150 0F030000 		.4byte	.LASF30
 1747 0154 8004     		.2byte	0x480
 1748 0156 05       		.byte	0x5
 1749 0157 23       		.byte	0x23
 1750 0158 99010000 		.4byte	0x199
 1751 015c 08       		.uleb128 0x8
 1752 015d 39020000 		.4byte	.LASF31
 1753 0161 05       		.byte	0x5
 1754 0162 24       		.byte	0x24
 1755 0163 B8000000 		.4byte	0xb8
 1756 0167 00       		.byte	0
 1757 0168 0A       		.uleb128 0xa
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 38


 1758 0169 656E6400 		.ascii	"end\000"
 1759 016d 05       		.byte	0x5
 1760 016e 24       		.byte	0x24
 1761 016f B8000000 		.4byte	0xb8
 1762 0173 02       		.byte	0x2
 1763 0174 08       		.uleb128 0x8
 1764 0175 56030000 		.4byte	.LASF32
 1765 0179 05       		.byte	0x5
 1766 017a 24       		.byte	0x24
 1767 017b B8000000 		.4byte	0xb8
 1768 017f 04       		.byte	0x4
 1769 0180 08       		.uleb128 0x8
 1770 0181 5F020000 		.4byte	.LASF33
 1771 0185 05       		.byte	0x5
 1772 0186 25       		.byte	0x25
 1773 0187 9B000000 		.4byte	0x9b
 1774 018b 08       		.byte	0x8
 1775 018c 08       		.uleb128 0x8
 1776 018d 50030000 		.4byte	.LASF34
 1777 0191 05       		.byte	0x5
 1778 0192 26       		.byte	0x26
 1779 0193 99010000 		.4byte	0x199
 1780 0197 0C       		.byte	0xc
 1781 0198 00       		.byte	0
 1782 0199 0B       		.uleb128 0xb
 1783 019a 2A010000 		.4byte	0x12a
 1784 019e AA010000 		.4byte	0x1aa
 1785 01a2 0C       		.uleb128 0xc
 1786 01a3 23010000 		.4byte	0x123
 1787 01a7 1C01     		.2byte	0x11c
 1788 01a9 00       		.byte	0
 1789 01aa 07       		.uleb128 0x7
 1790 01ab 08030000 		.4byte	.LASF35
 1791 01af 06       		.byte	0x6
 1792 01b0 05       		.byte	0x5
 1793 01b1 29       		.byte	0x29
 1794 01b2 DB010000 		.4byte	0x1db
 1795 01b6 08       		.uleb128 0x8
 1796 01b7 7B030000 		.4byte	.LASF36
 1797 01bb 05       		.byte	0x5
 1798 01bc 2A       		.byte	0x2a
 1799 01bd B8000000 		.4byte	0xb8
 1800 01c1 00       		.byte	0
 1801 01c2 08       		.uleb128 0x8
 1802 01c3 D7020000 		.4byte	.LASF37
 1803 01c7 05       		.byte	0x5
 1804 01c8 2B       		.byte	0x2b
 1805 01c9 C3000000 		.4byte	0xc3
 1806 01cd 02       		.byte	0x2
 1807 01ce 08       		.uleb128 0x8
 1808 01cf 4D010000 		.4byte	.LASF38
 1809 01d3 05       		.byte	0x5
 1810 01d4 2C       		.byte	0x2c
 1811 01d5 DB010000 		.4byte	0x1db
 1812 01d9 04       		.byte	0x4
 1813 01da 00       		.byte	0
 1814 01db 03       		.uleb128 0x3
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 39


 1815 01dc 01       		.byte	0x1
 1816 01dd 02       		.byte	0x2
 1817 01de FA020000 		.4byte	.LASF39
 1818 01e2 0D       		.uleb128 0xd
 1819 01e3 86030000 		.4byte	.LASF40
 1820 01e7 01       		.byte	0x1
 1821 01e8 44       		.byte	0x44
 1822 01e9 00000000 		.4byte	.LFB64
 1823 01ed 30000000 		.4byte	.LFE64-.LFB64
 1824 01f1 01       		.uleb128 0x1
 1825 01f2 9C       		.byte	0x9c
 1826 01f3 0D       		.uleb128 0xd
 1827 01f4 B0010000 		.4byte	.LASF41
 1828 01f8 01       		.byte	0x1
 1829 01f9 4D       		.byte	0x4d
 1830 01fa 00000000 		.4byte	.LFB65
 1831 01fe 18000000 		.4byte	.LFE65-.LFB65
 1832 0202 01       		.uleb128 0x1
 1833 0203 9C       		.byte	0x9c
 1834 0204 0E       		.uleb128 0xe
 1835 0205 F6000000 		.4byte	.LASF80
 1836 0209 01       		.byte	0x1
 1837 020a 51       		.byte	0x51
 1838 020b 94000000 		.4byte	0x94
 1839 020f 00000000 		.4byte	.LFB66
 1840 0213 40070000 		.4byte	.LFE66-.LFB66
 1841 0217 01       		.uleb128 0x1
 1842 0218 9C       		.byte	0x9c
 1843 0219 89030000 		.4byte	0x389
 1844 021d 0F       		.uleb128 0xf
 1845 021e FB000000 		.4byte	.LASF42
 1846 0222 01       		.byte	0x1
 1847 0223 57       		.byte	0x57
 1848 0224 C3000000 		.4byte	0xc3
 1849 0228 02       		.uleb128 0x2
 1850 0229 91       		.byte	0x91
 1851 022a 52       		.sleb128 -46
 1852 022b 0F       		.uleb128 0xf
 1853 022c C3010000 		.4byte	.LASF43
 1854 0230 01       		.byte	0x1
 1855 0231 57       		.byte	0x57
 1856 0232 C3000000 		.4byte	0xc3
 1857 0236 02       		.uleb128 0x2
 1858 0237 91       		.byte	0x91
 1859 0238 50       		.sleb128 -48
 1860 0239 0F       		.uleb128 0xf
 1861 023a 80030000 		.4byte	.LASF44
 1862 023e 01       		.byte	0x1
 1863 023f 58       		.byte	0x58
 1864 0240 C3000000 		.4byte	0xc3
 1865 0244 02       		.uleb128 0x2
 1866 0245 91       		.byte	0x91
 1867 0246 4E       		.sleb128 -50
 1868 0247 0F       		.uleb128 0xf
 1869 0248 CA020000 		.4byte	.LASF45
 1870 024c 01       		.byte	0x1
 1871 024d 5B       		.byte	0x5b
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 40


 1872 024e 89030000 		.4byte	0x389
 1873 0252 03       		.uleb128 0x3
 1874 0253 91       		.byte	0x91
 1875 0254 44       		.sleb128 -60
 1876 0255 06       		.byte	0x6
 1877 0256 0F       		.uleb128 0xf
 1878 0257 4D020000 		.4byte	.LASF46
 1879 025b 01       		.byte	0x1
 1880 025c 61       		.byte	0x61
 1881 025d C3000000 		.4byte	0xc3
 1882 0261 02       		.uleb128 0x2
 1883 0262 91       		.byte	0x91
 1884 0263 42       		.sleb128 -62
 1885 0264 0F       		.uleb128 0xf
 1886 0265 46010000 		.4byte	.LASF47
 1887 0269 01       		.byte	0x1
 1888 026a 84       		.byte	0x84
 1889 026b C3000000 		.4byte	0xc3
 1890 026f 02       		.uleb128 0x2
 1891 0270 91       		.byte	0x91
 1892 0271 40       		.sleb128 -64
 1893 0272 0F       		.uleb128 0xf
 1894 0273 95020000 		.4byte	.LASF48
 1895 0277 01       		.byte	0x1
 1896 0278 85       		.byte	0x85
 1897 0279 C3000000 		.4byte	0xc3
 1898 027d 03       		.uleb128 0x3
 1899 027e 91       		.byte	0x91
 1900 027f BE7F     		.sleb128 -66
 1901 0281 0F       		.uleb128 0xf
 1902 0282 0B010000 		.4byte	.LASF49
 1903 0286 01       		.byte	0x1
 1904 0287 88       		.byte	0x88
 1905 0288 C3000000 		.4byte	0xc3
 1906 028c 03       		.uleb128 0x3
 1907 028d 91       		.byte	0x91
 1908 028e BC7F     		.sleb128 -68
 1909 0290 0F       		.uleb128 0xf
 1910 0291 4B000000 		.4byte	.LASF50
 1911 0295 01       		.byte	0x1
 1912 0296 89       		.byte	0x89
 1913 0297 C3000000 		.4byte	0xc3
 1914 029b 03       		.uleb128 0x3
 1915 029c 91       		.byte	0x91
 1916 029d BA7F     		.sleb128 -70
 1917 029f 0F       		.uleb128 0xf
 1918 02a0 9F010000 		.4byte	.LASF51
 1919 02a4 01       		.byte	0x1
 1920 02a5 8C       		.byte	0x8c
 1921 02a6 C3000000 		.4byte	0xc3
 1922 02aa 03       		.uleb128 0x3
 1923 02ab 91       		.byte	0x91
 1924 02ac B87F     		.sleb128 -72
 1925 02ae 0F       		.uleb128 0xf
 1926 02af BC010000 		.4byte	.LASF52
 1927 02b3 01       		.byte	0x1
 1928 02b4 8F       		.byte	0x8f
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 41


 1929 02b5 C3000000 		.4byte	0xc3
 1930 02b9 03       		.uleb128 0x3
 1931 02ba 91       		.byte	0x91
 1932 02bb B67F     		.sleb128 -74
 1933 02bd 0F       		.uleb128 0xf
 1934 02be 2B000000 		.4byte	.LASF53
 1935 02c2 01       		.byte	0x1
 1936 02c3 90       		.byte	0x90
 1937 02c4 C3000000 		.4byte	0xc3
 1938 02c8 03       		.uleb128 0x3
 1939 02c9 91       		.byte	0x91
 1940 02ca B47F     		.sleb128 -76
 1941 02cc 0F       		.uleb128 0xf
 1942 02cd 0B000000 		.4byte	.LASF54
 1943 02d1 01       		.byte	0x1
 1944 02d2 92       		.byte	0x92
 1945 02d3 A2030000 		.4byte	0x3a2
 1946 02d7 03       		.uleb128 0x3
 1947 02d8 91       		.byte	0x91
 1948 02d9 B07F     		.sleb128 -80
 1949 02db 0F       		.uleb128 0xf
 1950 02dc 87010000 		.4byte	.LASF55
 1951 02e0 01       		.byte	0x1
 1952 02e1 93       		.byte	0x93
 1953 02e2 A8030000 		.4byte	0x3a8
 1954 02e6 03       		.uleb128 0x3
 1955 02e7 91       		.byte	0x91
 1956 02e8 AC7F     		.sleb128 -84
 1957 02ea 0F       		.uleb128 0xf
 1958 02eb 69010000 		.4byte	.LASF56
 1959 02ef 01       		.byte	0x1
 1960 02f0 B2       		.byte	0xb2
 1961 02f1 A2000000 		.4byte	0xa2
 1962 02f5 02       		.uleb128 0x2
 1963 02f6 91       		.byte	0x91
 1964 02f7 5B       		.sleb128 -37
 1965 02f8 10       		.uleb128 0x10
 1966 02f9 62000000 		.4byte	.LBB2
 1967 02fd 42000000 		.4byte	.LBE2-.LBB2
 1968 0301 28030000 		.4byte	0x328
 1969 0305 11       		.uleb128 0x11
 1970 0306 6900     		.ascii	"i\000"
 1971 0308 01       		.byte	0x1
 1972 0309 5C       		.byte	0x5c
 1973 030a C3000000 		.4byte	0xc3
 1974 030e 02       		.uleb128 0x2
 1975 030f 91       		.byte	0x91
 1976 0310 66       		.sleb128 -26
 1977 0311 12       		.uleb128 0x12
 1978 0312 68000000 		.4byte	.LBB3
 1979 0316 2E000000 		.4byte	.LBE3-.LBB3
 1980 031a 11       		.uleb128 0x11
 1981 031b 6A00     		.ascii	"j\000"
 1982 031d 01       		.byte	0x1
 1983 031e 5D       		.byte	0x5d
 1984 031f AD000000 		.4byte	0xad
 1985 0323 02       		.uleb128 0x2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 42


 1986 0324 91       		.byte	0x91
 1987 0325 65       		.sleb128 -27
 1988 0326 00       		.byte	0
 1989 0327 00       		.byte	0
 1990 0328 10       		.uleb128 0x10
 1991 0329 A4000000 		.4byte	.LBB4
 1992 032d 6C010000 		.4byte	.LBE4-.LBB4
 1993 0331 58030000 		.4byte	0x358
 1994 0335 11       		.uleb128 0x11
 1995 0336 6900     		.ascii	"i\000"
 1996 0338 01       		.byte	0x1
 1997 0339 65       		.byte	0x65
 1998 033a C3000000 		.4byte	0xc3
 1999 033e 02       		.uleb128 0x2
 2000 033f 91       		.byte	0x91
 2001 0340 62       		.sleb128 -30
 2002 0341 12       		.uleb128 0x12
 2003 0342 AA000000 		.4byte	.LBB5
 2004 0346 56010000 		.4byte	.LBE5-.LBB5
 2005 034a 11       		.uleb128 0x11
 2006 034b 6A00     		.ascii	"j\000"
 2007 034d 01       		.byte	0x1
 2008 034e 66       		.byte	0x66
 2009 034f C3000000 		.4byte	0xc3
 2010 0353 02       		.uleb128 0x2
 2011 0354 91       		.byte	0x91
 2012 0355 60       		.sleb128 -32
 2013 0356 00       		.byte	0
 2014 0357 00       		.byte	0
 2015 0358 10       		.uleb128 0x10
 2016 0359 A2020000 		.4byte	.LBB6
 2017 035d 1C000000 		.4byte	.LBE6-.LBB6
 2018 0361 72030000 		.4byte	0x372
 2019 0365 11       		.uleb128 0x11
 2020 0366 6900     		.ascii	"i\000"
 2021 0368 01       		.byte	0x1
 2022 0369 A6       		.byte	0xa6
 2023 036a 94000000 		.4byte	0x94
 2024 036e 02       		.uleb128 0x2
 2025 036f 91       		.byte	0x91
 2026 0370 5C       		.sleb128 -36
 2027 0371 00       		.byte	0
 2028 0372 12       		.uleb128 0x12
 2029 0373 44030000 		.4byte	.LBB7
 2030 0377 56000000 		.4byte	.LBE7-.LBB7
 2031 037b 11       		.uleb128 0x11
 2032 037c 6900     		.ascii	"i\000"
 2033 037e 01       		.byte	0x1
 2034 037f CB       		.byte	0xcb
 2035 0380 94000000 		.4byte	0x94
 2036 0384 02       		.uleb128 0x2
 2037 0385 91       		.byte	0x91
 2038 0386 54       		.sleb128 -44
 2039 0387 00       		.byte	0
 2040 0388 00       		.byte	0
 2041 0389 0B       		.uleb128 0xb
 2042 038a B8000000 		.4byte	0xb8
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 43


 2043 038e A2030000 		.4byte	0x3a2
 2044 0392 13       		.uleb128 0x13
 2045 0393 23010000 		.4byte	0x123
 2046 0397 03       		.uleb128 0x3
 2047 0398 91       		.byte	0x91
 2048 0399 48       		.sleb128 -56
 2049 039a 06       		.byte	0x6
 2050 039b 14       		.uleb128 0x14
 2051 039c 23010000 		.4byte	0x123
 2052 03a0 03       		.byte	0x3
 2053 03a1 00       		.byte	0
 2054 03a2 15       		.uleb128 0x15
 2055 03a3 04       		.byte	0x4
 2056 03a4 C3000000 		.4byte	0xc3
 2057 03a8 15       		.uleb128 0x15
 2058 03a9 04       		.byte	0x4
 2059 03aa A2000000 		.4byte	0xa2
 2060 03ae 16       		.uleb128 0x16
 2061 03af AC030000 		.4byte	.LASF57
 2062 03b3 06       		.byte	0x6
 2063 03b4 1207     		.2byte	0x712
 2064 03b6 BA030000 		.4byte	0x3ba
 2065 03ba 06       		.uleb128 0x6
 2066 03bb CE000000 		.4byte	0xce
 2067 03bf 17       		.uleb128 0x17
 2068 03c0 97030000 		.4byte	.LASF58
 2069 03c4 07       		.byte	0x7
 2070 03c5 0B       		.byte	0xb
 2071 03c6 12010000 		.4byte	0x112
 2072 03ca 05       		.uleb128 0x5
 2073 03cb 03       		.byte	0x3
 2074 03cc 00000000 		.4byte	compareValueL
 2075 03d0 17       		.uleb128 0x17
 2076 03d1 B9030000 		.4byte	.LASF59
 2077 03d5 07       		.byte	0x7
 2078 03d6 0C       		.byte	0xc
 2079 03d7 12010000 		.4byte	0x112
 2080 03db 05       		.uleb128 0x5
 2081 03dc 03       		.byte	0x3
 2082 03dd 00000000 		.4byte	compareValueR
 2083 03e1 17       		.uleb128 0x17
 2084 03e2 E8020000 		.4byte	.LASF60
 2085 03e6 07       		.byte	0x7
 2086 03e7 0E       		.byte	0xe
 2087 03e8 D9000000 		.4byte	0xd9
 2088 03ec 05       		.uleb128 0x5
 2089 03ed 03       		.byte	0x3
 2090 03ee 00000000 		.4byte	goalSpeed
 2091 03f2 17       		.uleb128 0x17
 2092 03f3 A5030000 		.4byte	.LASF61
 2093 03f7 07       		.byte	0x7
 2094 03f8 10       		.byte	0x10
 2095 03f9 17010000 		.4byte	0x117
 2096 03fd 05       		.uleb128 0x5
 2097 03fe 03       		.byte	0x3
 2098 03ff 00000000 		.4byte	countL
 2099 0403 17       		.uleb128 0x17
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 44


 2100 0404 C7030000 		.4byte	.LASF62
 2101 0408 07       		.byte	0x7
 2102 0409 11       		.byte	0x11
 2103 040a 17010000 		.4byte	0x117
 2104 040e 05       		.uleb128 0x5
 2105 040f 03       		.byte	0x3
 2106 0410 00000000 		.4byte	countR
 2107 0414 17       		.uleb128 0x17
 2108 0415 55010000 		.4byte	.LASF63
 2109 0419 07       		.byte	0x7
 2110 041a 12       		.byte	0x12
 2111 041b 17010000 		.4byte	0x117
 2112 041f 05       		.uleb128 0x5
 2113 0420 03       		.byte	0x3
 2114 0421 00000000 		.4byte	speedL
 2115 0425 17       		.uleb128 0x17
 2116 0426 62010000 		.4byte	.LASF64
 2117 042a 07       		.byte	0x7
 2118 042b 13       		.byte	0x13
 2119 042c 17010000 		.4byte	0x117
 2120 0430 05       		.uleb128 0x5
 2121 0431 03       		.byte	0x3
 2122 0432 00000000 		.4byte	speedR
 2123 0436 17       		.uleb128 0x17
 2124 0437 32000000 		.4byte	.LASF29
 2125 043b 05       		.byte	0x5
 2126 043c 21       		.byte	0x21
 2127 043d 2A010000 		.4byte	0x12a
 2128 0441 05       		.uleb128 0x5
 2129 0442 03       		.byte	0x3
 2130 0443 00000000 		.4byte	PriorityVertex
 2131 0447 17       		.uleb128 0x17
 2132 0448 0F030000 		.4byte	.LASF30
 2133 044c 05       		.byte	0x5
 2134 044d 27       		.byte	0x27
 2135 044e 4F010000 		.4byte	0x14f
 2136 0452 05       		.uleb128 0x5
 2137 0453 03       		.byte	0x3
 2138 0454 00000000 		.4byte	Queue
 2139 0458 17       		.uleb128 0x17
 2140 0459 08030000 		.4byte	.LASF35
 2141 045d 05       		.byte	0x5
 2142 045e 2D       		.byte	0x2d
 2143 045f AA010000 		.4byte	0x1aa
 2144 0463 05       		.uleb128 0x5
 2145 0464 03       		.byte	0x3
 2146 0465 00000000 		.4byte	Vertex
 2147 0469 0B       		.uleb128 0xb
 2148 046a 94000000 		.4byte	0x94
 2149 046e 7F040000 		.4byte	0x47f
 2150 0472 14       		.uleb128 0x14
 2151 0473 23010000 		.4byte	0x123
 2152 0477 0E       		.byte	0xe
 2153 0478 14       		.uleb128 0x14
 2154 0479 23010000 		.4byte	0x123
 2155 047d 12       		.byte	0x12
 2156 047e 00       		.byte	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 45


 2157 047f 17       		.uleb128 0x17
 2158 0480 50030000 		.4byte	.LASF34
 2159 0484 08       		.byte	0x8
 2160 0485 01       		.byte	0x1
 2161 0486 69040000 		.4byte	0x469
 2162 048a 05       		.uleb128 0x5
 2163 048b 03       		.byte	0x3
 2164 048c 00000000 		.4byte	array
 2165 0490 17       		.uleb128 0x17
 2166 0491 00030000 		.4byte	.LASF65
 2167 0495 01       		.byte	0x1
 2168 0496 31       		.byte	0x31
 2169 0497 12010000 		.4byte	0x112
 2170 049b 05       		.uleb128 0x5
 2171 049c 03       		.byte	0x3
 2172 049d 00000000 		.4byte	channel
 2173 04a1 17       		.uleb128 0x17
 2174 04a2 AF020000 		.4byte	.LASF66
 2175 04a6 01       		.byte	0x1
 2176 04a7 32       		.byte	0x32
 2177 04a8 17010000 		.4byte	0x117
 2178 04ac 05       		.uleb128 0x5
 2179 04ad 03       		.byte	0x3
 2180 04ae 00000000 		.4byte	instructionCursor
 2181 04b2 18       		.uleb128 0x18
 2182 04b3 6900     		.ascii	"i\000"
 2183 04b5 01       		.byte	0x1
 2184 04b6 35       		.byte	0x35
 2185 04b7 F1000000 		.4byte	0xf1
 2186 04bb 05       		.uleb128 0x5
 2187 04bc 03       		.byte	0x3
 2188 04bd 00000000 		.4byte	i
 2189 04c1 17       		.uleb128 0x17
 2190 04c2 00000000 		.4byte	.LASF67
 2191 04c6 01       		.byte	0x1
 2192 04c7 36       		.byte	0x36
 2193 04c8 E5000000 		.4byte	0xe5
 2194 04cc 05       		.uleb128 0x5
 2195 04cd 03       		.byte	0x3
 2196 04ce 00000000 		.4byte	turn_count
 2197 04d2 17       		.uleb128 0x17
 2198 04d3 31010000 		.4byte	.LASF68
 2199 04d7 01       		.byte	0x1
 2200 04d8 38       		.byte	0x38
 2201 04d9 D9000000 		.4byte	0xd9
 2202 04dd 05       		.uleb128 0x5
 2203 04de 03       		.byte	0x3
 2204 04df 00000000 		.4byte	disable_toggle
 2205 04e3 17       		.uleb128 0x17
 2206 04e4 41000000 		.4byte	.LASF69
 2207 04e8 01       		.byte	0x1
 2208 04e9 3A       		.byte	0x3a
 2209 04ea E5000000 		.4byte	0xe5
 2210 04ee 05       		.uleb128 0x5
 2211 04ef 03       		.byte	0x3
 2212 04f0 00000000 		.4byte	ADCResult
 2213 04f4 17       		.uleb128 0x17
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 46


 2214 04f5 23030000 		.4byte	.LASF70
 2215 04f9 01       		.byte	0x1
 2216 04fa 3B       		.byte	0x3b
 2217 04fb E5000000 		.4byte	0xe5
 2218 04ff 05       		.uleb128 0x5
 2219 0500 03       		.byte	0x3
 2220 0501 00000000 		.4byte	milliVoltReading
 2221 0505 17       		.uleb128 0x17
 2222 0506 25000000 		.4byte	.LASF71
 2223 050a 01       		.byte	0x1
 2224 050b 3C       		.byte	0x3c
 2225 050c D9000000 		.4byte	0xd9
 2226 0510 05       		.uleb128 0x5
 2227 0511 03       		.byte	0x3
 2228 0512 00000000 		.4byte	state
 2229 0516 17       		.uleb128 0x17
 2230 0517 61030000 		.4byte	.LASF72
 2231 051b 01       		.byte	0x1
 2232 051c 3D       		.byte	0x3d
 2233 051d 12010000 		.4byte	0x112
 2234 0521 05       		.uleb128 0x5
 2235 0522 03       		.byte	0x3
 2236 0523 00000000 		.4byte	reset
 2237 0527 0B       		.uleb128 0xb
 2238 0528 E5000000 		.4byte	0xe5
 2239 052c 37050000 		.4byte	0x537
 2240 0530 14       		.uleb128 0x14
 2241 0531 23010000 		.4byte	0x123
 2242 0535 04       		.byte	0x4
 2243 0536 00       		.byte	0
 2244 0537 17       		.uleb128 0x17
 2245 0538 46030000 		.4byte	.LASF73
 2246 053c 01       		.byte	0x1
 2247 053d 3F       		.byte	0x3f
 2248 053e 27050000 		.4byte	0x527
 2249 0542 05       		.uleb128 0x5
 2250 0543 03       		.byte	0x3
 2251 0544 00000000 		.4byte	maxValues
 2252 0548 17       		.uleb128 0x17
 2253 0549 CE030000 		.4byte	.LASF74
 2254 054d 01       		.byte	0x1
 2255 054e 40       		.byte	0x40
 2256 054f 27050000 		.4byte	0x527
 2257 0553 05       		.uleb128 0x5
 2258 0554 03       		.byte	0x3
 2259 0555 00000000 		.4byte	pastValues
 2260 0559 17       		.uleb128 0x17
 2261 055a 5B030000 		.4byte	.LASF75
 2262 055e 01       		.byte	0x1
 2263 055f 41       		.byte	0x41
 2264 0560 17010000 		.4byte	0x117
 2265 0564 05       		.uleb128 0x5
 2266 0565 03       		.byte	0x3
 2267 0566 00000000 		.4byte	count
 2268 056a 0B       		.uleb128 0xb
 2269 056b D9000000 		.4byte	0xd9
 2270 056f 7A050000 		.4byte	0x57a
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 47


 2271 0573 14       		.uleb128 0x14
 2272 0574 23010000 		.4byte	0x123
 2273 0578 04       		.byte	0x4
 2274 0579 00       		.byte	0
 2275 057a 17       		.uleb128 0x17
 2276 057b E9000000 		.4byte	.LASF76
 2277 057f 01       		.byte	0x1
 2278 0580 42       		.byte	0x42
 2279 0581 6A050000 		.4byte	0x56a
 2280 0585 05       		.uleb128 0x5
 2281 0586 03       		.byte	0x3
 2282 0587 00000000 		.4byte	sensor_state
 2283 058b 00       		.byte	0
 2284              		.section	.debug_abbrev,"",%progbits
 2285              	.Ldebug_abbrev0:
 2286 0000 01       		.uleb128 0x1
 2287 0001 11       		.uleb128 0x11
 2288 0002 01       		.byte	0x1
 2289 0003 25       		.uleb128 0x25
 2290 0004 0E       		.uleb128 0xe
 2291 0005 13       		.uleb128 0x13
 2292 0006 0B       		.uleb128 0xb
 2293 0007 03       		.uleb128 0x3
 2294 0008 0E       		.uleb128 0xe
 2295 0009 1B       		.uleb128 0x1b
 2296 000a 0E       		.uleb128 0xe
 2297 000b 55       		.uleb128 0x55
 2298 000c 17       		.uleb128 0x17
 2299 000d 11       		.uleb128 0x11
 2300 000e 01       		.uleb128 0x1
 2301 000f 10       		.uleb128 0x10
 2302 0010 17       		.uleb128 0x17
 2303 0011 00       		.byte	0
 2304 0012 00       		.byte	0
 2305 0013 02       		.uleb128 0x2
 2306 0014 16       		.uleb128 0x16
 2307 0015 00       		.byte	0
 2308 0016 03       		.uleb128 0x3
 2309 0017 0E       		.uleb128 0xe
 2310 0018 3A       		.uleb128 0x3a
 2311 0019 0B       		.uleb128 0xb
 2312 001a 3B       		.uleb128 0x3b
 2313 001b 0B       		.uleb128 0xb
 2314 001c 49       		.uleb128 0x49
 2315 001d 13       		.uleb128 0x13
 2316 001e 00       		.byte	0
 2317 001f 00       		.byte	0
 2318 0020 03       		.uleb128 0x3
 2319 0021 24       		.uleb128 0x24
 2320 0022 00       		.byte	0
 2321 0023 0B       		.uleb128 0xb
 2322 0024 0B       		.uleb128 0xb
 2323 0025 3E       		.uleb128 0x3e
 2324 0026 0B       		.uleb128 0xb
 2325 0027 03       		.uleb128 0x3
 2326 0028 0E       		.uleb128 0xe
 2327 0029 00       		.byte	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 48


 2328 002a 00       		.byte	0
 2329 002b 04       		.uleb128 0x4
 2330 002c 24       		.uleb128 0x24
 2331 002d 00       		.byte	0
 2332 002e 0B       		.uleb128 0xb
 2333 002f 0B       		.uleb128 0xb
 2334 0030 3E       		.uleb128 0x3e
 2335 0031 0B       		.uleb128 0xb
 2336 0032 03       		.uleb128 0x3
 2337 0033 08       		.uleb128 0x8
 2338 0034 00       		.byte	0
 2339 0035 00       		.byte	0
 2340 0036 05       		.uleb128 0x5
 2341 0037 16       		.uleb128 0x16
 2342 0038 00       		.byte	0
 2343 0039 03       		.uleb128 0x3
 2344 003a 0E       		.uleb128 0xe
 2345 003b 3A       		.uleb128 0x3a
 2346 003c 0B       		.uleb128 0xb
 2347 003d 3B       		.uleb128 0x3b
 2348 003e 05       		.uleb128 0x5
 2349 003f 49       		.uleb128 0x49
 2350 0040 13       		.uleb128 0x13
 2351 0041 00       		.byte	0
 2352 0042 00       		.byte	0
 2353 0043 06       		.uleb128 0x6
 2354 0044 35       		.uleb128 0x35
 2355 0045 00       		.byte	0
 2356 0046 49       		.uleb128 0x49
 2357 0047 13       		.uleb128 0x13
 2358 0048 00       		.byte	0
 2359 0049 00       		.byte	0
 2360 004a 07       		.uleb128 0x7
 2361 004b 13       		.uleb128 0x13
 2362 004c 01       		.byte	0x1
 2363 004d 03       		.uleb128 0x3
 2364 004e 0E       		.uleb128 0xe
 2365 004f 0B       		.uleb128 0xb
 2366 0050 0B       		.uleb128 0xb
 2367 0051 3A       		.uleb128 0x3a
 2368 0052 0B       		.uleb128 0xb
 2369 0053 3B       		.uleb128 0x3b
 2370 0054 0B       		.uleb128 0xb
 2371 0055 01       		.uleb128 0x1
 2372 0056 13       		.uleb128 0x13
 2373 0057 00       		.byte	0
 2374 0058 00       		.byte	0
 2375 0059 08       		.uleb128 0x8
 2376 005a 0D       		.uleb128 0xd
 2377 005b 00       		.byte	0
 2378 005c 03       		.uleb128 0x3
 2379 005d 0E       		.uleb128 0xe
 2380 005e 3A       		.uleb128 0x3a
 2381 005f 0B       		.uleb128 0xb
 2382 0060 3B       		.uleb128 0x3b
 2383 0061 0B       		.uleb128 0xb
 2384 0062 49       		.uleb128 0x49
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 49


 2385 0063 13       		.uleb128 0x13
 2386 0064 38       		.uleb128 0x38
 2387 0065 0B       		.uleb128 0xb
 2388 0066 00       		.byte	0
 2389 0067 00       		.byte	0
 2390 0068 09       		.uleb128 0x9
 2391 0069 13       		.uleb128 0x13
 2392 006a 01       		.byte	0x1
 2393 006b 03       		.uleb128 0x3
 2394 006c 0E       		.uleb128 0xe
 2395 006d 0B       		.uleb128 0xb
 2396 006e 05       		.uleb128 0x5
 2397 006f 3A       		.uleb128 0x3a
 2398 0070 0B       		.uleb128 0xb
 2399 0071 3B       		.uleb128 0x3b
 2400 0072 0B       		.uleb128 0xb
 2401 0073 01       		.uleb128 0x1
 2402 0074 13       		.uleb128 0x13
 2403 0075 00       		.byte	0
 2404 0076 00       		.byte	0
 2405 0077 0A       		.uleb128 0xa
 2406 0078 0D       		.uleb128 0xd
 2407 0079 00       		.byte	0
 2408 007a 03       		.uleb128 0x3
 2409 007b 08       		.uleb128 0x8
 2410 007c 3A       		.uleb128 0x3a
 2411 007d 0B       		.uleb128 0xb
 2412 007e 3B       		.uleb128 0x3b
 2413 007f 0B       		.uleb128 0xb
 2414 0080 49       		.uleb128 0x49
 2415 0081 13       		.uleb128 0x13
 2416 0082 38       		.uleb128 0x38
 2417 0083 0B       		.uleb128 0xb
 2418 0084 00       		.byte	0
 2419 0085 00       		.byte	0
 2420 0086 0B       		.uleb128 0xb
 2421 0087 01       		.uleb128 0x1
 2422 0088 01       		.byte	0x1
 2423 0089 49       		.uleb128 0x49
 2424 008a 13       		.uleb128 0x13
 2425 008b 01       		.uleb128 0x1
 2426 008c 13       		.uleb128 0x13
 2427 008d 00       		.byte	0
 2428 008e 00       		.byte	0
 2429 008f 0C       		.uleb128 0xc
 2430 0090 21       		.uleb128 0x21
 2431 0091 00       		.byte	0
 2432 0092 49       		.uleb128 0x49
 2433 0093 13       		.uleb128 0x13
 2434 0094 2F       		.uleb128 0x2f
 2435 0095 05       		.uleb128 0x5
 2436 0096 00       		.byte	0
 2437 0097 00       		.byte	0
 2438 0098 0D       		.uleb128 0xd
 2439 0099 2E       		.uleb128 0x2e
 2440 009a 00       		.byte	0
 2441 009b 3F       		.uleb128 0x3f
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 50


 2442 009c 19       		.uleb128 0x19
 2443 009d 03       		.uleb128 0x3
 2444 009e 0E       		.uleb128 0xe
 2445 009f 3A       		.uleb128 0x3a
 2446 00a0 0B       		.uleb128 0xb
 2447 00a1 3B       		.uleb128 0x3b
 2448 00a2 0B       		.uleb128 0xb
 2449 00a3 27       		.uleb128 0x27
 2450 00a4 19       		.uleb128 0x19
 2451 00a5 11       		.uleb128 0x11
 2452 00a6 01       		.uleb128 0x1
 2453 00a7 12       		.uleb128 0x12
 2454 00a8 06       		.uleb128 0x6
 2455 00a9 40       		.uleb128 0x40
 2456 00aa 18       		.uleb128 0x18
 2457 00ab 9742     		.uleb128 0x2117
 2458 00ad 19       		.uleb128 0x19
 2459 00ae 00       		.byte	0
 2460 00af 00       		.byte	0
 2461 00b0 0E       		.uleb128 0xe
 2462 00b1 2E       		.uleb128 0x2e
 2463 00b2 01       		.byte	0x1
 2464 00b3 3F       		.uleb128 0x3f
 2465 00b4 19       		.uleb128 0x19
 2466 00b5 03       		.uleb128 0x3
 2467 00b6 0E       		.uleb128 0xe
 2468 00b7 3A       		.uleb128 0x3a
 2469 00b8 0B       		.uleb128 0xb
 2470 00b9 3B       		.uleb128 0x3b
 2471 00ba 0B       		.uleb128 0xb
 2472 00bb 27       		.uleb128 0x27
 2473 00bc 19       		.uleb128 0x19
 2474 00bd 49       		.uleb128 0x49
 2475 00be 13       		.uleb128 0x13
 2476 00bf 11       		.uleb128 0x11
 2477 00c0 01       		.uleb128 0x1
 2478 00c1 12       		.uleb128 0x12
 2479 00c2 06       		.uleb128 0x6
 2480 00c3 40       		.uleb128 0x40
 2481 00c4 18       		.uleb128 0x18
 2482 00c5 9642     		.uleb128 0x2116
 2483 00c7 19       		.uleb128 0x19
 2484 00c8 01       		.uleb128 0x1
 2485 00c9 13       		.uleb128 0x13
 2486 00ca 00       		.byte	0
 2487 00cb 00       		.byte	0
 2488 00cc 0F       		.uleb128 0xf
 2489 00cd 34       		.uleb128 0x34
 2490 00ce 00       		.byte	0
 2491 00cf 03       		.uleb128 0x3
 2492 00d0 0E       		.uleb128 0xe
 2493 00d1 3A       		.uleb128 0x3a
 2494 00d2 0B       		.uleb128 0xb
 2495 00d3 3B       		.uleb128 0x3b
 2496 00d4 0B       		.uleb128 0xb
 2497 00d5 49       		.uleb128 0x49
 2498 00d6 13       		.uleb128 0x13
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 51


 2499 00d7 02       		.uleb128 0x2
 2500 00d8 18       		.uleb128 0x18
 2501 00d9 00       		.byte	0
 2502 00da 00       		.byte	0
 2503 00db 10       		.uleb128 0x10
 2504 00dc 0B       		.uleb128 0xb
 2505 00dd 01       		.byte	0x1
 2506 00de 11       		.uleb128 0x11
 2507 00df 01       		.uleb128 0x1
 2508 00e0 12       		.uleb128 0x12
 2509 00e1 06       		.uleb128 0x6
 2510 00e2 01       		.uleb128 0x1
 2511 00e3 13       		.uleb128 0x13
 2512 00e4 00       		.byte	0
 2513 00e5 00       		.byte	0
 2514 00e6 11       		.uleb128 0x11
 2515 00e7 34       		.uleb128 0x34
 2516 00e8 00       		.byte	0
 2517 00e9 03       		.uleb128 0x3
 2518 00ea 08       		.uleb128 0x8
 2519 00eb 3A       		.uleb128 0x3a
 2520 00ec 0B       		.uleb128 0xb
 2521 00ed 3B       		.uleb128 0x3b
 2522 00ee 0B       		.uleb128 0xb
 2523 00ef 49       		.uleb128 0x49
 2524 00f0 13       		.uleb128 0x13
 2525 00f1 02       		.uleb128 0x2
 2526 00f2 18       		.uleb128 0x18
 2527 00f3 00       		.byte	0
 2528 00f4 00       		.byte	0
 2529 00f5 12       		.uleb128 0x12
 2530 00f6 0B       		.uleb128 0xb
 2531 00f7 01       		.byte	0x1
 2532 00f8 11       		.uleb128 0x11
 2533 00f9 01       		.uleb128 0x1
 2534 00fa 12       		.uleb128 0x12
 2535 00fb 06       		.uleb128 0x6
 2536 00fc 00       		.byte	0
 2537 00fd 00       		.byte	0
 2538 00fe 13       		.uleb128 0x13
 2539 00ff 21       		.uleb128 0x21
 2540 0100 00       		.byte	0
 2541 0101 49       		.uleb128 0x49
 2542 0102 13       		.uleb128 0x13
 2543 0103 2F       		.uleb128 0x2f
 2544 0104 18       		.uleb128 0x18
 2545 0105 00       		.byte	0
 2546 0106 00       		.byte	0
 2547 0107 14       		.uleb128 0x14
 2548 0108 21       		.uleb128 0x21
 2549 0109 00       		.byte	0
 2550 010a 49       		.uleb128 0x49
 2551 010b 13       		.uleb128 0x13
 2552 010c 2F       		.uleb128 0x2f
 2553 010d 0B       		.uleb128 0xb
 2554 010e 00       		.byte	0
 2555 010f 00       		.byte	0
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 52


 2556 0110 15       		.uleb128 0x15
 2557 0111 0F       		.uleb128 0xf
 2558 0112 00       		.byte	0
 2559 0113 0B       		.uleb128 0xb
 2560 0114 0B       		.uleb128 0xb
 2561 0115 49       		.uleb128 0x49
 2562 0116 13       		.uleb128 0x13
 2563 0117 00       		.byte	0
 2564 0118 00       		.byte	0
 2565 0119 16       		.uleb128 0x16
 2566 011a 34       		.uleb128 0x34
 2567 011b 00       		.byte	0
 2568 011c 03       		.uleb128 0x3
 2569 011d 0E       		.uleb128 0xe
 2570 011e 3A       		.uleb128 0x3a
 2571 011f 0B       		.uleb128 0xb
 2572 0120 3B       		.uleb128 0x3b
 2573 0121 05       		.uleb128 0x5
 2574 0122 49       		.uleb128 0x49
 2575 0123 13       		.uleb128 0x13
 2576 0124 3F       		.uleb128 0x3f
 2577 0125 19       		.uleb128 0x19
 2578 0126 3C       		.uleb128 0x3c
 2579 0127 19       		.uleb128 0x19
 2580 0128 00       		.byte	0
 2581 0129 00       		.byte	0
 2582 012a 17       		.uleb128 0x17
 2583 012b 34       		.uleb128 0x34
 2584 012c 00       		.byte	0
 2585 012d 03       		.uleb128 0x3
 2586 012e 0E       		.uleb128 0xe
 2587 012f 3A       		.uleb128 0x3a
 2588 0130 0B       		.uleb128 0xb
 2589 0131 3B       		.uleb128 0x3b
 2590 0132 0B       		.uleb128 0xb
 2591 0133 49       		.uleb128 0x49
 2592 0134 13       		.uleb128 0x13
 2593 0135 3F       		.uleb128 0x3f
 2594 0136 19       		.uleb128 0x19
 2595 0137 02       		.uleb128 0x2
 2596 0138 18       		.uleb128 0x18
 2597 0139 00       		.byte	0
 2598 013a 00       		.byte	0
 2599 013b 18       		.uleb128 0x18
 2600 013c 34       		.uleb128 0x34
 2601 013d 00       		.byte	0
 2602 013e 03       		.uleb128 0x3
 2603 013f 08       		.uleb128 0x8
 2604 0140 3A       		.uleb128 0x3a
 2605 0141 0B       		.uleb128 0xb
 2606 0142 3B       		.uleb128 0x3b
 2607 0143 0B       		.uleb128 0xb
 2608 0144 49       		.uleb128 0x49
 2609 0145 13       		.uleb128 0x13
 2610 0146 3F       		.uleb128 0x3f
 2611 0147 19       		.uleb128 0x19
 2612 0148 02       		.uleb128 0x2
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 53


 2613 0149 18       		.uleb128 0x18
 2614 014a 00       		.byte	0
 2615 014b 00       		.byte	0
 2616 014c 00       		.byte	0
 2617              		.section	.debug_aranges,"",%progbits
 2618 0000 2C000000 		.4byte	0x2c
 2619 0004 0200     		.2byte	0x2
 2620 0006 00000000 		.4byte	.Ldebug_info0
 2621 000a 04       		.byte	0x4
 2622 000b 00       		.byte	0
 2623 000c 0000     		.2byte	0
 2624 000e 0000     		.2byte	0
 2625 0010 00000000 		.4byte	.LFB64
 2626 0014 30000000 		.4byte	.LFE64-.LFB64
 2627 0018 00000000 		.4byte	.LFB65
 2628 001c 18000000 		.4byte	.LFE65-.LFB65
 2629 0020 00000000 		.4byte	.LFB66
 2630 0024 40070000 		.4byte	.LFE66-.LFB66
 2631 0028 00000000 		.4byte	0
 2632 002c 00000000 		.4byte	0
 2633              		.section	.debug_ranges,"",%progbits
 2634              	.Ldebug_ranges0:
 2635 0000 00000000 		.4byte	.LFB64
 2636 0004 30000000 		.4byte	.LFE64
 2637 0008 00000000 		.4byte	.LFB65
 2638 000c 18000000 		.4byte	.LFE65
 2639 0010 00000000 		.4byte	.LFB66
 2640 0014 40070000 		.4byte	.LFE66
 2641 0018 00000000 		.4byte	0
 2642 001c 00000000 		.4byte	0
 2643              		.section	.debug_line,"",%progbits
 2644              	.Ldebug_line0:
 2645 0000 20030000 		.section	.debug_str,"MS",%progbits,1
 2645      02007401 
 2645      00000201 
 2645      FB0E0D00 
 2645      01010101 
 2646              	.LASF67:
 2647 0000 7475726E 		.ascii	"turn_count\000"
 2647      5F636F75 
 2647      6E7400
 2648              	.LASF54:
 2649 000b 66696E61 		.ascii	"finalPath\000"
 2649      6C506174 
 2649      6800
 2650              	.LASF28:
 2651 0015 7072696F 		.ascii	"priority\000"
 2651      72697479 
 2651      00
 2652              	.LASF14:
 2653 001e 696E7438 		.ascii	"int8_t\000"
 2653      5F7400
 2654              	.LASF71:
 2655 0025 73746174 		.ascii	"state\000"
 2655      6500
 2656              	.LASF53:
 2657 002b 74617267 		.ascii	"target\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 54


 2657      657400
 2658              	.LASF29:
 2659 0032 5072696F 		.ascii	"PriorityVertex\000"
 2659      72697479 
 2659      56657274 
 2659      657800
 2660              	.LASF69:
 2661 0041 41444352 		.ascii	"ADCResult\000"
 2661      6573756C 
 2661      7400
 2662              	.LASF50:
 2663 004b 7479636F 		.ascii	"tycord\000"
 2663      726400
 2664              	.LASF26:
 2665 0052 73697A65 		.ascii	"sizetype\000"
 2665      74797065 
 2665      00
 2666              	.LASF77:
 2667 005b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2667      43313120 
 2667      352E342E 
 2667      31203230 
 2667      31363036 
 2668 008e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2668      20726576 
 2668      6973696F 
 2668      6E203233 
 2668      37373135 
 2669 00c1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2669      66756E63 
 2669      74696F6E 
 2669      2D736563 
 2669      74696F6E 
 2670              	.LASF76:
 2671 00e9 73656E73 		.ascii	"sensor_state\000"
 2671      6F725F73 
 2671      74617465 
 2671      00
 2672              	.LASF80:
 2673 00f6 6D61696E 		.ascii	"main\000"
 2673      00
 2674              	.LASF42:
 2675 00fb 7864696D 		.ascii	"xdim\000"
 2675      00
 2676              	.LASF6:
 2677 0100 5F5F7569 		.ascii	"__uint16_t\000"
 2677      6E743136 
 2677      5F7400
 2678              	.LASF49:
 2679 010b 7478636F 		.ascii	"txcord\000"
 2679      726400
 2680              	.LASF5:
 2681 0112 73686F72 		.ascii	"short int\000"
 2681      7420696E 
 2681      7400
 2682              	.LASF27:
 2683 011c 76616C75 		.ascii	"value\000"
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 55


 2683      6500
 2684              	.LASF20:
 2685 0122 75696E74 		.ascii	"uint16\000"
 2685      313600
 2686              	.LASF15:
 2687 0129 75696E74 		.ascii	"uint8_t\000"
 2687      385F7400 
 2688              	.LASF68:
 2689 0131 64697361 		.ascii	"disable_toggle\000"
 2689      626C655F 
 2689      746F6767 
 2689      6C6500
 2690              	.LASF19:
 2691 0140 75696E74 		.ascii	"uint8\000"
 2691      3800
 2692              	.LASF47:
 2693 0146 7378636F 		.ascii	"sxcord\000"
 2693      726400
 2694              	.LASF38:
 2695 014d 76697369 		.ascii	"visited\000"
 2695      74656400 
 2696              	.LASF63:
 2697 0155 73706565 		.ascii	"speedL\000"
 2697      644C00
 2698              	.LASF22:
 2699 015c 666C6F61 		.ascii	"float\000"
 2699      7400
 2700              	.LASF64:
 2701 0162 73706565 		.ascii	"speedR\000"
 2701      645200
 2702              	.LASF56:
 2703 0169 6E657874 		.ascii	"nextInstruction\000"
 2703      496E7374 
 2703      72756374 
 2703      696F6E00 
 2704              	.LASF11:
 2705 0179 6C6F6E67 		.ascii	"long long int\000"
 2705      206C6F6E 
 2705      6720696E 
 2705      7400
 2706              	.LASF55:
 2707 0187 696E7374 		.ascii	"instructionSet\000"
 2707      72756374 
 2707      696F6E53 
 2707      657400
 2708              	.LASF9:
 2709 0196 6C6F6E67 		.ascii	"long int\000"
 2709      20696E74 
 2709      00
 2710              	.LASF51:
 2711 019f 6F666673 		.ascii	"offset\000"
 2711      657400
 2712              	.LASF1:
 2713 01a6 5F5F7569 		.ascii	"__uint8_t\000"
 2713      6E74385F 
 2713      7400
 2714              	.LASF41:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 56


 2715 01b0 6973725F 		.ascii	"isr_timer_1\000"
 2715      74696D65 
 2715      725F3100 
 2716              	.LASF52:
 2717 01bc 736F7572 		.ascii	"source\000"
 2717      636500
 2718              	.LASF43:
 2719 01c3 7964696D 		.ascii	"ydim\000"
 2719      00
 2720              	.LASF79:
 2721 01c8 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Documents\\GitHub"
 2721      6C65732E 
 2721      6175636B 
 2721      6C616E64 
 2721      2E61632E 
 2722 01f6 5C70726F 		.ascii	"\\project-project-group-7\\301 Project\\Sensor Test"
 2722      6A656374 
 2722      2D70726F 
 2722      6A656374 
 2722      2D67726F 
 2723 0226 2E637964 		.ascii	".cydsn\000"
 2723      736E00
 2724              	.LASF25:
 2725 022d 6C6F6E67 		.ascii	"long double\000"
 2725      20646F75 
 2725      626C6500 
 2726              	.LASF31:
 2727 0239 73746172 		.ascii	"start\000"
 2727      7400
 2728              	.LASF3:
 2729 023f 756E7369 		.ascii	"unsigned char\000"
 2729      676E6564 
 2729      20636861 
 2729      7200
 2730              	.LASF46:
 2731 024d 636E6F64 		.ascii	"cnode\000"
 2731      6500
 2732              	.LASF2:
 2733 0253 7369676E 		.ascii	"signed char\000"
 2733      65642063 
 2733      68617200 
 2734              	.LASF33:
 2735 025f 63617061 		.ascii	"capacity\000"
 2735      63697479 
 2735      00
 2736              	.LASF12:
 2737 0268 6C6F6E67 		.ascii	"long long unsigned int\000"
 2737      206C6F6E 
 2737      6720756E 
 2737      7369676E 
 2737      65642069 
 2738              	.LASF13:
 2739 027f 756E7369 		.ascii	"unsigned int\000"
 2739      676E6564 
 2739      20696E74 
 2739      00
 2740              	.LASF17:
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 57


 2741 028c 75696E74 		.ascii	"uint16_t\000"
 2741      31365F74 
 2741      00
 2742              	.LASF48:
 2743 0295 7379636F 		.ascii	"sycord\000"
 2743      726400
 2744              	.LASF7:
 2745 029c 73686F72 		.ascii	"short unsigned int\000"
 2745      7420756E 
 2745      7369676E 
 2745      65642069 
 2745      6E7400
 2746              	.LASF66:
 2747 02af 696E7374 		.ascii	"instructionCursor\000"
 2747      72756374 
 2747      696F6E43 
 2747      7572736F 
 2747      7200
 2748              	.LASF0:
 2749 02c1 5F5F696E 		.ascii	"__int8_t\000"
 2749      74385F74 
 2749      00
 2750              	.LASF45:
 2751 02ca 61646A6C 		.ascii	"adjlist\000"
 2751      69737400 
 2752              	.LASF24:
 2753 02d2 63686172 		.ascii	"char\000"
 2753      00
 2754              	.LASF37:
 2755 02d7 64697374 		.ascii	"distance\000"
 2755      616E6365 
 2755      00
 2756              	.LASF18:
 2757 02e0 696E7433 		.ascii	"int32_t\000"
 2757      325F7400 
 2758              	.LASF60:
 2759 02e8 676F616C 		.ascii	"goalSpeed\000"
 2759      53706565 
 2759      6400
 2760              	.LASF16:
 2761 02f2 696E7431 		.ascii	"int16_t\000"
 2761      365F7400 
 2762              	.LASF39:
 2763 02fa 5F426F6F 		.ascii	"_Bool\000"
 2763      6C00
 2764              	.LASF65:
 2765 0300 6368616E 		.ascii	"channel\000"
 2765      6E656C00 
 2766              	.LASF35:
 2767 0308 56657274 		.ascii	"Vertex\000"
 2767      657800
 2768              	.LASF30:
 2769 030f 51756575 		.ascii	"Queue\000"
 2769      6500
 2770              	.LASF21:
 2771 0315 75696E74 		.ascii	"uint32\000"
 2771      333200
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 58


 2772              	.LASF78:
 2773 031c 6D61696E 		.ascii	"main.c\000"
 2773      2E6300
 2774              	.LASF70:
 2775 0323 6D696C6C 		.ascii	"milliVoltReading\000"
 2775      69566F6C 
 2775      74526561 
 2775      64696E67 
 2775      00
 2776              	.LASF10:
 2777 0334 6C6F6E67 		.ascii	"long unsigned int\000"
 2777      20756E73 
 2777      69676E65 
 2777      6420696E 
 2777      7400
 2778              	.LASF73:
 2779 0346 6D617856 		.ascii	"maxValues\000"
 2779      616C7565 
 2779      7300
 2780              	.LASF34:
 2781 0350 61727261 		.ascii	"array\000"
 2781      7900
 2782              	.LASF32:
 2783 0356 73697A65 		.ascii	"size\000"
 2783      00
 2784              	.LASF75:
 2785 035b 636F756E 		.ascii	"count\000"
 2785      7400
 2786              	.LASF72:
 2787 0361 72657365 		.ascii	"reset\000"
 2787      7400
 2788              	.LASF8:
 2789 0367 5F5F696E 		.ascii	"__int32_t\000"
 2789      7433325F 
 2789      7400
 2790              	.LASF4:
 2791 0371 5F5F696E 		.ascii	"__int16_t\000"
 2791      7431365F 
 2791      7400
 2792              	.LASF36:
 2793 037b 70726564 		.ascii	"pred\000"
 2793      00
 2794              	.LASF44:
 2795 0380 78796469 		.ascii	"xydim\000"
 2795      6D00
 2796              	.LASF40:
 2797 0386 6973725F 		.ascii	"isr_eoc_1\000"
 2797      656F635F 
 2797      3100
 2798              	.LASF23:
 2799 0390 646F7562 		.ascii	"double\000"
 2799      6C6500
 2800              	.LASF58:
 2801 0397 636F6D70 		.ascii	"compareValueL\000"
 2801      61726556 
 2801      616C7565 
 2801      4C00
ARM GAS  C:\Users\bbus692\AppData\Local\Temp\cck8bfPu.s 			page 59


 2802              	.LASF61:
 2803 03a5 636F756E 		.ascii	"countL\000"
 2803      744C00
 2804              	.LASF57:
 2805 03ac 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2805      52784275 
 2805      66666572 
 2805      00
 2806              	.LASF59:
 2807 03b9 636F6D70 		.ascii	"compareValueR\000"
 2807      61726556 
 2807      616C7565 
 2807      5200
 2808              	.LASF62:
 2809 03c7 636F756E 		.ascii	"countR\000"
 2809      745200
 2810              	.LASF74:
 2811 03ce 70617374 		.ascii	"pastValues\000"
 2811      56616C75 
 2811      657300
 2812              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
